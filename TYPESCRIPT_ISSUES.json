{
  "audit": {
    "projectName": "siportv3",
    "date": "2024-10-30",
    "typescriptVersion": "5.5.3",
    "overallStatus": "GOOD_COMPILATION_WITH_WARNINGS",
    "compilationErrors": 0,
    "severityBreakdown": {
      "critical": 3,
      "high": 4,
      "medium": 20,
      "low": 197
    },
    "totalIssuesFound": 224
  },
  "criticalIssues": [
    {
      "id": "IMPORT_001",
      "severity": "CRITICAL",
      "type": "MISSING_FILE_IMPORT",
      "file": "/home/user/siportv3/src/pages/VisitorSubscriptionPage.tsx",
      "line": 3,
      "code": "import { useAuth } from '../lib/useAuth';",
      "problem": "File does not exist: /src/lib/useAuth.ts",
      "impact": "Runtime error - component will not function",
      "fix": "import useAuthStore from '../store/authStore'; const { user } = useAuthStore();"
    },
    {
      "id": "IMPORT_002",
      "severity": "CRITICAL",
      "type": "MISSING_FILE_IMPORT",
      "file": "/home/user/siportv3/src/pages/VisitorDashboardPage.tsx",
      "line": 3,
      "code": "import { useAuth } from '../lib/useAuth';",
      "problem": "File does not exist: /src/lib/useAuth.ts",
      "impact": "Runtime error - component will not function",
      "fix": "import useAuthStore from '../store/authStore'; const { user } = useAuthStore();"
    },
    {
      "id": "IMPORT_003",
      "severity": "CRITICAL",
      "type": "MISSING_FILE_IMPORT",
      "file": "/home/user/siportv3/src/components/recommendations/UserRecommendations.tsx",
      "line": 4,
      "code": "import { useAuth } from '../../hooks/useAuth';",
      "problem": "File does not exist: /src/hooks/useAuth.ts",
      "impact": "Runtime error - component will not function",
      "fix": "import useAuthStore from '../../store/authStore'; const { user } = useAuthStore();"
    }
  ],
  "highSeverityIssues": [
    {
      "id": "ANY_001",
      "severity": "HIGH",
      "type": "UNSAFE_TYPE_CAST",
      "file": "/home/user/siportv3/src/services/supabaseService.ts",
      "lines": [124, 156, 178, 207, 244, 285, 308, 381, 449],
      "instanceCount": 40,
      "problem": "Massive casting of Supabase responses to 'any'",
      "pattern": "(safeSupabase as any).from('table').select('*')",
      "recommendation": "Create proper database type interfaces",
      "exampleLine": 124,
      "code": "const { data, error } = await (safeSupabase as any).from('users').select('*');"
    },
    {
      "id": "ANY_002",
      "severity": "HIGH",
      "type": "UNSAFE_TYPE_CAST",
      "file": "/home/user/siportv3/src/services/products/productService.ts",
      "lines": [30, 65, 66, 67, 68, 69, 70, 71, 72, 73, 127, 154, 157, 172, 173, 174, 175, 176, 177, 178, 179],
      "instanceCount": 30,
      "problem": "Multiple casts of database data to 'any'",
      "pattern": "(data as any).fieldName",
      "recommendation": "Create ProductDBRow interface",
      "exampleLine": 30,
      "code": "return (data as any[]).map(item => ({...}));"
    },
    {
      "id": "RECORD_001",
      "severity": "HIGH",
      "type": "OVERLY_GENERIC_TYPE",
      "file": "/home/user/siportv3/src/store/authStore.ts",
      "lines": [17, 18, 23],
      "problem": "Record<string, unknown> loses all type information",
      "pattern": "profileData: Record<string, unknown>",
      "recommendation": "Replace with specific typed interfaces",
      "examples": [
        "signUp: (credentials: {...}, profileData: Record<string, unknown>)",
        "register: (userData: Record<string, unknown>)",
        "updateProfile: (profileData: Record<string, unknown>)"
      ]
    },
    {
      "id": "CATCH_001",
      "severity": "HIGH",
      "type": "UNSAFE_ERROR_HANDLING",
      "file": "/home/user/siportv3/src/store/authStore.ts",
      "lines": [95, 192],
      "problem": "Using 'any' in catch blocks is unsafe",
      "pattern": "catch (error: any) { ... error?.message }",
      "recommendation": "Use 'unknown' with instanceof guard"
    }
  ],
  "mediumSeverityIssues": [
    {
      "id": "UNKNOWN_ARRAY_001",
      "severity": "MEDIUM",
      "type": "OVERLY_GENERIC_TYPE",
      "file": "/home/user/siportv3/src/store/visitorStore.ts",
      "line": 137,
      "code": "personalEvents: unknown[];",
      "problem": "Array type is too generic - loses all information",
      "recommendation": "Create PersonalEvent interface with proper fields"
    },
    {
      "id": "UNKNOWN_ARRAY_002",
      "severity": "MEDIUM",
      "type": "OVERLY_GENERIC_TYPE",
      "file": "/home/user/siportv3/src/components/minisite/MiniSiteBuilder.tsx",
      "line": 56,
      "code": "articles: unknown[];",
      "problem": "Array type is too generic - loses all information",
      "recommendation": "Create Article interface with title, content, etc."
    },
    {
      "id": "ANY_HANDLER_001",
      "severity": "MEDIUM",
      "type": "UNSAFE_TYPE_ANNOTATION",
      "file": "/home/user/siportv3/src/pages/AvailabilitySettingsPage.tsx",
      "line": 41,
      "code": "const handleAvailabilityUpdate = (timeSlots: any[]) => {",
      "problem": "Handler parameter uses 'any[]'",
      "recommendation": "Use TimeSlot[] type instead"
    },
    {
      "id": "ANY_HANDLER_002",
      "severity": "MEDIUM",
      "type": "UNSAFE_TYPE_ANNOTATION",
      "file": "/home/user/siportv3/src/pages/admin/CreateUserPage.tsx",
      "line": 55,
      "code": "const handleChange = (field: string, value: any) => {",
      "problem": "Handler parameter uses 'any' for value",
      "recommendation": "Create FormData interface with typed fields"
    },
    {
      "id": "METADATA_ANY",
      "severity": "MEDIUM",
      "type": "OVERLY_GENERIC_TYPE",
      "file": "/home/user/siportv3/src/pages/admin/ActivityPage.tsx",
      "line": 31,
      "code": "metadata: any;",
      "problem": "Metadata property is untyped 'any'",
      "recommendation": "Create ActivityMetadata interface with known fields"
    }
  ],
  "statisticsByCategory": {
    "anyAnnotations": {
      "total": 107,
      "topFiles": [
        {
          "file": "/src/services/supabaseService.ts",
          "count": 35
        },
        {
          "file": "/src/services/products/productService.ts",
          "count": 20
        },
        {
          "file": "/src/store/authStore.ts",
          "count": 5
        },
        {
          "file": "/src/pages/admin/CreateUserPage.tsx",
          "count": 3
        },
        {
          "file": "/src/pages/AvailabilitySettingsPage.tsx",
          "count": 2
        },
        {
          "file": "/src/pages/admin/ActivityPage_refactored.tsx",
          "count": 1
        },
        {
          "file": "/src/pages/admin/ActivityPage.tsx",
          "count": 1
        },
        {
          "file": "/src/pages/admin/PartnersPage.tsx",
          "count": 1
        },
        {
          "file": "/src/pages/admin/PavillonsPage.tsx",
          "count": 1
        },
        {
          "file": "/src/pages/admin/UsersPage.tsx",
          "count": 1
        },
        {
          "file": "/src/services/adminMetrics.ts",
          "count": 3
        },
        {
          "file": "/src/services/apiService.ts",
          "count": 2
        },
        {
          "file": "/src/services/pavilionMetrics.ts",
          "count": 2
        }
      ]
    },
    "asAnyCasts": {
      "total": 117,
      "topFiles": [
        {
          "file": "/src/services/supabaseService.ts",
          "count": 50
        },
        {
          "file": "/src/lib/supabase.ts",
          "count": 15
        },
        {
          "file": "/src/services/products/productService.ts",
          "count": 25
        },
        {
          "file": "/src/services/adminMetrics.ts",
          "count": 4
        },
        {
          "file": "/src/pages/dev/TestFlowPage.tsx",
          "count": 2
        },
        {
          "file": "/src/pages/NetworkingPage.tsx",
          "count": 3
        },
        {
          "file": "/src/pages/ForgotPasswordPage.tsx",
          "count": 1
        },
        {
          "file": "/src/pages/ResetPasswordPage.tsx",
          "count": 2
        }
      ]
    },
    "catchBlockErrors": {
      "total": 20,
      "files": [
        "src/pages/dev/TestFlowPage.tsx",
        "src/pages/ForgotPasswordPage.tsx",
        "src/pages/ResetPasswordPage.tsx",
        "src/pages/NetworkingPage.tsx",
        "src/pages/NewsPage.tsx",
        "src/pages/admin/CreateUserPage.tsx",
        "src/pages/exhibitor/ProfileEdit.tsx",
        "src/store/authStore.ts",
        "src/services/articleAudioService.ts",
        "src/services/supabaseService.ts",
        "src/components/news/ArticleAudioPlayer.tsx",
        "src/components/products/ProductImageForm.tsx",
        "src/components/minisite/editor/MiniSiteGalleryEditor.tsx",
        "src/components/minisite/MiniSitePreview.tsx",
        "src/components/minisite/MiniSiteWizard.tsx",
        "src/components/auth/RegisterPage.tsx"
      ]
    },
    "recordStringUnknown": {
      "total": 8,
      "files": [
        "src/store/authStore.ts",
        "src/services/supabaseService.ts",
        "src/store/languageStore.ts",
        "src/store/chatStore.ts"
      ]
    }
  },
  "recommendations": {
    "immediate": [
      {
        "priority": 1,
        "action": "Fix 3 broken imports",
        "files": [
          "VisitorSubscriptionPage.tsx",
          "VisitorDashboardPage.tsx",
          "UserRecommendations.tsx"
        ],
        "estimatedTime": "15 minutes"
      },
      {
        "priority": 2,
        "action": "Create typed interfaces for all Supabase responses",
        "files": [
          "src/services/supabaseService.ts",
          "src/services/products/productService.ts"
        ],
        "estimatedTime": "4 hours"
      }
    ],
    "shortTerm": [
      {
        "priority": 3,
        "action": "Replace all 'catch (error: any)' with 'catch (error: unknown)'",
        "affectedInstances": 20,
        "estimatedTime": "1 hour"
      },
      {
        "priority": 4,
        "action": "Replace Record<string, unknown> with specific interfaces",
        "files": [
          "src/store/authStore.ts",
          "src/services/supabaseService.ts"
        ],
        "estimatedTime": "2 hours"
      }
    ],
    "longTerm": [
      {
        "priority": 5,
        "action": "Audit all remaining 'any' usages",
        "files": "All 107 instances",
        "estimatedTime": "8 hours"
      },
      {
        "priority": 6,
        "action": "Strengthen TypeScript config with additional strict options",
        "file": "tsconfig.app.json",
        "estimatedTime": "30 minutes"
      }
    ]
  },
  "configurationReview": {
    "currentConfig": {
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true,
      "target": "ES2020",
      "jsx": "react-jsx"
    },
    "recommendedAdditions": [
      {
        "option": "noImplicitAny",
        "value": true,
        "reason": "Forbid implicit 'any' types"
      },
      {
        "option": "strictNullChecks",
        "value": true,
        "reason": "Ensure null/undefined safety"
      },
      {
        "option": "noUncheckedIndexedAccess",
        "value": true,
        "reason": "Prevent unsafe index access"
      },
      {
        "option": "noImplicitReturns",
        "value": true,
        "reason": "Ensure all code paths return"
      }
    ]
  },
  "summary": {
    "compilationStatus": "SUCCESS (0 errors)",
    "typeSystemHealth": "MODERATE - Many anti-patterns detected",
    "riskLevel": "MEDIUM",
    "estimatedRemediationTime": "16-20 hours",
    "recommendedApproach": "Incremental fixes starting with critical imports, then high-priority any casts"
  }
}
