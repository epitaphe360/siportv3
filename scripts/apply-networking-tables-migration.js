// Script pour appliquer la migration des tables de networking
// Ex√©cutez ce script avec: node scripts/apply-networking-tables-migration.js

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Chargement des variables d'environnement
dotenv.config({ path: '.env.local' });

// V√©rification des variables d'environnement requises
const SUPABASE_URL = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('Erreur: Les variables d\'environnement SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY doivent √™tre d√©finies.');
  console.error('Cr√©ez un fichier .env.local avec ces variables ou d√©finissez-les dans votre environnement.');
  process.exit(1);
}

// Cr√©ation du client Supabase avec la cl√© de service
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Fonction principale qui ex√©cute la migration
async function applyMigration() {
  try {
    console.log('üîÑ D√©but de la migration des tables de networking...');
    
    // Lecture du fichier SQL
    const sqlPath = path.join(process.cwd(), 'scripts', 'create-networking-tables.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // Division du contenu SQL en commandes individuelles
    const sqlCommands = sqlContent
      .replace(/--.*$/gm, '') // Supprime les commentaires
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0);
    
    console.log(`üìã Trouv√© ${sqlCommands.length} commandes SQL √† ex√©cuter`);
    
    // Ex√©cution de chaque commande SQL
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];
      try {
        console.log(`‚öôÔ∏è Ex√©cution de la commande ${i + 1}/${sqlCommands.length}...`);
        const { error } = await supabase.rpc('exec_sql', { sql_query: command + ';' });
        
        if (error) {
          console.error(`‚ùå Erreur lors de l'ex√©cution de la commande ${i + 1}:`, error.message);
          console.error('Commande SQL:', command);
        }
      } catch (cmdError) {
        console.error(`‚ùå Exception lors de l'ex√©cution de la commande ${i + 1}:`, cmdError.message);
        console.error('Commande SQL:', command);
      }
    }
    
    // V√©rification que les tables ont bien √©t√© cr√©√©es
    console.log('üîç V√©rification des tables cr√©√©es...');
    
    // V√©rification de la table connections
    const { data: connectionsData, error: connectionsError } = await supabase
      .from('connections')
      .select('id')
      .limit(1);
    
    if (connectionsError && connectionsError.code === '42P01') {
      console.error('‚ùå La table connections n\'a pas √©t√© cr√©√©e correctement.');
    } else {
      console.log('‚úÖ Table connections cr√©√©e avec succ√®s!');
    }
    
    // V√©rification de la table user_favorites
    const { data: favoritesData, error: favoritesError } = await supabase
      .from('user_favorites')
      .select('user_id')
      .limit(1);
    
    if (favoritesError && favoritesError.code === '42P01') {
      console.error('‚ùå La table user_favorites n\'a pas √©t√© cr√©√©e correctement.');
    } else {
      console.log('‚úÖ Table user_favorites cr√©√©e avec succ√®s!');
    }
    
    // V√©rification de la table networking_recommendations
    const { data: recommendationsData, error: recommendationsError } = await supabase
      .from('networking_recommendations')
      .select('id')
      .limit(1);
    
    if (recommendationsError && recommendationsError.code === '42P01') {
      console.error('‚ùå La table networking_recommendations n\'a pas √©t√© cr√©√©e correctement.');
    } else {
      console.log('‚úÖ Table networking_recommendations cr√©√©e avec succ√®s!');
    }
    
    console.log('‚ú® Migration des tables de networking termin√©e!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message);
    process.exit(1);
  }
}

// Ex√©cution de la migration
applyMigration()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('Erreur non g√©r√©e:', err);
    process.exit(1);
  });
