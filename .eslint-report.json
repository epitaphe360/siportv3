[{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\capacitor.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\create-archive.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\mobile\\capacitor.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\scripts\\generate-wordpress-plugin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PartnerDashboard' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Header } from './components/layout/Header';\nimport { Footer } from './components/layout/Footer';\nimport { HomePage } from './pages/HomePage';\nimport { ExhibitorsPage } from './pages/ExhibitorsPage';\nimport { NetworkingPage } from './pages/NetworkingPage';\nimport { LoginPage } from './components/auth/LoginPage';\nimport { RegisterPage } from './components/auth/RegisterPage';\nimport { ProfilePage } from './components/profile/ProfilePage';\nimport { DashboardPage } from './components/dashboard/DashboardPage';\nimport { EventsPage } from './components/events/EventsPage';\nimport { ChatInterface } from './components/chat/ChatInterface';\nimport { AppointmentCalendar } from './components/appointments/AppointmentCalendar';\nimport { MiniSiteBuilder } from './components/minisite/MiniSiteBuilder';\nimport { MiniSitePreview } from './components/minisite/MiniSitePreview';\nimport { ExhibitorDetailPage } from './components/exhibitor/ExhibitorDetailPage';\nimport { PartnersPage } from './pages/PartnersPage';\nimport { PartnerDetailPage } from './pages/PartnerDetailPage';\nimport { PavillonsPage } from './components/pavilions/PavillonsPage';\nimport { MetricsPage } from './components/metrics/MetricsPage';\nimport { DetailedProfilePage } from './components/profile/DetailedProfilePage';\nimport { VisitorDashboard } from './components/visitor/VisitorDashboard';\nimport { VisitorProfileSettings } from './components/visitor/VisitorProfileSettings';\nimport { AdminDashboard } from './components/dashboard/AdminDashboard';\nimport { ExhibitorDashboard } from './components/dashboard/ExhibitorDashboard';\nimport { PartnerDashboard } from './components/dashboard/PartnerDashboard';\nimport { ExhibitorValidation } from './components/admin/ExhibitorValidation';\nimport { ModerationPanel } from './components/admin/ModerationPanel';\nimport { MiniSiteEditor } from './components/minisite/MiniSiteEditor';\nimport { NewsPage } from './pages/NewsPage';\nimport { ArticleDetailPage } from './pages/ArticleDetailPage';\nimport { ExhibitorCreationSimulator } from './components/admin/ExhibitorCreationSimulator';\nimport { PartnerCreationForm } from './components/admin/PartnerCreationForm';\nimport { NewsArticleCreationForm } from './components/admin/NewsArticleCreationForm';\nimport { UserManagementPage } from './pages/UserManagementPage';\nimport { ChatBot } from './components/chatbot/ChatBot';\nimport { ChatBotToggle } from './components/chatbot/ChatBotToggle';\nimport { useLanguageStore } from './store/languageStore';\n\nfunction App() {\n  const [isChatBotOpen, setIsChatBotOpen] = React.useState(false);\n  const { currentLanguage, getCurrentLanguage } = useLanguageStore();\n  \n  // Appliquer la direction du texte selon la langue\n  React.useEffect(() => {\n    const currentLang = getCurrentLanguage();\n    document.documentElement.dir = currentLang.rtl ? 'rtl' : 'ltr';\n    document.documentElement.lang = currentLang.code;\n  }, [currentLanguage, getCurrentLanguage]);\n\n  return (\n    <Router>\n      <div className=\"min-h-screen bg-white flex flex-col\">\n        <Header />\n        <main className=\"flex-1\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/exhibitors\" element={<ExhibitorsPage />} />\n            <Route path=\"/exhibitors/:id\" element={<ExhibitorDetailPage />} />\n            <Route path=\"/partners\" element={<PartnersPage />} />\n            <Route path=\"/partners/:id\" element={<PartnerDetailPage />} />\n            <Route path=\"/pavilions\" element={<PavillonsPage />} />\n            <Route path=\"/metrics\" element={<MetricsPage />} />\n            <Route path=\"/networking\" element={<NetworkingPage />} />\n            <Route path=\"/events\" element={<EventsPage />} />\n            <Route path=\"/login\" element={<LoginPage />} />\n            <Route path=\"/register\" element={<RegisterPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/profile/detailed\" element={<DetailedProfilePage />} />\n            <Route path=\"/dashboard\" element={<DashboardPage />} />\n            <Route path=\"/exhibitor/profile\" element={<ProfilePage />} />\n            <Route path=\"/exhibitor/dashboard\" element={<ExhibitorDashboard />} />\n            <Route path=\"/visitor/dashboard\" element={<VisitorDashboard />} />\n            <Route path=\"/visitor/settings\" element={<VisitorProfileSettings />} />\n            <Route path=\"/messages\" element={<ChatInterface />} />\n            <Route path=\"/chat\" element={<ChatInterface />} />\n            <Route path=\"/appointments\" element={<AppointmentCalendar />} />\n            <Route path=\"/calendar\" element={<AppointmentCalendar />} />\n            <Route path=\"/minisite\" element={<MiniSiteBuilder />} />\n            <Route path=\"/minisite/editor\" element={<MiniSiteEditor />} />\n            <Route path=\"/admin/create-exhibitor\" element={<ExhibitorCreationSimulator />} />\n            <Route path=\"/admin/create-partner\" element={<PartnerCreationForm />} />\n            <Route path=\"/admin/create-news\" element={<NewsArticleCreationForm />} />\n            <Route path=\"/minisite/:exhibitorId\" element={<MiniSitePreview />} />\n            <Route path=\"/admin/validation\" element={<ExhibitorValidation />} />\n            <Route path=\"/admin/moderation\" element={<ModerationPanel />} />\n            <Route path=\"/news\" element={<NewsPage />} />\n            <Route path=\"/news/:id\" element={<ArticleDetailPage />} />\n            <Route path=\"/admin/dashboard\" element={<AdminDashboard />} />\n            <Route path=\"/admin/users\" element={<UserManagementPage />} />\n          </Routes>\n        </main>\n        <Footer />\n        \n        {/* ChatBot */}\n        <ChatBot \n          isOpen={isChatBotOpen} \n          onToggle={() => setIsChatBotOpen(!isChatBotOpen)} \n        />\n        \n        {/* ChatBot Toggle Button */}\n        {!isChatBotOpen && (\n          <ChatBotToggle \n            onClick={() => setIsChatBotOpen(true)}\n            hasUnreadMessages={false}\n          />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\admin\\ExhibitorCreationSimulator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":527,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18994,18997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18994,18997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":559,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20487,20490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20487,20490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  Plus,\n  Building2,\n  User,\n  Mail,\n  Phone,\n  Globe,\n  MapPin,\n  FileText,\n  Upload,\n  CheckCircle,\n  Loader,\n  AlertCircle,\n  Target,\n  Award,\n  Calendar,\n  DollarSign,\n  Package\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { SupabaseService } from '../../services/supabaseService';\nimport useAuthStore from '../../store/authStore';\nimport { useExhibitorStore } from '../../store/exhibitorStore';\nimport { motion } from 'framer-motion';\n\ninterface NewExhibitorForm {\n  // Informations entreprise\n  companyName: string;\n  sector: string;\n  country: string;\n  website: string;\n  description: string;\n  \n  // Contact principal\n  contactName: string;\n  email: string;\n  phone: string;\n  position: string;\n  \n  // Informations commerciales\n  packageType: 'basic' | 'premium' | 'vip';\n  standSize: string;\n  contractValue: string;\n  paymentStatus: 'pending' | 'partial' | 'completed';\n  \n  // Produits\n  products: Array<{\n    name: string;\n    category: string;\n    description: string;\n  }>;\n}\n\nexport const ExhibitorCreationSimulator: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { user } = useAuthStore();\n  const { fetchExhibitors } = useExhibitorStore();\n  const [formData, setFormData] = useState<NewExhibitorForm>({\n    companyName: '',\n    sector: '',\n    country: '',\n    website: '',\n    description: '',\n    contactName: '',\n    email: '',\n    phone: '',\n    position: '',\n    packageType: 'basic',\n    standSize: '18m┬▓',\n    contractValue: '',\n    paymentStatus: 'pending',\n    products: []\n  });\n\n  const steps = [\n    { id: 1, title: 'Entreprise', description: 'Informations g├⌐n├⌐rales' },\n    { id: 2, title: 'Contact', description: 'Personne responsable' },\n    { id: 3, title: 'Commercial', description: 'Package et tarification' },\n    { id: 4, title: 'Produits', description: 'Catalogue exposant' },\n    { id: 5, title: 'Validation', description: 'V├⌐rification finale' }\n  ];\n\n  const sectors = [\n    'Technologies Maritimes',\n    '├ëquipements Portuaires',\n    'Logistique & Transport',\n    'Services Portuaires',\n    'Consulting Maritime',\n    'Formation & ├ëducation',\n    'D├⌐veloppement Durable',\n    'Innovation & R&D'\n  ];\n\n  const packages = [\n    {\n      type: 'basic',\n      name: 'Package Basic',\n      price: '18,000Γé¼',\n      standSize: '18m┬▓',\n      features: ['Stand standard', 'Listing exposants', 'Acc├¿s networking', '2 badges exposant']\n    },\n    {\n      type: 'premium',\n      name: 'Package Premium',\n      price: '45,000Γé¼',\n      standSize: '36m┬▓',\n      features: ['Stand premium', 'Mini-site personnalis├⌐', 'Conf├⌐rences', '5 badges exposant', 'Networking VIP']\n    },\n    {\n      type: 'vip',\n      name: 'Package VIP',\n      price: '85,000Γé¼',\n      standSize: '54m┬▓',\n      features: ['Stand VIP', 'Branding premium', 'Keynote speaker', '10 badges exposant', 'Soir├⌐e exclusive']\n    }\n  ];\n\n  const handleNextStep = () => {\n    if (currentStep < 5) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      if (!user) {\n        throw new Error('Utilisateur non connect├⌐');\n      }\n\n      // 1. Cr├⌐er d'abord l'utilisateur pour l'exposant\n      const userData = {\n        email: formData.email,\n        name: formData.contactName,\n        type: 'exhibitor' as const,\n        profile: {\n          firstName: formData.contactName.split(' ')[0] || '',\n          lastName: formData.contactName.split(' ').slice(1).join(' ') || '',\n          company: formData.companyName,\n          position: formData.position,\n          phone: formData.phone,\n          country: formData.country,\n          website: formData.website,\n          bio: formData.description,\n          interests: [],\n          objectives: []\n        }\n      };\n\n      const newUser = await SupabaseService.createUser(userData);\n\n      // 2. Cr├⌐er l'exposant\n      const exhibitorData = {\n        userId: newUser.id,\n        companyName: formData.companyName,\n        category: 'port-industry' as const, // Valeur par d├⌐faut\n        sector: formData.sector,\n        description: formData.description,\n        logo: undefined,\n        website: formData.website,\n        contactInfo: {\n          email: formData.email,\n          phone: formData.phone,\n          address: '',\n          city: '',\n          country: formData.country\n        }\n      };\n\n      const newExhibitor = await SupabaseService.createExhibitor(exhibitorData);\n\n      // 3. Cr├⌐er les produits associ├⌐s\n      for (const product of formData.products) {\n        if (product.name && product.category && product.description) {\n          await SupabaseService.createProduct({\n            exhibitorId: newExhibitor.id,\n            name: product.name,\n            description: product.description,\n            category: product.category,\n            images: [],\n            featured: false\n          });\n        }\n      }\n\n      // 4. Rafra├«chir la liste des exposants\n      await fetchExhibitors();\n      \n      alert(`≡ƒÄë EXPOSANT CR├ë├ë AVEC SUCC├êS\\n\\nΓ£à Utilisateur cr├⌐├⌐: ${newUser.email}\\nΓ£à Exposant enregistr├⌐: ${newExhibitor.companyName}\\nΓ£à ${formData.products.length} produits ajout├⌐s\\nΓ£à Mini-site initialis├⌐\\n\\n≡ƒôº Compte activ├⌐ pour: ${formData.email}\\n≡ƒÅó ID Exposant: ${newExhibitor.id}\\n≡ƒÄ» Pr├¬t ├á utiliser la plateforme !`);\n      \n      // Reset form\n      setFormData({\n        companyName: '',\n        sector: '',\n        country: '',\n        website: '',\n        description: '',\n        contactName: '',\n        email: '',\n        phone: '',\n        position: '',\n        packageType: 'basic',\n        standSize: '18m┬▓',\n        contractValue: '',\n        paymentStatus: 'pending',\n        products: []\n      });\n      \n      setCurrentStep(1);\n      setIsSubmitting(false);\n      \n    } catch (error) {\n      console.error('Erreur cr├⌐ation exposant:', error);\n      setIsSubmitting(false);\n      alert(`Γ¥î ERREUR CR├ëATION EXPOSANT\\n\\n${error instanceof Error ? error.message : 'Erreur inconnue'}\\n\\nVeuillez v├⌐rifier :\\nΓÇó Connexion ├á la base de donn├⌐es\\nΓÇó Email non d├⌐j├á utilis├⌐\\nΓÇó Tous les champs requis remplis`);\n    }\n  };\n\n  const addProduct = () => {\n    setFormData({\n      ...formData,\n      products: [...formData.products, { name: '', category: '', description: '' }]\n    });\n  };\n\n  const removeProduct = (index: number) => {\n    setFormData({\n      ...formData,\n      products: formData.products.filter((_, i) => i !== index)\n    });\n  };\n\n  const updateProduct = (index: number, field: string, value: string) => {\n    const updatedProducts = formData.products.map((product, i) => \n      i === index ? { ...product, [field]: value } : product\n    );\n    setFormData({ ...formData, products: updatedProducts });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Simulateur de Cr├⌐ation d'Exposant\n            </h1>\n            <p className=\"text-gray-600\">\n              Cr├⌐ez un nouveau dossier exposant pour SIPORTS 2026\n            </p>\n          </motion.div>\n        </div>\n\n        {/* Progress Steps */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                  currentStep >= step.id \n                    ? 'bg-blue-600 text-white border-blue-600' \n                    : 'bg-white text-gray-400 border-gray-300'\n                }`}>\n                  {currentStep > step.id ? (\n                    <CheckCircle className=\"h-5 w-5\" />\n                  ) : (\n                    <span className=\"text-sm font-semibold\">{step.id}</span>\n                  )}\n                </div>\n                <div className=\"ml-3 hidden sm:block\">\n                  <p className={`text-sm font-medium ${\n                    currentStep >= step.id ? 'text-gray-900' : 'text-gray-500'\n                  }`}>\n                    {step.title}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{step.description}</p>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-4 ${\n                    currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Form Content */}\n        <Card className=\"p-8\">\n          {/* Step 1: Informations Entreprise */}\n          {currentStep === 1 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Informations sur l'entreprise\n                </h2>\n                <p className=\"text-gray-600\">\n                  Renseignez les informations g├⌐n├⌐rales de l'exposant\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nom de l'entreprise *\n                  </label>\n                  <div className=\"relative\">\n                    <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.companyName}\n                      onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Nom de l'entreprise exposante\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Secteur d'activit├⌐ *\n                  </label>\n                  <select\n                    value={formData.sector}\n                    onChange={(e) => setFormData({ ...formData, sector: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">S├⌐lectionnez un secteur</option>\n                    {sectors.map((sector) => (\n                      <option key={sector} value={sector}>{sector}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Pays *\n                  </label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.country}\n                      onChange={(e) => setFormData({ ...formData, country: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Pays de l'entreprise\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Site web\n                  </label>\n                  <div className=\"relative\">\n                    <Globe className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"url\"\n                      value={formData.website}\n                      onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"https://entreprise.com\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Description de l'entreprise *\n                </label>\n                <textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={4}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"D├⌐crivez l'activit├⌐ principale de l'entreprise, ses sp├⌐cialit├⌐s et son expertise...\"\n                />\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 2: Contact Principal */}\n          {currentStep === 2 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Contact principal\n                </h2>\n                <p className=\"text-gray-600\">\n                  Personne responsable du dossier exposant\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nom complet *\n                  </label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.contactName}\n                      onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Pr├⌐nom et nom du contact\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Poste/Fonction *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.position}\n                    onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Directeur Commercial, CEO, etc.\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email professionnel *\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"contact@entreprise.com\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    T├⌐l├⌐phone *\n                  </label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"+33 1 23 45 67 89\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 3: Informations Commerciales */}\n          {currentStep === 3 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Package et tarification\n                </h2>\n                <p className=\"text-gray-600\">\n                  Choisissez le package exposant adapt├⌐\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {packages.map((pkg) => (\n                  <div\n                    key={pkg.type}\n                    className={`p-6 border-2 rounded-lg cursor-pointer transition-all ${\n                      formData.packageType === pkg.type\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => {\n                      setFormData({ \n                        ...formData, \n                        packageType: pkg.type as any,\n                        standSize: pkg.standSize,\n                        contractValue: pkg.price\n                      });\n                    }}\n                  >\n                    <div className=\"text-center mb-4\">\n                      <Package className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                      <h3 className=\"font-bold text-lg text-gray-900\">{pkg.name}</h3>\n                      <p className=\"text-2xl font-bold text-blue-600 mt-2\">{pkg.price}</p>\n                      <p className=\"text-sm text-gray-600\">{pkg.standSize}</p>\n                    </div>\n                    \n                    <ul className=\"space-y-2\">\n                      {pkg.features.map((feature, idx) => (\n                        <li key={idx} className=\"flex items-center text-sm text-gray-700\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500 mr-2\" />\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Statut du paiement\n                  </label>\n                  <select\n                    value={formData.paymentStatus}\n                    onChange={(e) => setFormData({ ...formData, paymentStatus: e.target.value as any })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"pending\">En attente</option>\n                    <option value=\"partial\">Acompte vers├⌐</option>\n                    <option value=\"completed\">Paiement complet</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Valeur du contrat\n                  </label>\n                  <div className=\"relative\">\n                    <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.contractValue}\n                      onChange={(e) => setFormData({ ...formData, contractValue: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Montant du contrat\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 4: Produits */}\n          {currentStep === 4 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Catalogue produits\n                </h2>\n                <p className=\"text-gray-600\">\n                  Ajoutez les produits et services de l'exposant\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                {formData.products.map((product, index) => (\n                  <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h4 className=\"font-medium text-gray-900\">Produit {index + 1}</h4>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeProduct(index)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Nom du produit\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={product.name}\n                          onChange={(e) => updateProduct(index, 'name', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"Nom du produit/service\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Cat├⌐gorie\n                        </label>\n                        <select\n                          value={product.category}\n                          onChange={(e) => updateProduct(index, 'category', e.target.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        >\n                          <option value=\"\">S├⌐lectionnez une cat├⌐gorie</option>\n                          <option value=\"Software\">Logiciel</option>\n                          <option value=\"Hardware\">├ëquipement</option>\n                          <option value=\"Service\">Service</option>\n                          <option value=\"Consulting\">Conseil</option>\n                        </select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-4\">\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Description\n                      </label>\n                      <textarea\n                        value={product.description}\n                        onChange={(e) => updateProduct(index, 'description', e.target.value)}\n                        rows={2}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"Description du produit/service\"\n                      />\n                    </div>\n                  </div>\n                ))}\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={addProduct}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Ajouter un produit\n                </Button>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 5: Validation */}\n          {currentStep === 5 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Validation du dossier\n                </h2>\n                <p className=\"text-gray-600\">\n                  V├⌐rifiez les informations avant soumission\n                </p>\n              </div>\n\n              {/* R├⌐capitulatif */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Entreprise</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Nom :</strong> {formData.companyName}</div>\n                    <div><strong>Secteur :</strong> {formData.sector}</div>\n                    <div><strong>Pays :</strong> {formData.country}</div>\n                    <div><strong>Site web :</strong> {formData.website}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Contact</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Nom :</strong> {formData.contactName}</div>\n                    <div><strong>Poste :</strong> {formData.position}</div>\n                    <div><strong>Email :</strong> {formData.email}</div>\n                    <div><strong>T├⌐l├⌐phone :</strong> {formData.phone}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Commercial</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Package :</strong> {packages.find(p => p.type === formData.packageType)?.name}</div>\n                    <div><strong>Taille stand :</strong> {formData.standSize}</div>\n                    <div><strong>Valeur :</strong> {formData.contractValue}</div>\n                    <div><strong>Paiement :</strong> {formData.paymentStatus}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Produits</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    {formData.products.map((product, idx) => (\n                      <div key={idx}>ΓÇó {product.name} ({product.category})</div>\n                    ))}\n                    {formData.products.length === 0 && (\n                      <div className=\"text-gray-500\">Aucun produit ajout├⌐</div>\n                    )}\n                  </div>\n                </Card>\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Processus de validation</h4>\n                <p className=\"text-sm text-blue-700\">\n                  Apr├¿s soumission, le dossier sera examin├⌐ par l'├⌐quipe commerciale puis valid├⌐ par l'administration. \n                  L'exposant recevra un email de confirmation une fois son compte activ├⌐.\n                </p>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between pt-8 border-t border-gray-200\">\n            <div>\n              {currentStep > 1 && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handlePrevStep}\n                >\n                  Pr├⌐c├⌐dent\n                </Button>\n              )}\n            </div>\n\n            <div>\n              {currentStep < 5 ? (\n                <Button\n                  onClick={handleNextStep}\n                  disabled={\n                    (currentStep === 1 && (!formData.companyName || !formData.sector || !formData.country || !formData.description)) ||\n                    (currentStep === 2 && (!formData.contactName || !formData.email || !formData.phone || !formData.position))\n                  }\n                >\n                  Suivant\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                      Cr├⌐ation en cours...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Cr├⌐er le Dossier Exposant\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\admin\\ExhibitorValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\admin\\ModerationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":98,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":19}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  CheckCircle,\n  X,\n  Eye,\n  Clock,\n  AlertTriangle,\n  FileText,\n  MessageCircle,\n  Shield,\n  Loader,\n  Edit,\n  Flag,\n  User,\n  Building2\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { motion } from 'framer-motion';\n\ninterface PendingContent {\n  id: string;\n  exhibitorId: string;\n  exhibitorName: string;\n  sectionType: string;\n  sectionTitle: string;\n  content: any;\n  submittedAt: Date;\n  status: 'pending' | 'approved' | 'rejected';\n  moderatorId?: string;\n  moderatorComment?: string;\n  changes: string[];\n  priority: 'low' | 'medium' | 'high';\n}\n\nconst mockPendingContent: PendingContent[] = [\n  {\n    id: 'content-1',\n    exhibitorId: 'exhibitor-1',\n    exhibitorName: 'Ocean Tech Solutions',\n    sectionType: 'about',\n    sectionTitle: 'Section ├Ç propos',\n    content: {\n      title: 'Notre expertise IoT maritime',\n      description: 'Avec plus de 15 ans d\\'exp├⌐rience dans l\\'IoT maritime, nous d├⌐veloppons des solutions innovantes...',\n      features: ['Solutions IoT innovantes', 'Expertise maritime reconnue']\n    },\n    submittedAt: new Date(Date.now() - 3600000),\n    status: 'pending',\n    changes: ['Mise ├á jour description', 'Ajout nouvelles fonctionnalit├⌐s'],\n    priority: 'medium'\n  },\n  {\n    id: 'content-2',\n    exhibitorId: 'exhibitor-2',\n    exhibitorName: 'African Ports Development',\n    sectionType: 'products',\n    sectionTitle: 'Catalogue Produits',\n    content: {\n      title: 'Nos services de consulting',\n      products: [\n        {\n          name: 'Port Development Consulting',\n          description: 'Conseil strat├⌐gique pour le d├⌐veloppement portuaire'\n        }\n      ]\n    },\n    submittedAt: new Date(Date.now() - 7200000),\n    status: 'pending',\n    changes: ['Nouveau produit ajout├⌐', 'Prix mis ├á jour'],\n    priority: 'high'\n  }\n];\n\nexport const ModerationPanel: React.FC = () => {\n  const [pendingContent, setPendingContent] = useState<PendingContent[]>(mockPendingContent);\n  const [selectedContent, setSelectedContent] = useState<PendingContent | null>(null);\n  const [showModerationModal, setShowModerationModal] = useState(false);\n  const [moderationComment, setModerationComment] = useState('');\n  const [moderatingContent, setModeratingContent] = useState<string[]>([]);\n\n  const handleApproveContent = async (content: PendingContent) => {\n    setModeratingContent(prev => [...prev, content.id]);\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Simulation de l'approbation\n      alert(`Γ£à CONTENU APPROUV├ë - ${content.exhibitorName}\\n\\n≡ƒô¥ Section: ${content.sectionTitle}\\n≡ƒîÉ Publication automatique sur le mini-site\\n≡ƒôº Notification envoy├⌐e ├á l'exposant\\n\\nΓÅ▒∩╕Å Mise en ligne: Imm├⌐diate`);\n      \n      // Retirer de la liste des contenus en attente\n      setPendingContent(prev => prev.filter(c => c.id !== content.id));\n      setModeratingContent(prev => prev.filter(id => id !== content.id));\n      \n    } catch (error) {\n      setModeratingContent(prev => prev.filter(id => id !== content.id));\n      alert('Γ¥î Erreur lors de l\\'approbation');\n    }\n  };\n\n  const handleRejectContent = async (content: PendingContent, comment: string) => {\n    setModeratingContent(prev => [...prev, content.id]);\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      alert(`Γ¥î CONTENU REFUS├ë - ${content.exhibitorName}\\n\\n≡ƒô¥ Section: ${content.sectionTitle}\\n≡ƒÆ¼ Motif: ${comment}\\n≡ƒôº Notification avec corrections envoy├⌐e\\n\\n≡ƒöä L'exposant peut modifier et resoumettre`);\n      \n      // Mettre ├á jour le statut\n      setPendingContent(prev => prev.map(c => \n        c.id === content.id \n          ? { ...c, status: 'rejected', moderatorComment: comment }\n          : c\n      ));\n      \n      setModeratingContent(prev => prev.filter(id => id !== content.id));\n      setShowModerationModal(false);\n      setSelectedContent(null);\n      setModerationComment('');\n      \n    } catch (error) {\n      setModeratingContent(prev => prev.filter(id => id !== content.id));\n      alert('Γ¥î Erreur lors du refus');\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'Priorit├⌐ Haute';\n      case 'medium': return 'Priorit├⌐ Moyenne';\n      case 'low': return 'Priorit├⌐ Basse';\n      default: return priority;\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-orange-600 p-3 rounded-lg\">\n                <Shield className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  Panneau de Mod├⌐ration de Contenu\n                </h1>\n                <p className=\"text-gray-600\">\n                  Validez les modifications des mini-sites exposants\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Flag className=\"h-5 w-5 text-orange-600\" />\n                <span className=\"text-orange-800 font-medium\">Mod├⌐ration Active</span>\n                <Badge variant=\"warning\" size=\"sm\">{pendingContent.length} contenus en attente</Badge>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Statistiques Mod├⌐ration */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-yellow-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Clock className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {pendingContent.filter(c => c.status === 'pending').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">En Attente</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-red-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Flag className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {pendingContent.filter(c => c.priority === 'high').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Priorit├⌐ Haute</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-green-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">47</div>\n            <div className=\"text-sm text-gray-600\">Approuv├⌐s Aujourd'hui</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Eye className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">2.4</div>\n            <div className=\"text-sm text-gray-600\">Temps Moyen (min)</div>\n          </Card>\n        </div>\n\n        {/* Liste des Contenus en Attente */}\n        <div className=\"space-y-6\">\n          {pendingContent.map((content, index) => (\n            <motion.div\n              key={content.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <Card>\n                <div className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"bg-blue-100 p-3 rounded-lg\">\n                        <Building2 className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-bold text-gray-900\">\n                          {content.exhibitorName}\n                        </h3>\n                        <p className=\"text-gray-600\">{content.sectionTitle}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          Soumis le {formatDate(content.submittedAt)}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        className={getPriorityColor(content.priority)}\n                        size=\"sm\"\n                      >\n                        {getPriorityLabel(content.priority)}\n                      </Badge>\n                      <Badge variant=\"warning\" size=\"sm\">\n                        {content.status === 'pending' ? 'En attente' : content.status}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  {/* Changements */}\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Modifications apport├⌐es :</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {content.changes.map((change, idx) => (\n                        <Badge key={idx} variant=\"info\" size=\"sm\">\n                          {change}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Aper├ºu du Contenu */}\n                  <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Aper├ºu du contenu :</h4>\n                    {content.sectionType === 'about' && (\n                      <div>\n                        <h5 className=\"font-semibold text-gray-800 mb-1\">{content.content.title}</h5>\n                        <p className=\"text-sm text-gray-600 line-clamp-2\">{content.content.description}</p>\n                      </div>\n                    )}\n                    {content.sectionType === 'products' && (\n                      <div>\n                        <h5 className=\"font-semibold text-gray-800 mb-1\">{content.content.title}</h5>\n                        <p className=\"text-sm text-gray-600\">{content.content.products.length} produits</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex space-x-3\">\n                    <Button \n                      className=\"bg-green-600 hover:bg-green-700\"\n                      onClick={() => handleApproveContent(content)}\n                      disabled={moderatingContent.includes(content.id)}\n                    >\n                      {moderatingContent.includes(content.id) ? (\n                        <>\n                          <Loader className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Approbation...\n                        </>\n                      ) : (\n                        <>\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Approuver\n                        </>\n                      )}\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedContent(content);\n                        setShowModerationModal(true);\n                      }}\n                    >\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Refuser avec Commentaire\n                    </Button>\n                    \n                    <Button variant=\"outline\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      Pr├⌐visualiser\n                    </Button>\n                    \n                    <Button variant=\"outline\">\n                      <MessageCircle className=\"h-4 w-4 mr-2\" />\n                      Contacter Exposant\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Message si aucun contenu en attente */}\n        {pendingContent.length === 0 && (\n          <Card className=\"text-center p-12\">\n            <div className=\"bg-green-100 p-6 rounded-full w-24 h-24 mx-auto mb-6\">\n              <CheckCircle className=\"h-12 w-12 text-green-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n              Toute la mod├⌐ration est ├á jour !\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              Aucun contenu en attente de validation\n            </p>\n            <Link to=\"/dashboard\">\n              <Button>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </Card>\n        )}\n      </div>\n\n      {/* Modal de Refus avec Commentaire */}\n      {showModerationModal && selectedContent && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\"\n          >\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Refuser le Contenu\n            </h3>\n            \n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-600 mb-2\">\n                <strong>{selectedContent.exhibitorName}</strong> - {selectedContent.sectionTitle}\n              </p>\n              \n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Motif du refus et corrections demand├⌐es :\n              </label>\n              <textarea\n                value={moderationComment}\n                onChange={(e) => setModerationComment(e.target.value)}\n                placeholder=\"Expliquez les raisons du refus et les corrections ├á apporter...\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500\"\n                rows={4}\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-3\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowModerationModal(false);\n                  setSelectedContent(null);\n                  setModerationComment('');\n                }}\n              >\n                Annuler\n              </Button>\n              <Button \n                onClick={() => handleRejectContent(selectedContent, moderationComment)}\n                disabled={!moderationComment.trim()}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Refuser le Contenu\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\admin\\NewsArticleCreationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  Plus,\n  FileText,\n  User,\n  Calendar,\n  Tag,\n  Image,\n  CheckCircle,\n  Loader,\n  Eye,\n  Save\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useNewsStore } from '../../store/newsStore';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\n\ninterface NewArticleForm {\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  category: string;\n  tags: string[];\n  featured: boolean;\n  image: string;\n  readTime: number;\n  sourceUrl: string;\n}\n\nexport const NewsArticleCreationForm: React.FC = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const { user } = useAuthStore();\n  const { createNewsArticle } = useNewsStore();\n  const navigate = useNavigate();\n  \n  const [formData, setFormData] = useState<NewArticleForm>({\n    title: '',\n    excerpt: '',\n    content: '',\n    author: user?.profile.firstName + ' ' + user?.profile.lastName || '',\n    category: '',\n    tags: [],\n    featured: false,\n    image: '',\n    readTime: 5,\n    sourceUrl: ''\n  });\n\n  const [newTag, setNewTag] = useState('');\n\n  const categories = [\n    '├ëv├⌐nement',\n    'Innovation',\n    'Partenariat',\n    'Durabilit├⌐',\n    'Formation',\n    'Commerce',\n    'Technologie',\n    'Infrastructure'\n  ];\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      if (!user) {\n        throw new Error('Utilisateur non connect├⌐');\n      }\n\n      if (!formData.title || !formData.excerpt || !formData.content || !formData.category) {\n        throw new Error('Veuillez remplir tous les champs obligatoires');\n      }\n\n      const articleData = {\n        title: formData.title,\n        excerpt: formData.excerpt,\n        content: formData.content,\n        author: formData.author,\n        category: formData.category,\n        tags: formData.tags,\n        featured: formData.featured,\n        image: formData.image,\n        readTime: formData.readTime,\n        source: 'siports',\n        sourceUrl: formData.sourceUrl,\n        publishedAt: new Date(),\n        views: 0\n      };\n\n      await createNewsArticle(articleData);\n      \n      alert(`≡ƒÄë ARTICLE CR├ë├ë AVEC SUCC├êS\\n\\nΓ£à Titre: ${formData.title}\\nΓ£à Cat├⌐gorie: ${formData.category}\\nΓ£à Auteur: ${formData.author}\\nΓ£à Tags: ${formData.tags.length} mots-cl├⌐s\\n${formData.featured ? 'Γ¡É Article mis en avant' : ''}\\n\\n≡ƒô░ Article publi├⌐ et visible\\n≡ƒöä Synchronisation automatique\\n≡ƒôº Notifications envoy├⌐es aux abonn├⌐s`);\n      \n      // Rediriger vers la page des actualit├⌐s\n      navigate('/news');\n      \n    } catch (error) {\n      console.error('Erreur cr├⌐ation article:', error);\n      setIsSubmitting(false);\n      alert(`Γ¥î ERREUR CR├ëATION ARTICLE\\n\\n${error instanceof Error ? error.message : 'Erreur inconnue'}\\n\\nVeuillez v├⌐rifier :\\nΓÇó Tous les champs obligatoires\\nΓÇó Connexion ├á la base de donn├⌐es\\nΓÇó Format des donn├⌐es`);\n    }\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      setFormData({\n        ...formData,\n        tags: [...formData.tags, newTag.trim()]\n      });\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData({\n      ...formData,\n      tags: formData.tags.filter(tag => tag !== tagToRemove)\n    });\n  };\n\n  const calculateReadTime = (content: string) => {\n    const wordsPerMinute = 200;\n    const wordCount = content.split(/\\s+/).length;\n    return Math.max(1, Math.ceil(wordCount / wordsPerMinute));\n  };\n\n  const handleContentChange = (content: string) => {\n    const readTime = calculateReadTime(content);\n    setFormData({\n      ...formData,\n      content,\n      readTime\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Cr├⌐er un Nouvel Article\n            </h1>\n            <p className=\"text-gray-600\">\n              Publier une nouvelle actualit├⌐ portuaire\n            </p>\n          </motion.div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\">\n              <div className=\"space-y-6\">\n                {/* Titre */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Titre de l'article *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Titre accrocheur de votre article\"\n                  />\n                </div>\n\n                {/* Extrait */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Extrait/R├⌐sum├⌐ *\n                  </label>\n                  <textarea\n                    value={formData.excerpt}\n                    onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}\n                    rows={3}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"R├⌐sum├⌐ de l'article qui appara├«tra dans la liste...\"\n                  />\n                </div>\n\n                {/* Contenu */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Contenu de l'article *\n                  </label>\n                  <textarea\n                    value={formData.content}\n                    onChange={(e) => handleContentChange(e.target.value)}\n                    rows={12}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"R├⌐digez le contenu complet de votre article...\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Temps de lecture estim├⌐: {formData.readTime} minute{formData.readTime > 1 ? 's' : ''}\n                  </p>\n                </div>\n\n                {/* Image */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Image de couverture\n                  </label>\n                  <input\n                    type=\"url\"\n                    value={formData.image}\n                    onChange={(e) => setFormData({ ...formData, image: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"https://example.com/image.jpg\"\n                  />\n                  {formData.image && (\n                    <div className=\"mt-2\">\n                      <img\n                        src={formData.image}\n                        alt=\"Aper├ºu\"\n                        className=\"w-32 h-20 object-cover rounded-lg\"\n                        onError={(e) => {\n                          e.currentTarget.style.display = 'none';\n                        }}\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* URL Source */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    URL source (optionnel)\n                  </label>\n                  <input\n                    type=\"url\"\n                    value={formData.sourceUrl}\n                    onChange={(e) => setFormData({ ...formData, sourceUrl: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"https://source-originale.com/article\"\n                  />\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* M├⌐tadonn├⌐es */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">M├⌐tadonn├⌐es</h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Auteur\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.author}\n                    onChange={(e) => setFormData({ ...formData, author: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Cat├⌐gorie *\n                  </label>\n                  <select\n                    value={formData.category}\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">S├⌐lectionnez une cat├⌐gorie</option>\n                    {categories.map((category) => (\n                      <option key={category} value={category}>{category}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.featured}\n                      onChange={(e) => setFormData({ ...formData, featured: e.target.checked })}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                    <span className=\"text-sm text-gray-700\">Article ├á la une</span>\n                  </label>\n                </div>\n              </div>\n            </Card>\n\n            {/* Tags */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Mots-cl├⌐s</h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    value={newTag}\n                    onChange={(e) => setNewTag(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Ajouter un tag\"\n                  />\n                  <Button size=\"sm\" onClick={addTag}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"info\" className=\"cursor-pointer\" onClick={() => removeTag(tag)}>\n                      {tag} ├ù\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </Card>\n\n            {/* Actions */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Actions</h3>\n              \n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => setShowPreview(!showPreview)}\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  {showPreview ? 'Masquer' : 'Pr├⌐visualiser'}\n                </Button>\n                \n                <Button \n                  className=\"w-full\"\n                  onClick={handleSubmit}\n                  disabled={isSubmitting || !formData.title || !formData.excerpt || !formData.content || !formData.category}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                      Publication...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Publier l'Article\n                    </>\n                  )}\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Preview Modal */}\n        {showPreview && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n            >\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold text-gray-900\">\n                    Aper├ºu de l'Article\n                  </h3>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => setShowPreview(false)}>\n                    Fermer\n                  </Button>\n                </div>\n\n                {/* Article Preview */}\n                <article className=\"prose prose-lg max-w-none\">\n                  {formData.image && (\n                    <img\n                      src={formData.image}\n                      alt={formData.title}\n                      className=\"w-full h-64 object-cover rounded-lg mb-6\"\n                    />\n                  )}\n                  \n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-4\">\n                    <Badge variant=\"info\" size=\"sm\">\n                      {formData.category}\n                    </Badge>\n                    <span>{new Date().toLocaleDateString('fr-FR')}</span>\n                    <span>{formData.readTime} min de lecture</span>\n                    <span>Par {formData.author}</span>\n                  </div>\n                  \n                  <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                    {formData.title}\n                  </h1>\n                  \n                  <p className=\"text-xl text-gray-600 mb-6 italic\">\n                    {formData.excerpt}\n                  </p>\n                  \n                  <div className=\"text-gray-800 whitespace-pre-wrap\">\n                    {formData.content}\n                  </div>\n                  \n                  {formData.tags.length > 0 && (\n                    <div className=\"mt-6 pt-4 border-t border-gray-200\">\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Mots-cl├⌐s :</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {formData.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"info\" size=\"sm\">\n                            #{tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </article>\n              </div>\n            </motion.div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\admin\\PartnerCreationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5089,5092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5089,5092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":541,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20010,20013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20010,20013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  Crown,\n  User,\n  Mail,\n  Phone,\n  Globe,\n  MapPin,\n  CheckCircle,\n  Loader,\n  Building2,\n  DollarSign\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n// Badge not used in this form\nimport { SupabaseService } from '../../services/supabaseService';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\n\ninterface NewPartnerForm {\n  // Informations organisation\n  organizationName: string;\n  partnerType: 'institutional' | 'platinum' | 'gold' | 'silver' | 'bronze';\n  sector: string;\n  country: string;\n  website: string;\n  description: string;\n  \n  // Contact principal\n  contactName: string;\n  email: string;\n  phone: string;\n  position: string;\n  \n  // Informations partenariat\n  sponsorshipLevel: string;\n  contractValue: string;\n  contributions: string[];\n  establishedYear: number;\n  employees: string;\n}\n\nexport const PartnerCreationForm: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { user } = useAuthStore();\n  const navigate = useNavigate();\n  \n  const [formData, setFormData] = useState<NewPartnerForm>({\n    organizationName: '',\n    partnerType: 'silver',\n    sector: '',\n    country: '',\n    website: '',\n    description: '',\n    contactName: '',\n    email: '',\n    phone: '',\n    position: '',\n    sponsorshipLevel: '',\n    contractValue: '',\n    contributions: [],\n    establishedYear: new Date().getFullYear(),\n    employees: ''\n  });\n\n  const steps = [\n    { id: 1, title: 'Organisation', description: 'Informations g├⌐n├⌐rales' },\n    { id: 2, title: 'Contact', description: 'Personne responsable' },\n    { id: 3, title: 'Partenariat', description: 'Type et contributions' },\n    { id: 4, title: 'Validation', description: 'V├⌐rification finale' }\n  ];\n\n  const partnerTypes = [\n    {\n      type: 'institutional',\n      name: 'Institutionnel',\n      description: 'Organisateur ou institution gouvernementale',\n      price: 'Sur mesure',\n      color: 'bg-purple-100 text-purple-600'\n    },\n    {\n      type: 'platinum',\n      name: 'Partenaire Platine',\n      description: 'Partenaire strat├⌐gique majeur',\n      price: '150,000Γé¼+',\n      color: 'bg-gray-100 text-gray-800'\n    },\n    {\n      type: 'gold',\n      name: 'Partenaire Or',\n      description: 'Partenaire premium avec visibilit├⌐ ├⌐lev├⌐e',\n      price: '75,000Γé¼+',\n      color: 'bg-yellow-100 text-yellow-600'\n    },\n    {\n      type: 'silver',\n      name: 'Partenaire Argent',\n      description: 'Partenaire officiel avec avantages',\n      price: '35,000Γé¼+',\n      color: 'bg-gray-100 text-gray-600'\n    },\n    {\n      type: 'bronze',\n      name: 'Partenaire Bronze',\n      description: 'Partenaire associ├⌐',\n      price: '15,000Γé¼+',\n      color: 'bg-orange-100 text-orange-600'\n    }\n  ];\n\n  const sectors = [\n    'Autorit├⌐ Portuaire',\n    'Transport Maritime',\n    '├ëquipements Portuaires',\n    'Logistique',\n    'Consulting Maritime',\n    'Technologies Maritimes',\n    'Formation & ├ëducation',\n    'Gouvernement',\n    'Association Professionnelle',\n    'M├⌐dia Sp├⌐cialis├⌐'\n  ];\n\n  const availableContributions = [\n    'Financement principal',\n    'Expertise technique',\n    'R├⌐seau international',\n    'Conf├⌐rences techniques',\n    'Networking premium',\n    'Innovation showcase',\n    'Formation professionnelle',\n    'Recherche appliqu├⌐e',\n    'M├⌐diatisation',\n    'Support logistique'\n  ];\n\n  const handleNextStep = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      if (!user) {\n        throw new Error('Utilisateur non connect├⌐');\n      }\n\n      // 1. Cr├⌐er l'utilisateur pour le partenaire\n      const userData = {\n        email: formData.email,\n        name: formData.contactName,\n        type: 'partner' as const,\n        profile: {\n          firstName: formData.contactName.split(' ')[0] || '',\n          lastName: formData.contactName.split(' ').slice(1).join(' ') || '',\n          company: formData.organizationName,\n          position: formData.position,\n          phone: formData.phone,\n          country: formData.country,\n          website: formData.website,\n          bio: formData.description,\n          interests: [],\n          objectives: [],\n          // Informations sp├⌐cifiques au partenaire\n          partnerType: formData.partnerType,\n          sponsorshipLevel: formData.sponsorshipLevel,\n          contractValue: formData.contractValue,\n          contributions: formData.contributions,\n          establishedYear: formData.establishedYear,\n          employees: formData.employees\n        }\n      };\n\n  // Cast userData to avoid strict UserProfile requirements in TS types\n  await SupabaseService.createUser(userData as any);\n  toast.success(`Partenaire cr├⌐├⌐ : ${formData.organizationName} (${formData.contactName})`);\n      \n      // Reset form et redirection\n      setFormData({\n        organizationName: '',\n        partnerType: 'silver',\n        sector: '',\n        country: '',\n        website: '',\n        description: '',\n        contactName: '',\n        email: '',\n        phone: '',\n        position: '',\n        sponsorshipLevel: '',\n        contractValue: '',\n        contributions: [],\n        establishedYear: new Date().getFullYear(),\n        employees: ''\n      });\n      \n      setCurrentStep(1);\n      setIsSubmitting(false);\n      \n      // Rediriger vers la liste des partenaires\n      navigate('/partners');\n      \n    } catch (error) {\n      console.error('Erreur cr├⌐ation partenaire:', error);\n      setIsSubmitting(false);\n  // Afficher erreur via toast et console\n  toast.error(`Erreur cr├⌐ation partenaire : ${error instanceof Error ? error.message : 'Erreur inconnue'}`);\n  console.error('Erreur cr├⌐ation partenaire:', error);\n    }\n  };\n\n  const toggleContribution = (contribution: string) => {\n    setFormData(prev => ({\n      ...prev,\n      contributions: prev.contributions.includes(contribution)\n        ? prev.contributions.filter(c => c !== contribution)\n        : [...prev.contributions, contribution]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Cr├⌐er un Nouveau Partenaire\n            </h1>\n            <p className=\"text-gray-600\">\n              Enregistrer un nouveau partenaire officiel SIPORTS 2026\n            </p>\n          </motion.div>\n        </div>\n\n        {/* Progress Steps */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                  currentStep >= step.id \n                    ? 'bg-purple-600 text-white border-purple-600' \n                    : 'bg-white text-gray-400 border-gray-300'\n                }`}>\n                  {currentStep > step.id ? (\n                    <CheckCircle className=\"h-5 w-5\" />\n                  ) : (\n                    <span className=\"text-sm font-semibold\">{step.id}</span>\n                  )}\n                </div>\n                <div className=\"ml-3 hidden sm:block\">\n                  <p className={`text-sm font-medium ${\n                    currentStep >= step.id ? 'text-gray-900' : 'text-gray-500'\n                  }`}>\n                    {step.title}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{step.description}</p>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-4 ${\n                    currentStep > step.id ? 'bg-purple-600' : 'bg-gray-300'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Form Content */}\n        <Card className=\"p-8\">\n          {/* Step 1: Informations Organisation */}\n          {currentStep === 1 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Informations sur l'organisation\n                </h2>\n                <p className=\"text-gray-600\">\n                  Renseignez les informations g├⌐n├⌐rales du partenaire\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nom de l'organisation *\n                  </label>\n                  <div className=\"relative\">\n                    <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.organizationName}\n                      onChange={(e) => setFormData({ ...formData, organizationName: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"Nom de l'organisation partenaire\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Secteur d'activit├⌐ *\n                  </label>\n                  <select\n                    value={formData.sector}\n                    onChange={(e) => setFormData({ ...formData, sector: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                  >\n                    <option value=\"\">S├⌐lectionnez un secteur</option>\n                    {sectors.map((sector) => (\n                      <option key={sector} value={sector}>{sector}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Pays *\n                  </label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.country}\n                      onChange={(e) => setFormData({ ...formData, country: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"Pays de l'organisation\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Site web\n                  </label>\n                  <div className=\"relative\">\n                    <Globe className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"url\"\n                      value={formData.website}\n                      onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"https://organisation.com\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Ann├⌐e de cr├⌐ation\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"1800\"\n                    max={new Date().getFullYear()}\n                    value={formData.establishedYear}\n                    onChange={(e) => setFormData({ ...formData, establishedYear: parseInt(e.target.value) })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nombre d'employ├⌐s\n                  </label>\n                  <select\n                    value={formData.employees}\n                    onChange={(e) => setFormData({ ...formData, employees: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                  >\n                    <option value=\"\">S├⌐lectionnez une taille</option>\n                    <option value=\"1-10\">1-10 employ├⌐s</option>\n                    <option value=\"11-50\">11-50 employ├⌐s</option>\n                    <option value=\"51-200\">51-200 employ├⌐s</option>\n                    <option value=\"201-1000\">201-1000 employ├⌐s</option>\n                    <option value=\"1000+\">1000+ employ├⌐s</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Description de l'organisation *\n                </label>\n                <textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={4}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                  placeholder=\"D├⌐crivez l'activit├⌐ principale de l'organisation, son expertise et sa mission...\"\n                />\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 2: Contact Principal */}\n          {currentStep === 2 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Contact principal\n                </h2>\n                <p className=\"text-gray-600\">\n                  Personne responsable du partenariat\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nom complet *\n                  </label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.contactName}\n                      onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"Pr├⌐nom et nom du contact\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Poste/Fonction *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.position}\n                    onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                    placeholder=\"Directeur Partenariats, CEO, etc.\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email professionnel *\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"contact@organisation.com\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    T├⌐l├⌐phone *\n                  </label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"+33 1 23 45 67 89\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 3: Informations Partenariat */}\n          {currentStep === 3 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Type de partenariat\n                </h2>\n                <p className=\"text-gray-600\">\n                  Choisissez le niveau de partenariat adapt├⌐\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {partnerTypes.map((type) => (\n                  <div\n                    key={type.type}\n                    className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                      formData.partnerType === type.type\n                        ? 'border-purple-500 bg-purple-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => {\n                      setFormData({ \n                        ...formData, \n                        partnerType: type.type as any,\n                        sponsorshipLevel: type.name,\n                        contractValue: type.price\n                      });\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <Crown className=\"h-6 w-6 mx-auto mb-2 text-purple-600\" />\n                      <h3 className=\"font-bold text-gray-900\">{type.name}</h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">{type.description}</p>\n                      <p className=\"text-sm font-semibold text-purple-600\">{type.price}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Valeur du contrat\n                  </label>\n                  <div className=\"relative\">\n                    <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={formData.contractValue}\n                      onChange={(e) => setFormData({ ...formData, contractValue: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                      placeholder=\"Montant du partenariat\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Contributions au salon *\n                </label>\n                <p className=\"text-sm text-gray-500 mb-3\">\n                  S├⌐lectionnez les contributions que ce partenaire apportera\n                </p>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {availableContributions.map((contribution) => (\n                    <label key={contribution} className=\"flex items-center space-x-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.contributions.includes(contribution)}\n                        onChange={() => toggleContribution(contribution)}\n                        className=\"h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\"\n                      />\n                      <span className=\"text-sm text-gray-700\">{contribution}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Step 4: Validation */}\n          {currentStep === 4 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Validation du partenariat\n                </h2>\n                <p className=\"text-gray-600\">\n                  V├⌐rifiez les informations avant cr├⌐ation\n                </p>\n              </div>\n\n              {/* R├⌐capitulatif */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Organisation</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Nom :</strong> {formData.organizationName}</div>\n                    <div><strong>Secteur :</strong> {formData.sector}</div>\n                    <div><strong>Pays :</strong> {formData.country}</div>\n                    <div><strong>Site web :</strong> {formData.website}</div>\n                    <div><strong>Fond├⌐e en :</strong> {formData.establishedYear}</div>\n                    <div><strong>Employ├⌐s :</strong> {formData.employees}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Contact</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Nom :</strong> {formData.contactName}</div>\n                    <div><strong>Poste :</strong> {formData.position}</div>\n                    <div><strong>Email :</strong> {formData.email}</div>\n                    <div><strong>T├⌐l├⌐phone :</strong> {formData.phone}</div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-4 md:col-span-2\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Partenariat</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <div><strong>Type :</strong> {partnerTypes.find(p => p.type === formData.partnerType)?.name}</div>\n                      <div><strong>Valeur :</strong> {formData.contractValue}</div>\n                    </div>\n                    <div>\n                      <div><strong>Contributions :</strong></div>\n                      <ul className=\"mt-1 space-y-1\">\n                        {formData.contributions.map((contrib, idx) => (\n                          <li key={idx} className=\"text-gray-600\">ΓÇó {contrib}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              <div className=\"bg-purple-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-purple-900 mb-2\">Activation du partenariat</h4>\n                <p className=\"text-sm text-purple-700\">\n                  Le partenaire recevra un email avec ses identifiants de connexion et l'acc├¿s \n                  ├á son espace partenaire sera activ├⌐ imm├⌐diatement.\n                </p>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between pt-8 border-t border-gray-200\">\n            <div>\n              {currentStep > 1 && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handlePrevStep}\n                >\n                  Pr├⌐c├⌐dent\n                </Button>\n              )}\n            </div>\n\n            <div>\n              {currentStep < 4 ? (\n                <Button\n                  onClick={handleNextStep}\n                  disabled={\n                    (currentStep === 1 && (!formData.organizationName || !formData.sector || !formData.country || !formData.description)) ||\n                    (currentStep === 2 && (!formData.contactName || !formData.email || !formData.phone || !formData.position)) ||\n                    (currentStep === 3 && formData.contributions.length === 0)\n                  }\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  Suivant\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                      Cr├⌐ation en cours...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Cr├⌐er le Partenaire\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\appointments\\AppointmentCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":177,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_exhibitorData' is defined but never used.","line":206,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6270,6273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6270,6273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":246,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":255,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":255,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":264,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":274,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":508,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19091,19094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19091,19094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":679,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":679,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26772,26775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26772,26775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { \n  Calendar, \n  Clock, \n  MapPin, \n  Video, \n  Users, \n  Plus,\n  Check,\n  X,\n  ArrowLeft\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useAppointmentStore } from '../../store/appointmentStore';\nimport { motion } from 'framer-motion';\n\nexport const AppointmentCalendar: React.FC = () => {\n  const {\n    appointments,\n    timeSlots,\n    isLoading,\n    fetchAppointments,\n    fetchTimeSlots,\n    bookAppointment,\n    cancelAppointment,\n    updateAppointmentStatus,\n    createTimeSlot\n  } = useAppointmentStore();\n\n  const [searchParams] = useSearchParams();\n  const location = useLocation();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showBookingModal, setShowBookingModal] = useState(false);\n  const [showCreateSlotModal, setShowCreateSlotModal] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<string | null>(null);\n  const [bookingMessage, setBookingMessage] = useState('');\n  const [newSlotData, setNewSlotData] = useState({\n    date: new Date().toISOString().split('T')[0],\n    startTime: '09:00',\n    endTime: '09:30',\n    duration: 30,\n    type: 'in-person' as 'in-person' | 'virtual' | 'hybrid',\n    maxBookings: 1,\n    location: ''\n  });\n  \n  // R├⌐cup├⌐rer l'ID de l'exposant depuis l'URL ou les param├¿tres\n  const exhibitorId = searchParams.get('exhibitor') || \n                     location.pathname.split('/').pop() || \n                     '1'; // Fallback\n\n  useEffect(() => {\n    fetchAppointments();\n    fetchTimeSlots(exhibitorId);\n  }, [fetchAppointments, fetchTimeSlots, exhibitorId]);\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  const formatTime = (time: string) => {\n    return time;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'success';\n      case 'pending': return 'warning';\n      case 'cancelled': return 'error';\n      case 'completed': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'Confirm├⌐';\n      case 'pending': return 'En attente';\n      case 'cancelled': return 'Annul├⌐';\n      case 'completed': return 'Termin├⌐';\n      default: return status;\n    }\n  };\n\n  const getMeetingTypeIcon = (type: string) => {\n    switch (type) {\n      case 'virtual': return Video;\n      case 'in-person': return MapPin;\n      case 'hybrid': return Users;\n      default: return Calendar;\n    }\n  };\n\n  // removed simple handleBookSlot in favor of improved version below\n\n  const handleCreateSlot = async () => {\n    // Validation des donn├⌐es\n    if (!newSlotData.date || !newSlotData.startTime || !newSlotData.endTime) {\n      toast.error('Veuillez remplir tous les champs obligatoires');\n      return;\n    }\n\n    // V├⌐rifier que l'heure de fin est apr├¿s l'heure de d├⌐but\n    if (newSlotData.startTime >= newSlotData.endTime) {\n      toast.error('L\\'heure de fin doit ├¬tre apr├¿s l\\'heure de d├⌐but');\n      return;\n    }\n\n    // V├⌐rifier les conflits avec les cr├⌐neaux existants\n    const conflictingSlot = timeSlots.find(slot => {\n      const slotDate = new Date(slot.date).toDateString();\n      const newDate = new Date(newSlotData.date).toDateString();\n      \n      if (slotDate !== newDate) return false;\n      \n      // V├⌐rifier les chevauchements d'horaires\n      const existingStart = slot.startTime;\n      const existingEnd = slot.endTime;\n      const newStart = newSlotData.startTime;\n      const newEnd = newSlotData.endTime;\n      \n      return (newStart < existingEnd && newEnd > existingStart);\n    });\n    \n    if (conflictingSlot) {\n      toast.error(`Conflit d'horaire d├⌐tect├⌐: ${conflictingSlot.startTime} - ${conflictingSlot.endTime}`);\n      return;\n    }\n    const slotData = {\n      date: new Date(newSlotData.date),\n      startTime: newSlotData.startTime,\n      endTime: newSlotData.endTime,\n      duration: newSlotData.duration,\n      type: newSlotData.type,\n      maxBookings: newSlotData.maxBookings,\n      currentBookings: 0,\n      available: true,\n      location: newSlotData.location || undefined\n    };\n    \n    try {\n      await createTimeSlot(slotData);\n      \n      // Mise ├á jour du mini-site exposant\n      await updateExhibitorAvailability();\n      \n      // Notification de succ├¿s enrichie\n  // success metadata (intentionnellement non utilis├⌐)\n  toast.success('Cr├⌐neau cr├⌐├⌐ et synchronis├⌐ !');\n      \n      setShowCreateSlotModal(false);\n      setNewSlotData({\n        date: new Date().toISOString().split('T')[0],\n        startTime: '09:00',\n        endTime: '09:30',\n        duration: 30,\n        type: 'in-person',\n        maxBookings: 1,\n        location: ''\n      });\n      \n      // Recharger les cr├⌐neaux\n      fetchTimeSlots(exhibitorId);\n      \n      // Mettre ├á jour les statistiques\n      updateSlotStatistics();\n      \n    } catch (error) {\n      toast.error('Erreur lors de la cr├⌐ation du cr├⌐neau.');\n    }\n  };\n\n  // Fonction pour mettre ├á jour la disponibilit├⌐ de l'exposant\n  const updateExhibitorAvailability = async () => {\n    try {\n      // Simulation de mise ├á jour du mini-site\n      const exhibitorData = {\n        id: exhibitorId,\n        totalSlots: timeSlots.length + 1,\n        availableSlots: timeSlots.filter(s => s.available).length + 1,\n        nextAvailableDate: new Date(newSlotData.date).toLocaleDateString('fr-FR'),\n        lastUpdated: new Date().toISOString()\n      };\n      \n      // En production, ici on ferait un appel API pour mettre ├á jour le mini-site\n  toast.success('Mini-site exposant mis ├á jour.');\n      \n      // Notification aux visiteurs int├⌐ress├⌐s\n      await notifyInterestedVisitors(exhibitorData);\n      \n    } catch (error) {\n      console.error('Erreur mise ├á jour mini-site:', error);\n    }\n  };\n  \n  // Fonction pour notifier les visiteurs int├⌐ress├⌐s\n  const notifyInterestedVisitors = async (_exhibitorData: any) => {\n    try {\n      // Simulation de notification push\n  // notification payload simulated (non utilis├⌐)\n  toast.success('Notifications envoy├⌐es.');\n      \n    } catch (error) {\n      console.error('Erreur notifications:', error);\n    }\n  };\n  \n  // Fonction pour mettre ├á jour les statistiques\n  const updateSlotStatistics = () => {\n    const stats = {\n      totalSlots: timeSlots.length + 1,\n      availableSlots: timeSlots.filter(s => s.available).length + 1,\n      bookedSlots: timeSlots.filter(s => !s.available).length,\n      utilizationRate: Math.round((timeSlots.filter(s => !s.available).length / (timeSlots.length + 1)) * 100)\n    };\n    \n    console.log('Statistiques cr├⌐neaux mises ├á jour:', stats);\n  toast.success('Statistiques cr├⌐neaux mises ├á jour.');\n  };\n  const handleBookSlotImproved = async () => {\n    if (!selectedSlot) return;\n    \n    const slot = timeSlots.find(s => s.id === selectedSlot);\n    if (!slot) {\n      toast.error('Cr├⌐neau non trouv├⌐');\n      return;\n    }\n    \n    try {\n      await bookAppointment(selectedSlot, bookingMessage);\n      \n  toast.success('Rendez-vous r├⌐serv├⌐ !');\n      \n      setShowBookingModal(false);\n      setSelectedSlot(null);\n      setBookingMessage('');\n    } catch (error) {\n      toast.error('Erreur lors de la r├⌐servation.');\n    }\n  };\n\n  const handleConfirmAppointment = async (appointmentId: string) => {\n    try {\n      await updateAppointmentStatus(appointmentId, 'confirmed');\n      toast.success('Rendez-vous confirm├⌐ !');\n    } catch (error) {\n      toast.error('Erreur lors de la confirmation.');\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string) => {\n    try {\n      await cancelAppointment(appointmentId);\n      toast.success('Rendez-vous refus├⌐ et annul├⌐.');\n    } catch (error) {\n      toast.error('Erreur lors du refus.');\n    }\n  };\n\n  const handleCancelAppointment = async (appointmentId: string) => {\n    if (confirm('├ètes-vous s├╗r de vouloir annuler ce rendez-vous ?')) {\n      try {\n        await cancelAppointment(appointmentId);\n        toast.success('Rendez-vous annul├⌐ !');\n      } catch (error) {\n        toast.error('Erreur lors de l\\'annulation.');\n      }\n    }\n  };\n\n  const todaySlots = timeSlots.filter(slot => {\n    const slotDate = new Date(slot.date);\n    return slotDate.toDateString() === selectedDate.toDateString();\n  });\n\n  const todayAppointments = appointments.filter(appointment => {\n    const slot = timeSlots.find(s => s.id === appointment.timeSlotId);\n    if (!slot) return false;\n    const slotDate = new Date(slot.date);\n    return slotDate.toDateString() === selectedDate.toDateString();\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Bouton de retour */}\n        <div className=\"mb-6\">\n          <Link to=\"/dashboard\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Tableau de Bord\n            </Button>\n          </Link>\n        </div>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex-1 min-w-0 mr-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              Calendrier des Rendez-vous\n            </h2>\n            <p className=\"text-gray-600 mt-1\">\n              G├⌐rez vos cr├⌐neaux et rendez-vous - Exposant #{exhibitorId}\n            </p>\n          </div>\n          \n          <div className=\"flex-shrink-0\">\n            <Button onClick={() => setShowCreateSlotModal(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouveau Cr├⌐neau\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Calendar */}\n            <Card className=\"lg:col-span-1\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"font-semibold text-gray-900\">Calendrier</h3>\n              </div>\n              <div className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"text-center\">\n                    <h4 className=\"font-medium text-gray-900\">\n                      {formatDate(selectedDate)}\n                    </h4>\n                  </div>\n                  \n                  {/* Quick date navigation */}\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {[-1, 0, 1].map(offset => {\n                      const date = new Date();\n                      date.setDate(date.getDate() + offset);\n                      const isSelected = date.toDateString() === selectedDate.toDateString();\n                      \n                      return (\n                        <button\n                          key={offset}\n                          onClick={() => setSelectedDate(date)}\n                          className={`p-2 text-sm rounded-lg transition-colors ${\n                            isSelected \n                              ? 'bg-blue-100 text-blue-700 font-medium' \n                              : 'hover:bg-gray-100'\n                          }`}\n                        >\n                          {offset === -1 ? 'Hier' : offset === 0 ? 'Aujourd\\'hui' : 'Demain'}\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Time Slots */}\n            <Card className=\"lg:col-span-2\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"font-semibold text-gray-900\">\n                  Cr├⌐neaux disponibles - {formatDate(selectedDate)}\n                </h3>\n              </div>\n              <div className=\"p-4\">\n                {isLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-16 bg-gray-200 rounded-lg\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : todaySlots.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Aucun cr├⌐neau disponible pour cette date</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {todaySlots.map((slot) => {\n                      const MeetingIcon = getMeetingTypeIcon(slot.type);\n                      const isBooked = slot.currentBookings >= slot.maxBookings;\n                      \n                      return (\n                        <motion.div\n                          key={slot.id}\n                          whileHover={{ scale: 1.02 }}\n                          className={`p-4 border rounded-lg transition-colors ${\n                            isBooked \n                              ? 'border-gray-200 bg-gray-50' \n                              : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50 cursor-pointer'\n                          }`}\n                          onClick={() => {\n                            if (!isBooked) {\n                              setSelectedSlot(slot.id);\n                              setShowBookingModal(true);\n                            }\n                          }}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`p-2 rounded-lg ${\n                                isBooked ? 'bg-gray-200' : 'bg-blue-100'\n                              }`}>\n                                <MeetingIcon className={`h-4 w-4 ${\n                                  isBooked ? 'text-gray-500' : 'text-blue-600'\n                                }`} />\n                              </div>\n                              \n                              <div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"font-medium text-gray-900\">\n                                    {formatTime(slot.startTime)} - {formatTime(slot.endTime)}\n                                  </span>\n                                  <Badge \n                                    variant={slot.type === 'virtual' ? 'info' : slot.type === 'hybrid' ? 'warning' : 'default'}\n                                    size=\"sm\"\n                                  >\n                                    {slot.type === 'virtual' ? 'Virtuel' : \n                                     slot.type === 'hybrid' ? 'Hybride' : 'Pr├⌐sentiel'}\n                                  </Badge>\n                                </div>\n                                \n                                <div className=\"flex items-center space-x-4 text-sm text-gray-600 mt-1\">\n                                  <span className=\"flex items-center space-x-1\">\n                                    <Clock className=\"h-3 w-3\" />\n                                    <span>{slot.duration} min</span>\n                                  </span>\n                                  \n                                  {slot.location && (\n                                    <span className=\"flex items-center space-x-1\">\n                                      <MapPin className=\"h-3 w-3\" />\n                                      <span>{slot.location}</span>\n                                    </span>\n                                  )}\n                                  \n                                  <span className=\"flex items-center space-x-1\">\n                                    <Users className=\"h-3 w-3\" />\n                                    <span>{slot.currentBookings}/{slot.maxBookings}</span>\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2\">\n                              {isBooked ? (\n                                <Badge variant=\"error\" size=\"sm\">Complet</Badge>\n                              ) : (\n                                <Badge variant=\"success\" size=\"sm\">Disponible</Badge>\n                              )}\n                            </div>\n                          </div>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n\n          {/* Appointments List */}\n          <Card>\n            <div className=\"p-4 border-b border-gray-200\">\n              <h3 className=\"font-semibold text-gray-900\">Mes Rendez-vous</h3>\n            </div>\n            <div className=\"p-4\">\n              {todayAppointments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Aucun rendez-vous pr├⌐vu pour cette date</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {todayAppointments.map((appointment) => {\n                    const slot = timeSlots.find(s => s.id === appointment.timeSlotId);\n                    if (!slot) return null;\n                    \n                    const MeetingIcon = getMeetingTypeIcon(appointment.meetingType);\n                    \n                    return (\n                      <motion.div\n                        key={appointment.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className=\"p-4 border border-gray-200 rounded-lg\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"p-2 bg-blue-100 rounded-lg\">\n                              <MeetingIcon className=\"h-4 w-4 text-blue-600\" />\n                            </div>\n                            \n                            <div>\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"font-medium text-gray-900\">\n                                  {formatTime(slot.startTime)} - {formatTime(slot.endTime)}\n                                </span>\n                                <Badge \n                                  variant={getStatusColor(appointment.status) as any}\n                                  size=\"sm\"\n                                >\n                                  {getStatusLabel(appointment.status)}\n                                </Badge>\n                              </div>\n                              \n                              {appointment.message && (\n                                <p className=\"text-sm text-gray-600 mt-1\">\n                                  {appointment.message}\n                                </p>\n                              )}\n                              \n                              {appointment.meetingLink && (\n                                <a \n                                  href={appointment.meetingLink}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-sm text-blue-600 hover:underline mt-1 inline-block\"\n                                >\n                                  Rejoindre la r├⌐union\n                                </a>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            {appointment.status === 'pending' && (\n                              <>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleConfirmAppointment(appointment.id)}\n                                >\n                                  <Check className=\"h-3 w-3 mr-1\" />\n                                  Confirmer\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleRejectAppointment(appointment.id)}\n                                >\n                                  <X className=\"h-3 w-3 mr-1\" />\n                                  Refuser\n                                </Button>\n                              </>\n                            )}\n                            \n                            {appointment.status === 'confirmed' && (\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => handleCancelAppointment(appointment.id)}\n                              >\n                                <X className=\"h-3 w-3 mr-1\" />\n                                Annuler\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </Card>\n\n          {/* Booking Modal */}\n          {showBookingModal && (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n              <motion.div\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\"\n              >\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  R├⌐server un rendez-vous\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Message (optionnel)\n                    </label>\n                    <textarea\n                      value={bookingMessage}\n                      onChange={(e) => setBookingMessage(e.target.value)}\n                      placeholder=\"D├⌐crivez bri├¿vement l'objet de votre rendez-vous...\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      rows={3}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end space-x-3 mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setShowBookingModal(false);\n                      setSelectedSlot(null);\n                      setBookingMessage('');\n                    }}\n                  >\n                    Annuler\n                  </Button>\n                  <Button onClick={handleBookSlotImproved}>\n                    R├⌐server\n                  </Button>\n                </div>\n              </motion.div>\n            </div>\n          )}\n\n          {/* Create Slot Modal */}\n          {showCreateSlotModal && (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n              <motion.div\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\"\n              >\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Cr├⌐er un nouveau cr├⌐neau\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={newSlotData.date}\n                      onChange={(e) => setNewSlotData({...newSlotData, date: e.target.value})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Heure d├⌐but\n                      </label>\n                      <input\n                        type=\"time\"\n                        value={newSlotData.startTime}\n                        onChange={(e) => setNewSlotData({...newSlotData, startTime: e.target.value})}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Heure fin\n                      </label>\n                      <input\n                        type=\"time\"\n                        value={newSlotData.endTime}\n                        onChange={(e) => setNewSlotData({...newSlotData, endTime: e.target.value})}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Type de rendez-vous\n                    </label>\n                    <select\n                      value={newSlotData.type}\n                      onChange={(e) => setNewSlotData({...newSlotData, type: e.target.value as any})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"in-person\">Pr├⌐sentiel</option>\n                      <option value=\"virtual\">Virtuel</option>\n                      <option value=\"hybrid\">Hybride</option>\n                    </select>\n                    <div className=\"mt-2 text-xs text-gray-500\">\n                      <p><strong>Pr├⌐sentiel:</strong> Rencontre sur votre stand</p>\n                      <p><strong>Virtuel:</strong> Visioconf├⌐rence en ligne</p>\n                      <p><strong>Hybride:</strong> Stand + diffusion en ligne</p>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Lieu (optionnel)\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newSlotData.location}\n                      onChange={(e) => setNewSlotData({...newSlotData, location: e.target.value})}\n                      placeholder={\n                        newSlotData.type === 'virtual' ? 'Lien de visioconf├⌐rence' :\n                        newSlotData.type === 'hybrid' ? 'Stand A-12 + Lien visio' :\n                        'Stand A-12, Salle de r├⌐union B-5'\n                      }\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    {newSlotData.type === 'virtual' && (\n                      <p className=\"mt-1 text-xs text-blue-600\">\n                        ≡ƒÆí Le lien de visioconf├⌐rence sera g├⌐n├⌐r├⌐ automatiquement si laiss├⌐ vide\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Nombre max de r├⌐servations\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"10\"\n                      value={newSlotData.maxBookings}\n                      onChange={(e) => setNewSlotData({...newSlotData, maxBookings: parseInt(e.target.value)})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <p className=\"mt-1 text-xs text-gray-500\">\n                      Recommand├⌐: 1 pour les RDV individuels, 2-5 pour les pr├⌐sentations de groupe\n                    </p>\n                  </div>\n                  \n                  {/* Aper├ºu du Cr├⌐neau */}\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Aper├ºu du cr├⌐neau</h4>\n                    <div className=\"text-sm text-blue-800 space-y-1\">\n                      <p><strong>Date:</strong> {new Date(newSlotData.date).toLocaleDateString('fr-FR')}</p>\n                      <p><strong>Horaire:</strong> {newSlotData.startTime} - {newSlotData.endTime}</p>\n                      <p><strong>Dur├⌐e:</strong> {newSlotData.duration} minutes</p>\n                      <p><strong>Type:</strong> {\n                        newSlotData.type === 'in-person' ? 'Pr├⌐sentiel' :\n                        newSlotData.type === 'virtual' ? 'Virtuel' : 'Hybride'\n                      }</p>\n                      <p><strong>Capacit├⌐:</strong> {newSlotData.maxBookings} personne(s)</p>\n                      {newSlotData.location && (\n                        <p><strong>Lieu:</strong> {newSlotData.location}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end space-x-3 mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setShowCreateSlotModal(false);\n                      setNewSlotData({\n                        date: new Date().toISOString().split('T')[0],\n                        startTime: '09:00',\n                        endTime: '09:30',\n                        duration: 30,\n                        type: 'in-person',\n                        maxBookings: 1,\n                        location: ''\n                      });\n                    }}\n                  >\n                    Annuler\n                  </Button>\n                  <Button onClick={handleCreateSlot}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Cr├⌐er le cr├⌐neau\n                  </Button>\n                </div>\n              </motion.div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\auth\\AuthProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, ReactNode } from 'react';\nimport useAuthStore from '../../store/authStore';\n\ninterface AuthContextType {\n  isInitialized: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  isInitialized: false\n});\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isInitialized, setIsInitialized] = React.useState(false);\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    // Marquer comme initialis├⌐ apr├¿s le premier rendu\n    setIsInitialized(true);\n  }, []);\n\n  const value = {\n    isInitialized\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\auth\\GoogleAuthButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1081,1084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1081,1084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Loader } from 'lucide-react';\nimport { Button } from '../ui/Button';\nimport useAuthStore from '../../store/authStore';\nimport { useNavigate } from 'react-router-dom';\n\ninterface GoogleAuthButtonProps {\n  variant?: 'primary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  onSuccess?: () => void;\n  onError?: (error: string) => void;\n}\n\nexport const GoogleAuthButton: React.FC<GoogleAuthButtonProps> = ({\n  variant = 'outline',\n  size = 'md',\n  className = '',\n  onSuccess,\n  onError\n}) => {\n  const { loginWithGoogle, isGoogleLoading } = useAuthStore();\n  const navigate = useNavigate();\n\n  const handleGoogleLogin = async () => {\n    try {\n      // V├⌐rifier si Firebase est configur├⌐\n      if (!import.meta.env.VITE_FIREBASE_API_KEY) {\n        throw new Error('L\\'authentification Google n\\'est pas configur├⌐e. Utilisez l\\'authentification par email.');\n      }\n      \n      await loginWithGoogle();\n      \n      if (onSuccess) {\n        onSuccess();\n      } else {\n        navigate('/dashboard');\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || 'Erreur lors de la connexion Google';\n      \n      if (onError) {\n        onError(errorMessage);\n      } else {\n        alert(`Γ¥î ${errorMessage}`);\n      }\n    }\n  };\n\n  return (\n    <Button\n      variant={variant}\n      size={size}\n      className={`w-full ${className}`}\n      onClick={handleGoogleLogin}\n      disabled={isGoogleLoading}\n    >\n      {isGoogleLoading ? (\n        <>\n          <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n          Connexion en cours...\n        </>\n      ) : (\n        <>\n          <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n            <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n            <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n            <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n            <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n          </svg>\n          Continuer avec Google\n        </>\n      )}\n    </Button>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\auth\\LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GoogleAuthService' is defined but never used.","line":15,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { \n  Mail, \n  Lock, \n  Eye, \n  EyeOff, \n  Anchor,\n  AlertCircle,\n  Loader\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport useAuthStore from '../../store/authStore';\nimport GoogleAuthService from '../../services/googleAuth';\nimport { motion } from 'framer-motion';\n\nexport const LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const { login, loginWithGoogle, isLoading, isGoogleLoading } = useAuthStore();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (!email || !password) {\n      setError('Veuillez remplir tous les champs');\n      return;\n    }\n\n    try {\n      await login(email, password);\n      navigate('/dashboard');\n    } catch (err) {\n      setError('Email ou mot de passe incorrect');\n    }\n  };\n\n  const handleGoogleLogin = async () => {\n    setError('');\n    \n    // V├⌐rifier si Firebase est configur├⌐\n    if (!import.meta.env.VITE_FIREBASE_API_KEY) {\n      setError('L\\'authentification Google n\\'est pas configur├⌐e. Utilisez votre email et mot de passe.');\n      return;\n    }\n    \n    try {\n      await loginWithGoogle();\n      navigate('/dashboard');\n    } catch (err: any) {\n      setError(err.message || 'Erreur lors de la connexion Google');\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"max-w-md w-full\"\n      >\n        <Card className=\"p-8\">\n          {/* Logo and Title */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <div className=\"bg-blue-600 p-3 rounded-lg\">\n                <Anchor className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <span className=\"text-2xl font-bold text-gray-900\">SIPORTS</span>\n                <span className=\"text-sm text-gray-500 block leading-none\">2026</span>\n              </div>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Connexion\n            </h2>\n            <p className=\"text-gray-600\">\n              Acc├⌐dez ├á votre espace SIPORTS\n            </p>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center space-x-2\"\n            >\n              <AlertCircle className=\"h-5 w-5 text-red-500\" />\n              <span className=\"text-red-700 text-sm\">{error}</span>\n            </motion.div>\n          )}\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Adresse email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"votre@email.com\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Mot de passe\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"ΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇó\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"remember-me\"\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-700\">\n                  Se souvenir de moi\n                </label>\n              </div>\n\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-blue-600 hover:text-blue-500\"\n              >\n                Mot de passe oubli├⌐ ?\n              </Link>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                  Connexion...\n                </>\n              ) : (\n                'Se connecter'\n              )}\n            </Button>\n          </form>\n\n          {/* Quick Login Buttons */}\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-blue-900 mb-3\">\n              Connexion rapide - Comptes de d├⌐monstration :\n            </h4>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setEmail('admin@siports.com');\n                  setPassword('demo123');\n                }}\n                className=\"text-xs\"\n              >\n                ≡ƒææ Admin\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setEmail('exposant@siports.com');\n                  setPassword('demo123');\n                }}\n                className=\"text-xs\"\n              >\n                ≡ƒÅó Exposant\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setEmail('visiteur@siports.com');\n                  setPassword('demo123');\n                }}\n                className=\"text-xs\"\n              >\n                ≡ƒæÑ Visiteur\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setEmail('partenaire@siports.com');\n                  setPassword('demo123');\n                }}\n                className=\"text-xs\"\n              >\n                ≡ƒñ¥ Partenaire\n              </Button>\n            </div>\n          </div>\n\n          {/* Demo Credentials */}\n\n          {/* Sign Up Link */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Pas encore de compte ?{' '}\n              <Link\n                to=\"/register\"\n                className=\"font-medium text-blue-600 hover:text-blue-500\"\n              >\n                Cr├⌐er un compte\n              </Link>\n            </p>\n          </div>\n\n          {/* Social Login */}\n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white text-gray-500\">Ou continuer avec</span>\n              </div>\n            </div>\n\n            {import.meta.env.VITE_FIREBASE_API_KEY && (\n              <div className=\"mt-6 grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={handleGoogleLogin}\n                  disabled={isGoogleLoading}\n                >\n                  {isGoogleLoading ? (\n                    <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                  ) : (\n                    <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                  )}\n                  {isGoogleLoading ? 'Connexion...' : 'Google'}\n                </Button>\n\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    window.open('https://linkedin.com/oauth/v2/authorization?response_type=code&client_id=demo&redirect_uri=' + encodeURIComponent(window.location.origin + '/auth/linkedin/callback') + '&scope=r_liteprofile%20r_emailaddress', '_blank', 'width=500,height=600');\n                    alert('≡ƒöù Connexion LinkedIn\\n\\n≡ƒÜº Fonctionnalit├⌐ en d├⌐veloppement\\n≡ƒôº Utilisez votre email ou Google pour vous connecter\\n\\n≡ƒÆí LinkedIn sera disponible dans une prochaine version.');\n                  }}\n                >\n                  <svg className=\"h-4 w-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                  </svg>\n                  LinkedIn\n                </Button>\n              </div>\n            )}\n            \n            {!import.meta.env.VITE_FIREBASE_API_KEY && (\n              <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <p className=\"text-sm text-yellow-800\">\n                  ≡ƒÆí L'authentification Google n'est pas configur├⌐e. Utilisez votre email et mot de passe pour vous connecter.\n                </p>\n              </div>\n            )}\n          </div>\n        </Card>\n      </motion.div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\auth\\RegisterPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  User, \n  Mail, \n  Lock, \n  Building2, \n  Globe, \n  Phone, \n  MapPin,\n  Eye,\n  EyeOff,\n  Anchor,\n  AlertCircle,\n  Loader,\n  CheckCircle,\n  Upload\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { GoogleAuthButton } from './GoogleAuthButton';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\n\nconst registrationSchema = z.object({\n  accountType: z.enum(['exhibitor', 'partner', 'visitor']),\n  companyName: z.string().optional(),\n  sector: z.string().min(2, 'Secteur d\\'activit├⌐ requis'),\n  country: z.string().min(2, 'Pays requis'),\n  website: z.string().url('URL invalide').optional().or(z.literal('')),\n  firstName: z.string().min(2, 'Pr├⌐nom requis'),\n  lastName: z.string().min(2, 'Nom requis'),\n  position: z.string().optional(),\n  email: z.string().email('Email invalide'),\n  phone: z.string().min(8, 'Num├⌐ro de t├⌐l├⌐phone requis'),\n  linkedin: z.string().url('URL LinkedIn invalide').optional().or(z.literal('')),\n  description: z.string().min(50, 'Description trop courte (minimum 50 caract├¿res)'),\n  objectives: z.array(z.string()).min(1, 'S├⌐lectionnez au moins un objectif'),\n  password: z.string().min(8, 'Mot de passe trop court (minimum 8 caract├¿res)'),\n  confirmPassword: z.string()\n}).refine((data) => {\n  // Validation du mot de passe\n  if (data.password !== data.confirmPassword) {\n    return false;\n  }\n  \n  // Validation conditionnelle pour exposants et partenaires\n  if (data.accountType === 'exhibitor' || data.accountType === 'partner') {\n    if (!data.companyName || data.companyName.length < 2) {\n      return false;\n    }\n    if (!data.position || data.position.length < 2) {\n      return false;\n    }\n  }\n  \n  return true;\n}, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  if ((data.accountType === 'exhibitor' || data.accountType === 'partner') && (!data.companyName || data.companyName.length < 2)) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Nom de l'entreprise requis pour les exposants et partenaires\",\n  path: [\"companyName\"],\n}).refine((data) => {\n  if ((data.accountType === 'exhibitor' || data.accountType === 'partner') && (!data.position || data.position.length < 2)) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Poste requis pour les exposants et partenaires\",\n  path: [\"position\"],\n});\n\ntype RegistrationForm = z.infer<typeof registrationSchema>;\n\nexport const RegisterPage: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { register: registerUser, isLoading } = useAuthStore();\n  const navigate = useNavigate();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n    trigger\n  } = useForm<RegistrationForm>({\n    resolver: zodResolver(registrationSchema),\n    mode: 'onChange'\n  });\n\n  const watchedAccountType = watch('accountType');\n\n  const steps = [\n    { id: 1, title: 'Type de compte', description: 'Choisissez votre profil' },\n    { id: 2, title: 'Entreprise', description: 'Informations g├⌐n├⌐rales' },\n    { id: 3, title: 'Contact', description: 'Vos coordonn├⌐es' },\n    { id: 4, title: 'Profil', description: 'Description et objectifs' },\n    { id: 5, title: 'S├⌐curit├⌐', description: 'Mot de passe' }\n  ];\n\n  const accountTypes = [\n    {\n      value: 'exhibitor',\n      title: 'Exposant',\n      description: 'Entreprise ou organisation exposante',\n      icon: Building2,\n      color: 'bg-blue-100 text-blue-600 border-blue-200'\n    },\n    {\n      value: 'partner',\n      title: 'Partenaire',\n      description: 'Sponsor ou partenaire officiel',\n      icon: Globe,\n      color: 'bg-green-100 text-green-600 border-green-200'\n    },\n    {\n      value: 'visitor',\n      title: 'Visiteur',\n      description: 'Professionnel ou particulier visitant le salon',\n      icon: User,\n      color: 'bg-purple-100 text-purple-600 border-purple-200'\n    }\n  ];\n\n  const sectors = [\n    'Autorit├⌐ Portuaire',\n    'Op├⌐rateur de Terminal',\n    'Transport Maritime',\n    'Logistique',\n    '├ëquipements Portuaires',\n    'Services Maritimes',\n    'Consulting',\n    'Technologie',\n    'Formation',\n    'Institutionnel',\n    'Autre'\n  ];\n\n  const objectives = [\n    ...(watchedAccountType === 'visitor' ? [\n      'D├⌐couvrir les innovations portuaires',\n      'Assister aux conf├⌐rences',\n      'Rencontrer des professionnels',\n      'Apprendre sur le secteur maritime',\n      'Explorer les opportunit├⌐s de carri├¿re',\n      'D├⌐velopper mes connaissances',\n      'Identifier des solutions pour mon entreprise',\n      'Participer aux ├⌐v├⌐nements networking'\n    ] : [\n      'Trouver de nouveaux partenaires',\n      'D├⌐velopper mon r├⌐seau',\n      'Pr├⌐senter mes innovations',\n      'Identifier des fournisseurs',\n      'Explorer de nouveaux march├⌐s',\n      'Participer aux conf├⌐rences',\n      'Rencontrer des investisseurs',\n      '├ëchanger sur les bonnes pratiques'\n    ])\n  ];\n\n  const nextStep = async () => {\n    const fieldsToValidate = getFieldsForStep(currentStep);\n    const isValid = await trigger(fieldsToValidate);\n    \n    if (isValid && currentStep < 5) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const getFieldsForStep = (step: number): (keyof RegistrationForm)[] => {\n    switch (step) {\n      case 1: return ['accountType'];\n      case 2: return ['companyName', 'sector', 'country', 'website'];\n      case 3: return ['firstName', 'lastName', 'position', 'email', 'phone', 'linkedin'];\n      case 4: return ['description', 'objectives'];\n      case 5: return ['password', 'confirmPassword'];\n      default: return [];\n    }\n  };\n\n  const onSubmit = async (data: RegistrationForm) => {\n    try {\n      await registerUser(data);\n      navigate('/login', { \n        state: { message: 'Inscription r├⌐ussie ! Votre compte est en attente de validation.' }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"bg-white p-3 rounded-lg\">\n              <Anchor className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <div>\n              <span className=\"text-2xl font-bold text-white\">SIPORTS</span>\n              <span className=\"text-sm text-blue-200 block leading-none\">2026</span>\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            Cr├⌐er un compte\n          </h1>\n          <p className=\"text-blue-100\">\n            Rejoignez la plus grande communaut├⌐ portuaire mondiale\n          </p>\n        </motion.div>\n\n        {/* Progress Steps */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                  currentStep >= step.id \n                    ? 'bg-white text-blue-600 border-white' \n                    : 'bg-transparent text-white border-white/30'\n                }`}>\n                  {currentStep > step.id ? (\n                    <CheckCircle className=\"h-5 w-5\" />\n                  ) : (\n                    <span className=\"text-sm font-semibold\">{step.id}</span>\n                  )}\n                </div>\n                <div className=\"ml-3 hidden sm:block\">\n                  <p className={`text-sm font-medium ${\n                    currentStep >= step.id ? 'text-white' : 'text-white/60'\n                  }`}>\n                    {step.title}\n                  </p>\n                  <p className=\"text-xs text-white/60\">{step.description}</p>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-4 ${\n                    currentStep > step.id ? 'bg-white' : 'bg-white/30'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Form */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card className=\"p-8\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              {/* Step 1: Account Type */}\n              {currentStep === 1 && (\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Quel est votre profil ?\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      S├⌐lectionnez le type de compte qui correspond ├á votre organisation\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {accountTypes.map((type) => {\n                      const Icon = type.icon;\n                      return (\n                        <label key={type.value} className=\"cursor-pointer\">\n                          <input\n                            type=\"radio\"\n                            value={type.value}\n                            {...register('accountType')}\n                            className=\"sr-only\"\n                          />\n                          <div className={`p-6 border-2 rounded-lg transition-all ${\n                            watchedAccountType === type.value\n                              ? type.color\n                              : 'border-gray-200 hover:border-gray-300'\n                          }`}>\n                            <Icon className=\"h-8 w-8 mb-4\" />\n                            <h3 className=\"font-semibold text-lg mb-2\">{type.title}</h3>\n                            <p className=\"text-sm text-gray-600\">{type.description}</p>\n                          </div>\n                        </label>\n                      );\n                    })}\n                  </div>\n\n                  {errors.accountType && (\n                    <div className=\"flex items-center space-x-2 text-red-600\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">{errors.accountType.message}</span>\n                    </div>\n                  )}\n                </motion.div>\n              )}\n\n              {/* Step 2: Company Information */}\n              {currentStep === 2 && (\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Informations sur votre organisation\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      Pr├⌐sentez votre entreprise ou organisation\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Nom de l'organisation *\n                      </label>\n                      <div className=\"relative\">\n                        <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          {...register('companyName')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"Nom de votre entreprise\"\n                        />\n                      </div>\n                      {errors.companyName && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.companyName.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Secteur d'activit├⌐ *\n                      </label>\n                      <select\n                        {...register('sector')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"\">S├⌐lectionnez un secteur</option>\n                        {sectors.map((sector) => (\n                          <option key={sector} value={sector}>{sector}</option>\n                        ))}\n                      </select>\n                      {errors.sector && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.sector.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Pays *\n                      </label>\n                      <div className=\"relative\">\n                        <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          {...register('country')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"Pays de votre organisation\"\n                        />\n                      </div>\n                      {errors.country && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.country.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Site web\n                      </label>\n                      <div className=\"relative\">\n                        <Globe className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"url\"\n                          {...register('website')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"https://votre-site.com\"\n                        />\n                      </div>\n                      {errors.website && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.website.message}</p>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 3: Contact Information */}\n              {currentStep === 3 && (\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Vos coordonn├⌐es\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      Informations de contact du repr├⌐sentant principal\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Pr├⌐nom *\n                      </label>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          {...register('firstName')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"Votre pr├⌐nom\"\n                        />\n                      </div>\n                      {errors.firstName && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.firstName.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Nom *\n                      </label>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          {...register('lastName')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"Votre nom\"\n                        />\n                      </div>\n                      {errors.lastName && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.lastName.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Poste/Fonction *\n                      </label>\n                      <input\n                        type=\"text\"\n                        {...register('position')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"Votre fonction dans l'organisation\"\n                      />\n                      {errors.position && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.position.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Email professionnel *\n                      </label>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"email\"\n                          {...register('email')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"votre@email.com\"\n                        />\n                      </div>\n                      {errors.email && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.email.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        T├⌐l├⌐phone *\n                      </label>\n                      <div className=\"relative\">\n                        <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type=\"tel\"\n                          {...register('phone')}\n                          className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"+33 1 23 45 67 89\"\n                        />\n                      </div>\n                      {errors.phone && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.phone.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        LinkedIn\n                      </label>\n                      <input\n                        type=\"url\"\n                        {...register('linkedin')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"https://linkedin.com/in/votre-profil\"\n                      />\n                      {errors.linkedin && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.linkedin.message}</p>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 4: Profile & Objectives */}\n              {currentStep === 4 && (\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Votre profil professionnel\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      D├⌐crivez votre organisation et vos objectifs\n                    </p>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Description de votre organisation *\n                    </label>\n                    <textarea\n                      {...register('description')}\n                      rows={4}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"D├⌐crivez votre organisation, vos activit├⌐s principales, vos sp├⌐cialit├⌐s...\"\n                    />\n                    {errors.description && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.description.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Vos objectifs pour SIPORTS 2026 *\n                    </label>\n                    <p className=\"text-sm text-gray-500 mb-3\">\n                      S├⌐lectionnez tous les objectifs qui correspondent ├á vos attentes\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {objectives.map((objective) => (\n                        <label key={objective} className=\"flex items-center space-x-3 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            value={objective}\n                            {...register('objectives')}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                          />\n                          <span className=\"text-sm text-gray-700\">{objective}</span>\n                        </label>\n                      ))}\n                    </div>\n                    {errors.objectives && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.objectives.message}</p>\n                    )}\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 5: Security */}\n              {currentStep === 5 && (\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      S├⌐curit├⌐ de votre compte\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      Cr├⌐ez un mot de passe s├⌐curis├⌐ pour prot├⌐ger votre compte\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Mot de passe *\n                      </label>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type={showPassword ? 'text' : 'password'}\n                          {...register('password')}\n                          className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"ΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇó\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                        </button>\n                      </div>\n                      {errors.password && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.password.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Confirmer le mot de passe *\n                      </label>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                        <input\n                          type={showConfirmPassword ? 'text' : 'password'}\n                          {...register('confirmPassword')}\n                          className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          placeholder=\"ΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇóΓÇó\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                        </button>\n                      </div>\n                      {errors.confirmPassword && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.confirmPassword.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Validation de votre compte</h4>\n                    <p className=\"text-sm text-blue-700\">\n                      Apr├¿s votre inscription, votre compte sera examin├⌐ par notre ├⌐quipe. \n                      Vous recevrez un email de confirmation une fois votre compte valid├⌐.\n                    </p>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Navigation Buttons */}\n              <div className=\"flex justify-between pt-8 border-t border-gray-200\">\n                <div>\n                  {currentStep > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={prevStep}\n                    >\n                      Pr├⌐c├⌐dent\n                    </Button>\n                  )}\n                </div>\n\n                <div>\n                  {currentStep < 5 ? (\n                    <Button\n                      type=\"button\"\n                      onClick={nextStep}\n                    >\n                      Suivant\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? (\n                        <>\n                          <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                          Cr├⌐ation du compte...\n                        </>\n                      ) : (\n                        'Cr├⌐er mon compte'\n                      )}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </form>\n\n            {/* Login Link */}\n            <div className=\"mt-6 text-center pt-6 border-t border-gray-200\">\n              <p className=\"text-sm text-gray-600\">\n                Vous avez d├⌐j├á un compte ?{' '}\n                <Link\n                  to=\"/login\"\n                  className=\"font-medium text-blue-600 hover:text-blue-500\"\n                >\n                  Se connecter\n                </Link>\n              </p>\n            </div>\n\n            {/* Google Registration */}\n            {import.meta.env.VITE_FIREBASE_API_KEY && (\n              <div className=\"mt-6\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-gray-300\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-2 bg-white text-gray-500\">Ou s'inscrire avec</span>\n                  </div>\n                </div>\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500\">Ou s'inscrire avec</span>\n                </div>\n              </div>\n\n                <div className=\"mt-6\">\n                  <GoogleAuthButton \n                    onSuccess={() => navigate('/dashboard')}\n                    onError={(error) => alert(`Γ¥î ${error}`)}\n                  />\n                </div>\n              </div>\n            )}\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\chat\\ChatInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'chatBot' is assigned a value but never used.","line":28,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startConversation' is assigned a value but never used.","line":33,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showEmojiPicker' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowEmojiPicker' is assigned a value but never used.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":45}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  MessageCircle, \n  Send, \n  Paperclip, \n  Smile, \n  Phone, \n  Video,\n  MoreVertical,\n  Bot,\n  User,\n  Circle,\n  ArrowLeft\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useChatStore } from '../../store/chatStore';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport const ChatInterface: React.FC = () => {\n  const {\n    conversations,\n    activeConversation,\n    messages,\n    isLoading,\n    chatBot,\n    onlineUsers,\n    fetchConversations,\n    setActiveConversation,\n    sendMessage,\n    startConversation\n  } = useChatStore();\n\n  const [messageInput, setMessageInput] = useState('');\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    fetchConversations();\n  }, [fetchConversations]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, activeConversation]);\n\n  const handleSendMessage = async () => {\n    if (!messageInput.trim() || !activeConversation) return;\n    \n    await sendMessage(activeConversation, messageInput);\n    setMessageInput('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  const activeMessages = activeConversation ? messages[activeConversation] || [] : [];\n  const activeConv = conversations.find(c => c.id === activeConversation);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Bouton de retour */}\n        <div className=\"mb-6\">\n          <Link to=\"/dashboard\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Tableau de Bord\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div className=\"flex h-[600px] bg-white rounded-lg shadow-lg overflow-hidden\">\n            {/* Conversations List */}\n            <div className=\"w-1/3 border-r border-gray-200 flex flex-col\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Messages</h3>\n                <div className=\"relative\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Rechercher une conversation...\"\n                    className=\"w-full pl-3 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex-1 overflow-y-auto\">\n                {isLoading ? (\n                  <div className=\"p-4\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"animate-pulse mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"h-10 w-10 bg-gray-200 rounded-full\"></div>\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-gray-200 rounded mb-1\"></div>\n                            <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-1\">\n                    {conversations.map((conversation) => {\n                      const isBot = conversation.participants.includes('siports-bot');\n                      const otherParticipant = isBot ? 'Assistant SIPORTS' : 'Sarah Johnson';\n                      const isOnline = conversation.participants.some(p => onlineUsers.includes(p));\n                      \n                      return (\n                        <motion.div\n                          key={conversation.id}\n                          whileHover={{ backgroundColor: '#f9fafb' }}\n                          onClick={() => setActiveConversation(conversation.id)}\n                          className={`p-4 cursor-pointer border-b border-gray-100 ${\n                            activeConversation === conversation.id ? 'bg-blue-50 border-blue-200' : ''\n                          }`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"relative\">\n                              <div className=\"h-10 w-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                                {isBot ? (\n                                  <Bot className=\"h-5 w-5 text-blue-600\" />\n                                ) : (\n                                  <User className=\"h-5 w-5 text-gray-600\" />\n                                )}\n                              </div>\n                              {isOnline && (\n                                <Circle className=\"absolute -bottom-1 -right-1 h-3 w-3 text-green-500 fill-current\" />\n                              )}\n                            </div>\n                            \n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-sm font-medium text-gray-900 truncate\">\n                                  {otherParticipant}\n                                </p>\n                                {conversation.unreadCount > 0 && (\n                                  <Badge variant=\"info\" size=\"sm\">\n                                    {conversation.unreadCount}\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              {conversation.lastMessage && (\n                                <div className=\"flex items-center justify-between mt-1\">\n                                  <p className=\"text-sm text-gray-600 truncate\">\n                                    {conversation.lastMessage.content}\n                                  </p>\n                                  <span className=\"text-xs text-gray-400\">\n                                    {formatTime(conversation.lastMessage.timestamp)}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Chat Area */}\n            <div className=\"flex-1 flex flex-col\">\n              {activeConversation ? (\n                <>\n                  {/* Chat Header */}\n                  <div className=\"p-4 border-b border-gray-200 bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"h-10 w-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                          {activeConv?.participants.includes('siports-bot') ? (\n                            <Bot className=\"h-5 w-5 text-blue-600\" />\n                          ) : (\n                            <User className=\"h-5 w-5 text-gray-600\" />\n                          )}\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">\n                            {activeConv?.participants.includes('siports-bot') ? 'Assistant SIPORTS' : 'Sarah Johnson'}\n                          </h4>\n                          <p className=\"text-sm text-gray-500\">\n                            {onlineUsers.includes(activeConv?.participants[1] || '') ? 'En ligne' : 'Hors ligne'}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Phone className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Video className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Messages */}\n                  <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                    <AnimatePresence>\n                      {activeMessages.map((message) => {\n                        const isBot = message.senderId === 'siports-bot';\n                        const isCurrentUser = message.senderId === 'user1';\n                        \n                        return (\n                          <motion.div\n                            key={message.id}\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0, y: -20 }}\n                            className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}\n                          >\n                            <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                              isCurrentUser \n                                ? 'bg-blue-600 text-white' \n                                : isBot\n                                ? 'bg-green-100 text-green-800 border border-green-200'\n                                : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              <p className=\"text-sm\">{message.content}</p>\n                              <p className={`text-xs mt-1 ${\n                                isCurrentUser ? 'text-blue-100' : 'text-gray-500'\n                              }`}>\n                                {formatTime(message.timestamp)}\n                              </p>\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </AnimatePresence>\n                    <div ref={messagesEndRef} />\n                  </div>\n\n                  {/* Message Input */}\n                  <div className=\"p-4 border-t border-gray-200\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => {\n                          const input = document.createElement('input');\n                          input.type = 'file';\n                          input.accept = 'image/*,application/pdf,.doc,.docx';\n                          input.onchange = (e) => {\n                            const file = (e.target as HTMLInputElement).files?.[0];\n                            if (file) {\n                              alert(`≡ƒôÄ FICHIER S├ëLECTIONN├ë\\n\\n≡ƒôä Nom: ${file.name}\\n≡ƒôÅ Taille: ${(file.size / 1024 / 1024).toFixed(2)} MB\\n\\n≡ƒÜÇ Envoi en cours...`);\n                            }\n                          };\n                          input.click();\n                        }}\n                        title=\"Joindre un fichier\"\n                      >\n                        <Paperclip className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      <div className=\"flex-1 relative\">\n                        <input\n                          type=\"text\"\n                          value={messageInput}\n                          onChange={(e) => setMessageInput(e.target.value)}\n                          onKeyPress={handleKeyPress}\n                          placeholder=\"Tapez votre message...\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                      \n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => {\n                          const emojis = ['≡ƒÿè', '≡ƒæì', 'Γ¥ñ∩╕Å', '≡ƒÿé', '≡ƒÄë', '≡ƒæÅ', '≡ƒöÑ', '≡ƒÆ»'];\n                          const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\n                          setMessageInput(prev => prev + randomEmoji);\n                        }}\n                        title=\"Ajouter un emoji\"\n                      >\n                        <Smile className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      <Button onClick={handleSendMessage} disabled={!messageInput.trim()}>\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"flex-1 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <MessageCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                      S├⌐lectionnez une conversation\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      Choisissez une conversation pour commencer ├á ├⌐changer\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\chatbot\\ChatBot.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HelpCircle' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sparkles' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[838,841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[838,841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateBotResponse' is assigned a value but never used.","line":50,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'getWelcomeMessage' and 'messages.length'. Either include them or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, isAuthenticated, user, messages.length, getWelcomeMessage]","fix":{"range":[3963,3994],"text":"[isOpen, isAuthenticated, user, messages.length, getWelcomeMessage]"}}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { \n  MessageCircle, \n  Send, \n  X, \n  Bot, \n  User,\n  Minimize2,\n  Maximize2,\n  HelpCircle,\n  Calendar,\n  Building2,\n  Users,\n  Globe,\n  Zap,\n  Clock,\n  CheckCircle,\n  ArrowRight,\n  Sparkles\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport useAuthStore from '../../store/authStore';\nimport { useChatBotStore } from '../../store/chatbotStore';\n\ninterface ChatMessage {\n  id: string;\n  content: string;\n  isBot: boolean;\n  timestamp: Date;\n  type?: 'text' | 'quick_reply' | 'suggestion' | 'action';\n  quickReplies?: string[];\n  suggestions?: Array<{\n    title: string;\n    description: string;\n    action: string;\n    icon: any;\n  }>;\n}\n\ninterface ChatBotProps {\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport const ChatBot: React.FC<ChatBotProps> = ({ isOpen, onToggle }) => {\n  const { user, isAuthenticated } = useAuthStore();\n  const { generateBotResponse } = useChatBotStore();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Messages d'accueil selon le type d'utilisateur\n  const getWelcomeMessage = () => {\n    if (!isAuthenticated) {\n      return {\n        content: \"≡ƒæï Bonjour ! Je suis l'Assistant SIPORTS, votre guide intelligent pour le salon. Connectez-vous pour acc├⌐der ├á toutes mes fonctionnalit├⌐s personnalis├⌐es !\",\n        quickReplies: [\"Se connecter\", \"D├⌐couvrir SIPORTS\", \"Voir les exposants\", \"Programme des ├⌐v├⌐nements\"]\n      };\n    }\n\n    const userType = user?.type;\n    const firstName = user?.profile.firstName || 'cher utilisateur';\n\n    switch (userType) {\n      case 'admin':\n        return {\n          content: `≡ƒææ Bonjour ${firstName} ! En tant qu'administrateur, je peux vous aider avec la gestion de la plateforme, les m├⌐triques et la supervision des comptes.`,\n          quickReplies: [\"M├⌐triques du salon\", \"Comptes en attente\", \"Mod├⌐ration contenu\", \"Statistiques syst├¿me\"]\n        };\n      case 'exhibitor':\n        return {\n          content: `≡ƒÅó Bonjour ${firstName} ! Je peux vous aider ├á optimiser votre pr├⌐sence au salon, g├⌐rer vos rendez-vous et am├⌐liorer votre mini-site.`,\n          quickReplies: [\"Optimiser mon stand\", \"G├⌐rer mes RDV\", \"Modifier mon mini-site\", \"Voir mes statistiques\"]\n        };\n      case 'partner':\n        return {\n          content: `≡ƒñ¥ Bonjour ${firstName} ! En tant que partenaire, je peux vous accompagner dans la gestion de votre partenariat et l'optimisation de votre ROI.`,\n          quickReplies: [\"ROI de mon partenariat\", \"├ëv├⌐nements sponsoris├⌐s\", \"Networking VIP\", \"M├⌐triques d'impact\"]\n        };\n      case 'visitor':\n        return {\n          content: `≡ƒæÑ Bonjour ${firstName} ! Je vais vous aider ├á planifier votre visite, trouver les bons exposants et optimiser votre agenda SIPORTS.`,\n          quickReplies: [\"Planifier ma visite\", \"Recommandations exposants\", \"Mes rendez-vous\", \"Programme personnalis├⌐\"]\n        };\n      default:\n        return {\n          content: `≡ƒæï Bonjour ${firstName} ! Comment puis-je vous aider aujourd'hui avec SIPORTS 2026 ?`,\n          quickReplies: [\"Aide navigation\", \"Informations salon\", \"Support technique\", \"Contact organisateurs\"]\n        };\n    }\n  };\n\n  // Initialiser la conversation\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      const welcomeMsg = getWelcomeMessage();\n      const initialMessage: ChatMessage = {\n        id: '1',\n        content: welcomeMsg.content,\n        isBot: true,\n        timestamp: new Date(),\n        type: 'quick_reply',\n        quickReplies: welcomeMsg.quickReplies\n      };\n      setMessages([initialMessage]);\n    }\n  }, [isOpen, isAuthenticated, user]);\n\n  // Auto-scroll vers le bas\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // R├⌐ponses automatiques du bot\n  const getBotResponse = (userMessage: string): ChatMessage => {\n    const message = userMessage.toLowerCase();\n    const timestamp = new Date();\n    const userType = user?.type || 'visitor';\n    const firstName = user?.profile.firstName || 'cher utilisateur';\n\n    // R├⌐ponses selon l'authentification\n    if (!isAuthenticated) {\n      if (message.includes('connecter') || message.includes('connexion')) {\n        return {\n          id: Date.now().toString(),\n          content: \"≡ƒöÉ Pour vous connecter, cliquez sur le bouton 'Connexion' en haut ├á droite de la page. Vous pouvez utiliser votre email ou vous connecter avec Google pour acc├⌐der ├á toutes les fonctionnalit├⌐s SIPORTS !\",\n          isBot: true,\n          timestamp,\n          type: 'suggestion',\n          suggestions: [\n            {\n              title: \"Page de connexion\",\n              description: \"Acc├⌐der ├á la page de connexion\",\n              action: \"/login\",\n              icon: User\n            }\n          ]\n        };\n      }\n\n      if (message.includes('exposant') || message.includes('entreprise')) {\n        return {\n          id: Date.now().toString(),\n          content: \"≡ƒÅó SIPORTS 2026 accueille 330+ exposants internationaux ! D├⌐couvrez les leaders de l'industrie portuaire. Connectez-vous pour acc├⌐der au r├⌐seautage intelligent et aux RDV B2B.\",\n          isBot: true,\n          timestamp,\n          type: 'suggestion',\n          suggestions: [\n            {\n              title: \"Voir les exposants\",\n              description: \"D├⌐couvrir tous les exposants\",\n              action: \"/exhibitors\",\n              icon: Building2\n            },\n            {\n              title: \"S'inscrire\",\n              description: \"Cr├⌐er un compte gratuit\",\n              action: \"/register\",\n              icon: User\n            }\n          ]\n        };\n      }\n\n      if (message.includes('salon') || message.includes('siports') || message.includes('information')) {\n        return {\n          id: Date.now().toString(),\n          content: \"≡ƒÜó SIPORTS 2026 - Le plus grand salon portuaire international ! ≡ƒôà 5-7 F├⌐vrier 2026 ├á El Jadida, Maroc. 330+ exposants, 6000+ visiteurs de 40 pays, 40+ conf├⌐rences !\",\n          isBot: true,\n          timestamp,\n          type: 'quick_reply',\n          quickReplies: [\"Voir le programme\", \"Liste des exposants\", \"S'inscrire\", \"Informations pratiques\"]\n        };\n      }\n\n      if (message.includes('programme') || message.includes('├⌐v├⌐nement')) {\n        return {\n          id: Date.now().toString(),\n          content: \"≡ƒôà Le programme SIPORTS comprend 40+ ├⌐v├⌐nements : conf├⌐rences pl├⌐ni├¿res, ateliers techniques, sessions de networking, webinaires. Connectez-vous pour personnaliser votre agenda !\",\n          isBot: true,\n          timestamp,\n          type: 'suggestion',\n          suggestions: [\n            {\n              title: \"Programme complet\",\n              description: \"Voir tous les ├⌐v├⌐nements\",\n              action: \"/events\",\n              icon: Calendar\n            }\n          ]\n        };\n      }\n\n      return {\n        id: Date.now().toString(),\n        content: \"≡ƒæï Bonjour ! Je suis l'Assistant SIPORTS, votre guide intelligent pour le salon. Connectez-vous pour acc├⌐der ├á toutes mes fonctionnalit├⌐s personnalis├⌐es !\",\n        isBot: true,\n        timestamp,\n        type: 'quick_reply',\n        quickReplies: [\"Se connecter\", \"Informations salon\", \"Voir les exposants\", \"Programme ├⌐v├⌐nements\"]\n      };\n    }\n\n    // R├⌐ponses pour utilisateurs connect├⌐s\n\n    // R├⌐ponses communes\n    if (message.includes('salon') || message.includes('siports') || message.includes('information')) {\n      return {\n        id: Date.now().toString(),\n        content: `≡ƒÜó Bonjour ${firstName} ! SIPORTS 2026 se d├⌐roule du 5 au 7 f├⌐vrier 2026 ├á El Jadida, Maroc. C'est le plus grand salon portuaire international avec 330+ exposants, 6000+ visiteurs de 40 pays !`,\n        isBot: true,\n        timestamp,\n        type: 'suggestion',\n        suggestions: [\n          {\n            title: \"Programme complet\",\n            description: \"Voir tous les ├⌐v├⌐nements\",\n            action: \"/events\",\n            icon: Calendar\n          },\n          {\n            title: \"Plan du salon\",\n            description: \"Navigation interactive\",\n            action: \"/pavilions\",\n            icon: Globe\n          }\n        ]\n      };\n    }\n\n    if (message.includes('rendez-vous') || message.includes('rdv') || message.includes('appointment')) {\n      const rdvText = userType === 'visitor' \n        ? `Avec votre pass ${user?.profile.passType || 'basic'}, vous pouvez programmer des RDV B2B garantis avec les exposants`\n        : \"En tant qu'exposant, vous pouvez cr├⌐er des cr├⌐neaux pour recevoir des visiteurs\";\n\n      return {\n        id: Date.now().toString(),\n        content: `≡ƒôà ${firstName}, ${rdvText}. Je peux vous aider ├á optimiser votre planning !`,\n        isBot: true,\n        timestamp,\n        type: 'suggestion',\n        suggestions: [\n          {\n            title: userType === 'visitor' ? \"Demander un RDV\" : \"Cr├⌐er un cr├⌐neau\",\n            description: userType === 'visitor' ? \"Avec un exposant\" : \"Pour recevoir des visiteurs\",\n            action: \"/appointments\",\n            icon: Calendar\n          },\n          {\n            title: \"Mes rendez-vous\",\n            description: \"Voir mon planning\",\n            action: \"/appointments\",\n            icon: Calendar\n          }\n        ]\n      };\n    }\n\n    if (message.includes('r├⌐seautage') || message.includes('networking') || message.includes('contact')) {\n      return {\n        id: Date.now().toString(),\n        content: `≡ƒñ¥ ${firstName}, le r├⌐seautage SIPORTS utilise l'IA pour vous recommander les meilleurs contacts ! ${userType === 'visitor' ? 'D├⌐couvrez les exposants qui correspondent ├á vos objectifs.' : 'Connectez-vous avec des visiteurs qualifi├⌐s.'}`,\n        isBot: true,\n        timestamp,\n        type: 'suggestion',\n        suggestions: [\n          {\n            title: \"R├⌐seautage IA\",\n            description: \"Recommandations personnalis├⌐es\",\n            action: \"/networking\",\n            icon: Users\n          },\n          {\n            title: \"Messages\",\n            description: \"Voir mes conversations\",\n            action: \"/messages\",\n            icon: MessageCircle\n          }\n        ]\n      };\n    }\n\n    if (message.includes('aide') || message.includes('help') || message.includes('support')) {\n      return {\n        id: Date.now().toString(),\n        content: `≡ƒåÿ ${firstName}, je suis l├á pour vous aider ! En tant que ${userType === 'admin' ? 'administrateur' : userType === 'exhibitor' ? 'exposant' : userType === 'partner' ? 'partenaire' : 'visiteur'}, voici ce que je peux faire pour vous :`,\n        isBot: true,\n        timestamp,\n        type: 'quick_reply',\n        quickReplies: [\"Navigation du site\", \"Gestion du profil\", \"Syst├¿me de RDV\", \"R├⌐seautage IA\", \"Support technique\"]\n      };\n    }\n    // R├⌐ponses sp├⌐cifiques par type d'utilisateur\n    switch (userType) {\n      case 'admin':\n        if (message.includes('m├⌐trique') || message.includes('statistique') || message.includes('performance')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒôè ${firstName}, voici les m├⌐triques cl├⌐s : 330 exposants actifs, 6300 visiteurs inscrits, 1247 utilisateurs en ligne. Voulez-vous voir le tableau de bord complet ?`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"M├⌐triques compl├¿tes\",\n                description: \"Tableau de bord admin\",\n                action: \"/metrics\",\n                icon: TrendingUp\n              },\n              {\n                title: \"Validation comptes\",\n                description: \"12 comptes en attente\",\n                action: \"/admin/validation\",\n                icon: CheckCircle\n              }\n            ]\n          };\n        }\n        \n        if (message.includes('validation') || message.includes('compte') || message.includes('mod├⌐ration')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒææ ${firstName}, vous avez 12 comptes exposants en attente de validation et 8 contenus ├á mod├⌐rer. Voulez-vous traiter ces demandes ?`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"Validation comptes\",\n                description: \"12 exposants en attente\",\n                action: \"/admin/validation\",\n                icon: CheckCircle\n              },\n              {\n                title: \"Mod├⌐ration contenu\",\n                description: \"8 contenus ├á examiner\",\n                action: \"/admin/moderation\",\n                icon: FileText\n              }\n            ]\n          };\n        }\n        break;\n\n      case 'exhibitor':\n        if (message.includes('stand') || message.includes('mini-site') || message.includes('optimiser')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒÄ¿ ${firstName}, votre mini-site a eu 2,156 vues ! Je peux vous aider ├á l'optimiser pour attirer plus de visiteurs et g├⌐n├⌐rer plus de leads.`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"Modifier mon mini-site\",\n                description: \"├ëditeur de contenu\",\n                action: \"/minisite/editor\",\n                icon: Building2\n              },\n              {\n                title: \"Mes statistiques\",\n                description: \"Performance de mon stand\",\n                action: \"/dashboard\",\n                icon: TrendingUp\n              }\n            ]\n          };\n        }\n        \n        if (message.includes('statistique') || message.includes('performance') || message.includes('vue')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒôê ${firstName}, votre stand performe bien ! 2,156 vues de mini-site, 89 t├⌐l├⌐chargements de catalogue, 47 leads g├⌐n├⌐r├⌐s. Voulez-vous voir le d├⌐tail ?`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"Tableau de bord\",\n                description: \"Voir toutes mes stats\",\n                action: \"/dashboard\",\n                icon: TrendingUp\n              },\n              {\n                title: \"Mes rendez-vous\",\n                description: \"G├⌐rer mon planning\",\n                action: \"/appointments\",\n                icon: Calendar\n              }\n            ]\n          };\n        }\n        break;\n\n      case 'partner':\n        if (message.includes('partenariat') || message.includes('roi') || message.includes('impact')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒñ¥ ${firstName}, votre partenariat g├⌐n├¿re un excellent ROI de 285% ! 3,247 vues, 450 connexions VIP, 12 ├⌐v├⌐nements sponsoris├⌐s. Impressionnant !`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"ROI d├⌐taill├⌐\",\n                description: \"Voir l'impact complet\",\n                action: \"/dashboard\",\n                icon: TrendingUp\n              },\n              {\n                title: \"Networking VIP\",\n                description: \"Acc├¿s privil├⌐gi├⌐\",\n                action: \"/networking\",\n                icon: Users\n              }\n            ]\n          };\n        }\n        break;\n\n      case 'visitor':\n        if (message.includes('visite') || message.includes('planifier') || message.includes('programme')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒùô∩╕Å ${firstName}, je peux vous aider ├á planifier votre visite ! Vous avez un pass ${user?.profile.passType || 'basic'} qui vous donne acc├¿s ├á de nombreux avantages.`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"Mon agenda\",\n                description: \"Voir mes ├⌐v├⌐nements\",\n                action: \"/visitor/dashboard\",\n                icon: Calendar\n              },\n              {\n                title: \"Exposants recommand├⌐s\",\n                description: \"Bas├⌐ sur vos int├⌐r├¬ts\",\n                action: \"/exhibitors\",\n                icon: Target\n              }\n            ]\n          };\n        }\n        \n        if (message.includes('exposant') || message.includes('recommandation') || message.includes('contact')) {\n          return {\n            id: Date.now().toString(),\n            content: `≡ƒÄ» ${firstName}, j'ai analys├⌐ votre profil et trouv├⌐ 12 exposants parfaitement compatibles avec vos objectifs ! Voulez-vous voir mes recommandations ?`,\n            isBot: true,\n            timestamp,\n            type: 'suggestion',\n            suggestions: [\n              {\n                title: \"Recommandations IA\",\n                description: \"Exposants pour vous\",\n                action: \"/networking\",\n                icon: Target\n              },\n              {\n                title: \"Mes favoris\",\n                description: \"Exposants sauvegard├⌐s\",\n                action: \"/visitor/dashboard\",\n                icon: Heart\n              }\n            ]\n          };\n        }\n        break;\n    }\n\n    // R├⌐ponses par d├⌐faut selon le type d'utilisateur\n    const getDefaultResponse = () => {\n      switch (userType) {\n        case 'admin':\n          return {\n            content: `≡ƒææ ${firstName}, en tant qu'administrateur, je peux vous aider avec la gestion de la plateforme, les m├⌐triques et la supervision des comptes.`,\n            suggestions: [\n              { title: \"M├⌐triques syst├¿me\", description: \"Performance globale\", action: \"/metrics\", icon: TrendingUp },\n              { title: \"Validation comptes\", description: \"12 en attente\", action: \"/admin/validation\", icon: CheckCircle },\n              { title: \"Gestion utilisateurs\", description: \"6847 utilisateurs\", action: \"/admin/users\", icon: Users }\n            ]\n          };\n        case 'exhibitor':\n          return {\n            content: `≡ƒÅó ${firstName}, je peux vous aider ├á optimiser votre pr├⌐sence au salon, g├⌐rer vos rendez-vous et am├⌐liorer votre mini-site.`,\n            suggestions: [\n              { title: \"Mon mini-site\", description: \"2,156 vues\", action: \"/minisite/editor\", icon: Building2 },\n              { title: \"Mes RDV\", description: \"G├⌐rer mon planning\", action: \"/appointments\", icon: Calendar },\n              { title: \"Mes statistiques\", description: \"Performance stand\", action: \"/dashboard\", icon: TrendingUp }\n            ]\n          };\n        case 'partner':\n          return {\n            content: `≡ƒñ¥ ${firstName}, en tant que partenaire, je peux vous accompagner dans la gestion de votre partenariat et l'optimisation de votre ROI.`,\n            suggestions: [\n              { title: \"ROI partenariat\", description: \"285% de retour\", action: \"/dashboard\", icon: TrendingUp },\n              { title: \"├ëv├⌐nements sponsoris├⌐s\", description: \"12 ├⌐v├⌐nements\", action: \"/events\", icon: Calendar },\n              { title: \"Networking VIP\", description: \"Acc├¿s privil├⌐gi├⌐\", action: \"/networking\", icon: Users }\n            ]\n          };\n        case 'visitor':\n          return {\n            content: `≡ƒæÑ ${firstName}, je vais vous aider ├á planifier votre visite, trouver les bons exposants et optimiser votre agenda SIPORTS.`,\n            suggestions: [\n              { title: \"Planifier ma visite\", description: \"Agenda personnalis├⌐\", action: \"/visitor/dashboard\", icon: Calendar },\n              { title: \"Recommandations\", description: \"Exposants pour vous\", action: \"/networking\", icon: Target },\n              { title: \"Mes rendez-vous\", description: \"RDV programm├⌐s\", action: \"/appointments\", icon: Calendar }\n            ]\n          };\n        default:\n          return {\n            content: `≡ƒæï ${firstName}, comment puis-je vous aider aujourd'hui avec SIPORTS 2026 ?`,\n            suggestions: [\n              { title: \"Informations salon\", description: \"Dates, lieu, programme\", action: \"/\", icon: Globe },\n              { title: \"Voir les exposants\", description: \"330+ entreprises\", action: \"/exhibitors\", icon: Building2 },\n              { title: \"Programme ├⌐v├⌐nements\", description: \"40+ conf├⌐rences\", action: \"/events\", icon: Calendar }\n            ]\n          };\n      }\n    };\n\n    const defaultResponse = getDefaultResponse();\n\n    return {\n      id: Date.now().toString(),\n      content: defaultResponse.content,\n      isBot: true,\n      timestamp,\n      type: 'suggestion',\n      suggestions: defaultResponse.suggestions\n    };\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Ajouter le message de l'utilisateur\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      content: inputMessage,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n\n    // Simuler le temps de r├⌐ponse du bot\n    setTimeout(() => {\n      const botResponse = getBotResponse(inputMessage);\n      setMessages(prev => [...prev, botResponse]);\n      setIsTyping(false);\n    }, 1000 + Math.random() * 1000);\n  };\n\n  const handleQuickReply = (reply: string) => {\n    // Ajouter le message de l'utilisateur\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      content: reply,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n\n    // G├⌐n├⌐rer la r├⌐ponse du bot\n    setTimeout(() => {\n      const botResponse = getBotResponse(reply);\n      setMessages(prev => [...prev, botResponse]);\n      setIsTyping(false);\n    }, 800);\n  };\n\n  const handleSuggestionClick = (action: string) => {\n    if (action.startsWith('/')) {\n      // Navigation interne\n      window.location.hash = action;\n      window.location.pathname = action;\n    } else {\n      // Action personnalis├⌐e\n      const actionMessages = {\n        'info_salon': `Γä╣∩╕Å SIPORTS 2026 - Salon International des Ports\\n≡ƒôà 5-7 F├⌐vrier 2026\\n≡ƒôì El Jadida, Maroc\\n≡ƒÅó 330+ exposants\\n≡ƒæÑ 6000+ visiteurs\\n≡ƒîì 40 pays`,\n        'support': `≡ƒô₧ SUPPORT SIPORTS\\n≡ƒôº Email: support@siportevent.com\\n≡ƒô▒ T├⌐l: +212 1 23 45 67 89\\n≡ƒòÆ Lun-Ven: 9h-18h\\n≡ƒÆ¼ Chat en direct disponible`,\n        'contact_commercial': `≡ƒÆ╝ ├ëQUIPE COMMERCIALE\\n≡ƒôº commercial@siportevent.com\\n≡ƒô▒ +212 1 23 45 67 90\\n≡ƒñ¥ Partenariats & Sponsoring\\n≡ƒôï Devis personnalis├⌐s`\n      };\n      \n      const message = actionMessages[action as keyof typeof actionMessages] || `≡ƒÜÇ Action: ${action}`;\n      alert(message);\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.8, y: 20 }}\n      animate={{ opacity: 1, scale: 1, y: 0 }}\n      exit={{ opacity: 0, scale: 0.8, y: 20 }}\n      className={`fixed bottom-4 right-4 z-50 ${\n        isMinimized ? 'w-80 h-16' : 'w-80 h-96'\n      } transition-all duration-300`}\n    >\n      <Card className=\"h-full flex flex-col shadow-2xl border-blue-200\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white bg-opacity-20 p-2 rounded-full\">\n                <Bot className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Assistant SIPORTS</h3>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                  <span className=\"text-xs opacity-90\">En ligne ΓÇó IA</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"p-1 hover:bg-white hover:bg-opacity-20 rounded transition-colors\"\n              >\n                {isMinimized ? <Maximize2 className=\"h-4 w-4\" /> : <Minimize2 className=\"h-4 w-4\" />}\n              </button>\n              <button\n                onClick={onToggle}\n                className=\"p-1 hover:bg-white hover:bg-opacity-20 rounded transition-colors\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {!isMinimized && (\n          <>\n            {/* Messages */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\n              <AnimatePresence>\n                {messages.map((message) => (\n                  <motion.div\n                    key={message.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}\n                  >\n                    <div className={`max-w-xs ${\n                      message.isBot \n                        ? 'bg-white border border-gray-200' \n                        : 'bg-blue-600 text-white'\n                    } rounded-lg p-3 shadow-sm`}>\n                      <p className=\"text-sm\">{message.content}</p>\n                      <p className={`text-xs mt-1 ${\n                        message.isBot ? 'text-gray-500' : 'text-blue-100'\n                      }`}>\n                        {formatTime(message.timestamp)}\n                      </p>\n\n                      {/* Quick Replies */}\n                      {message.quickReplies && (\n                        <div className=\"mt-3 space-y-1\">\n                          {message.quickReplies.map((reply, idx) => (\n                            <button\n                              key={idx}\n                              onClick={() => handleQuickReply(reply)}\n                              className=\"block w-full text-left px-3 py-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg text-xs transition-colors\"\n                            >\n                              {reply}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* Suggestions */}\n                      {message.suggestions && (\n                        <div className=\"mt-3 space-y-2\">\n                          {message.suggestions.map((suggestion, idx) => (\n                            <button\n                              key={idx}\n                              onClick={() => handleSuggestionClick(suggestion.action)}\n                              className=\"flex items-center space-x-2 w-full p-2 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-lg text-xs transition-colors\"\n                            >\n                              <suggestion.icon className=\"h-4 w-4\" />\n                              <div className=\"text-left\">\n                                <div className=\"font-medium\">{suggestion.title}</div>\n                                <div className=\"text-blue-600\">{suggestion.description}</div>\n                              </div>\n                              <ArrowRight className=\"h-3 w-3 ml-auto\" />\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n\n              {/* Typing indicator */}\n              {isTyping && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"flex justify-start\"\n                >\n                  <div className=\"bg-white border border-gray-200 rounded-lg p-3 shadow-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                      </div>\n                      <span className=\"text-xs text-gray-500 ml-2\">Assistant ├⌐crit...</span>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Input */}\n            <div className=\"p-4 border-t border-gray-200 bg-white rounded-b-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex-1 relative\">\n                  <input\n                    type=\"text\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    placeholder=\"Tapez votre question...\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                  />\n                </div>\n                \n                <Button \n                  onClick={handleSendMessage} \n                  disabled={!inputMessage.trim() || isTyping}\n                  size=\"sm\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              {/* Suggestions rapides */}\n              <div className=\"mt-2 flex flex-wrap gap-1\">\n                {[\n                  \"Aide navigation\",\n                  \"Mes statistiques\", \n                  \"Contact support\",\n                  \"Infos pratiques\"\n                ].map((suggestion, idx) => (\n                  <button\n                    key={idx}\n                    onClick={() => handleQuickReply(suggestion)}\n                    className=\"px-2 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded text-xs transition-colors\"\n                  >\n                    {suggestion}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </Card>\n    </motion.div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\chatbot\\ChatBotToggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { MessageCircle, Bot, Sparkles } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface ChatBotToggleProps {\n  onClick: () => void;\n  hasUnreadMessages?: boolean;\n}\n\nexport const ChatBotToggle: React.FC<ChatBotToggleProps> = ({ \n  onClick, \n  hasUnreadMessages = false \n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  return (\n    <motion.div\n      className=\"fixed bottom-4 right-4 z-40\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <button\n        onClick={onClick}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        className=\"relative bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300\"\n      >\n        {/* Ic├┤ne principale */}\n        <div className=\"relative\">\n          <Bot className=\"h-6 w-6\" />\n          \n          {/* Animation sparkles */}\n          {isHovered && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"absolute -top-1 -right-1\"\n            >\n              <Sparkles className=\"h-3 w-3 text-yellow-300\" />\n            </motion.div>\n          )}\n        </div>\n\n        {/* Badge de notification */}\n        {hasUnreadMessages && (\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold\"\n          >\n            !\n          </motion.div>\n        )}\n\n        {/* Pulse animation */}\n        <div className=\"absolute inset-0 rounded-full bg-blue-600 animate-ping opacity-20\" />\n      </button>\n\n      {/* Tooltip */}\n      <AnimatePresence>\n        {isHovered && (\n          <motion.div\n            initial={{ opacity: 0, x: 10 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 10 }}\n            className=\"absolute right-16 top-1/2 transform -translate-y-1/2 bg-gray-900 text-white px-3 py-2 rounded-lg text-sm whitespace-nowrap\"\n          >\n            Assistant SIPORTS IA\n            <div className=\"absolute right-0 top-1/2 transform translate-x-1 -translate-y-1/2 w-2 h-2 bg-gray-900 rotate-45\" />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\dashboard\\AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dashboard' is assigned a value but never used.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":450,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":450,"endColumn":49}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  BarChart3,\n  Users, \n  Building2, \n  Calendar, \n  MessageCircle, \n  TrendingUp,\n  Activity,\n  Bell,\n  Star,\n  Globe,\n  Award,\n  Target,\n  Eye,\n  Settings,\n  Shield,\n  Database,\n  Server,\n  Zap,\n  UserCheck,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Trash2,\n  Plus\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { useDashboardStore } from '../../store/dashboardStore';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\n\nexport const AdminDashboard: React.FC = () => {\n  const { dashboard, isLoading, fetchDashboard } = useDashboardStore();\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    fetchDashboard();\n  }, [fetchDashboard]);\n\n  // M├⌐triques administrateur sp├⌐cifiques\n  const adminMetrics = {\n    totalUsers: 6847,\n    activeUsers: 1247,\n    totalExhibitors: 330,\n    totalPartners: 25,\n    totalVisitors: 6300,\n    totalEvents: 40,\n    systemUptime: 99.8,\n    dataStorage: 2.4, // TB\n    apiCalls: 125000,\n    avgResponseTime: 145, // ms\n    pendingValidations: 12,\n    activeContracts: 285,\n    contentModerations: 8\n  };\n\n  const systemHealth = [\n    { name: 'API Performance', status: 'excellent', value: '145ms', color: 'text-green-600' },\n    { name: 'Database', status: 'good', value: '99.2%', color: 'text-green-600' },\n    { name: 'Storage', status: 'warning', value: '78%', color: 'text-yellow-600' },\n    { name: 'CDN', status: 'excellent', value: '99.9%', color: 'text-green-600' }\n  ];\n\n  const recentAdminActivity = [\n    {\n      id: '1',\n      type: 'account_validation',\n      description: 'Compte exposant \"Port Solutions Inc.\" activ├⌐',\n      timestamp: new Date(Date.now() - 3600000),\n      severity: 'success',\n      adminUser: 'Admin System'\n    },\n    {\n      id: '2',\n      type: 'content_moderation',\n      description: 'Contenu signal├⌐ mod├⌐r├⌐ - Mini-site \"Maritime Tech\"',\n      timestamp: new Date(Date.now() - 7200000),\n      severity: 'warning',\n      adminUser: 'Mod├⌐rateur Content'\n    },\n    {\n      id: '3',\n      type: 'system_alert',\n      description: 'Pic de trafic d├⌐tect├⌐ - 2000 utilisateurs simultan├⌐s',\n      timestamp: new Date(Date.now() - 10800000),\n      severity: 'info',\n      adminUser: 'System Monitor'\n    }\n  ];\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'account_validation': return UserCheck;\n      case 'content_moderation': return FileText;\n      case 'system_alert': return AlertTriangle;\n      case 'user_management': return Users;\n      case 'security': return Shield;\n      default: return Activity;\n    }\n  };\n\n  const getActivityColor = (severity: string) => {\n    switch (severity) {\n      case 'success': return 'text-green-600';\n      case 'warning': return 'text-yellow-600';\n      case 'error': return 'text-red-600';\n      case 'info': return 'text-blue-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  if (user?.type !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Acc├¿s Restreint - Administrateurs Uniquement\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Cette section est r├⌐serv├⌐e aux administrateurs SIPORTS\n          </p>\n          <Link to=\"/dashboard\">\n            <Button>\n              Retour au Tableau de Bord\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header Administrateur */}\n        <div className=\"mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-red-600 p-3 rounded-lg\">\n                <Shield className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  Tableau de Bord Administrateur SIPORTS\n                </h1>\n                <p className=\"text-gray-600\">\n                  Centre de contr├┤le et supervision de la plateforme\n                </p>\n              </div>\n            </div>\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5 text-red-600\" />\n                <span className=\"text-red-800 font-medium\">Zone Administrateur</span>\n                <Badge variant=\"error\" size=\"sm\">Acc├¿s Restreint</Badge>\n                <span className=\"text-red-700 text-sm\">- Connect├⌐ en tant que {user?.profile.firstName} {user?.profile.lastName}</span>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Alertes Prioritaires */}\n        <div className=\"mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Card className=\"bg-yellow-50 border-yellow-200\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\n                  <h3 className=\"text-lg font-semibold text-yellow-900\">\n                    Actions Requises ({adminMetrics.pendingValidations} en attente)\n                  </h3>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-white p-4 rounded-lg border border-yellow-200\">\n                    <div className=\"text-2xl font-bold text-yellow-600 mb-1\">\n                      {adminMetrics.pendingValidations}\n                    </div>\n                    <div className=\"text-sm text-yellow-700\">Comptes ├á valider</div>\n                  </div>\n                  <div className=\"bg-white p-4 rounded-lg border border-yellow-200\">\n                    <div className=\"text-2xl font-bold text-yellow-600 mb-1\">\n                      {adminMetrics.contentModerations}\n                    </div>\n                    <div className=\"text-sm text-yellow-700\">Contenus ├á mod├⌐rer</div>\n                  </div>\n                  <div className=\"bg-white p-4 rounded-lg border border-yellow-200\">\n                    <div className=\"text-2xl font-bold text-green-600 mb-1\">\n                      {adminMetrics.activeContracts}\n                    </div>\n                    <div className=\"text-sm text-green-700\">Contrats actifs</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* M├⌐triques Syst├¿me Globales */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Users className=\"h-8 w-8\" />\n                  <Badge className=\"bg-white text-blue-600\" size=\"sm\">\n                    +8% ce mois\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-1\">\n                  {adminMetrics.totalUsers.toLocaleString()}\n                </div>\n                <div className=\"text-blue-100 text-sm\">\n                  Utilisateurs Total\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n          >\n            <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Activity className=\"h-8 w-8\" />\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-2 h-2 bg-green-300 rounded-full animate-pulse\" />\n                    <span className=\"text-xs\">Live</span>\n                  </div>\n                </div>\n                <div className=\"text-3xl font-bold mb-1\">\n                  {adminMetrics.activeUsers.toLocaleString()}\n                </div>\n                <div className=\"text-green-100 text-sm\">\n                  Utilisateurs Actifs\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n          >\n            <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Server className=\"h-8 w-8\" />\n                  <Badge className=\"bg-white text-purple-600\" size=\"sm\">\n                    Excellent\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-1\">\n                  {adminMetrics.systemUptime}%\n                </div>\n                <div className=\"text-purple-100 text-sm\">\n                  Uptime Syst├¿me\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n          >\n            <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Database className=\"h-8 w-8\" />\n                  <Badge className=\"bg-white text-orange-600\" size=\"sm\">\n                    78% utilis├⌐\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-1\">\n                  {adminMetrics.dataStorage} TB\n                </div>\n                <div className=\"text-orange-100 text-sm\">\n                  Stockage Donn├⌐es\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Actions Administrateur */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.6 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Actions Administrateur Critiques\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <Link to=\"/admin/create-exhibitor\" className=\"block\">\n                    <Button className=\"w-full justify-start bg-green-600 hover:bg-green-700\">\n                      <Plus className=\"h-4 w-4 mr-3\" />\n                      Cr├⌐er Nouvel Exposant\n                    </Button>\n                  </Link>\n                  \n                  <Link to=\"/admin/create-partner\" className=\"block\">\n                    <Button className=\"w-full justify-start bg-purple-600 hover:bg-purple-700\">\n                      <Plus className=\"h-4 w-4 mr-3\" />\n                      Cr├⌐er Nouveau Partenaire\n                    </Button>\n                  </Link>\n                  \n                  <Link to=\"/admin/create-news\" className=\"block\">\n                    <Button className=\"w-full justify-start bg-indigo-600 hover:bg-indigo-700\">\n                      <Plus className=\"h-4 w-4 mr-3\" />\n                      Cr├⌐er Nouvel Article\n                    </Button>\n                  </Link>\n                  \n                  <Link to=\"/admin/validation\" className=\"block\">\n                    <Button className=\"w-full justify-start bg-red-600 hover:bg-red-700\">\n                      <UserCheck className=\"h-4 w-4 mr-3\" />\n                      Validation Comptes ({adminMetrics.pendingValidations})\n                    </Button>\n                  </Link>\n                  \n                  <Link to=\"/admin/moderation\" className=\"block\">\n                    <Button className=\"w-full justify-start bg-orange-600 hover:bg-orange-700\">\n                      <FileText className=\"h-4 w-4 mr-3\" />\n                      Mod├⌐ration Contenu ({adminMetrics.contentModerations})\n                    </Button>\n                  </Link>\n                  \n                  <Link to=\"/metrics\" className=\"block\">\n                    <Button className=\"w-full justify-start\">\n                      <BarChart3 className=\"h-4 w-4 mr-3\" />\n                      M├⌐triques & Performance Compl├¿tes\n                    </Button>\n                  </Link>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Link to=\"/admin/users\" className=\"w-full\">\n                      <Button className=\"w-full justify-start\" variant=\"outline\">\n                        <Users className=\"h-4 w-4 mr-3\" />\n                        Gestion Utilisateurs ({adminMetrics.totalUsers.toLocaleString()})\n                      </Button>\n                    </Link>\n                  </Button>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Building2 className=\"h-4 w-4 mr-3\" />\n                    Gestion Exposants ({adminMetrics.totalExhibitors})\n                  </Button>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Calendar className=\"h-4 w-4 mr-3\" />\n                    Gestion ├ëv├⌐nements ({adminMetrics.totalEvents})\n                  </Button>\n                  \n                  <Link to=\"/networking\" className=\"block\">\n                    <Button \n                      className=\"w-full justify-start\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        const networkingData = {\n                          totalConnections: 4156,\n                          activeUsers: 1247,\n                          aiRecommendations: 12847,\n                          successRate: '89%',\n                          topSectors: ['Port Operations: 28%', 'Technology: 22%', 'Logistics: 18%'],\n                          dailyActivity: '456 nouvelles connexions',\n                          avgConnectionsPerUser: '3.2',\n                          peakHours: '14h-16h',\n                          satisfaction: '94%',\n                          aiAccuracy: '92%'\n                        };\n                        \n                        alert(`≡ƒñ¥ SUPERVISION R├ëSEAUTAGE AVANC├ëE\\n\\n≡ƒæÑ Connexions totales: ${networkingData.totalConnections.toLocaleString()}\\n≡ƒöÑ Utilisateurs actifs: ${networkingData.activeUsers.toLocaleString()}\\n≡ƒñû Recommandations IA: ${networkingData.aiRecommendations.toLocaleString()}\\n≡ƒôê Taux de succ├¿s: ${networkingData.successRate}\\n≡ƒÄ» Pr├⌐cision IA: ${networkingData.aiAccuracy}\\nΓ¡É Satisfaction: ${networkingData.satisfaction}\\n\\n≡ƒôè M├⌐triques:\\nΓÇó Connexions/utilisateur: ${networkingData.avgConnectionsPerUser}\\nΓÇó Heures de pointe: ${networkingData.peakHours}\\nΓÇó Activit├⌐ aujourd'hui: ${networkingData.dailyActivity}\\n\\n≡ƒÄ» Top secteurs:\\n${networkingData.topSectors.join('\\n')}\\n\\n≡ƒÄ» Supervision compl├¿te activ├⌐e !`);\n                      }}\n                    >\n                      <Users className=\"h-4 w-4 mr-3\" />\n                      Supervision R├⌐seautage\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.7 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Performance Technique Syst├¿me\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  {systemHealth.map((item, index) => (\n                    <div key={item.name} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <span className=\"text-sm font-medium text-gray-700\">{item.name}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className={`text-sm font-bold ${item.color}`}>\n                          {item.value}\n                        </span>\n                        <div className={`w-3 h-3 rounded-full ${\n                          item.status === 'excellent' ? 'bg-green-500' :\n                          item.status === 'good' ? 'bg-blue-500' :\n                          item.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                        }`} />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 pt-4 border-t border-gray-200\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Appels API (24h):</span>\n                      <span className=\"font-semibold\">{adminMetrics.apiCalls.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Temps r├⌐ponse:</span>\n                      <span className=\"font-semibold text-green-600\">{adminMetrics.avgResponseTime}ms</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Activit├⌐ Syst├¿me R├⌐cente */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.8 }}\n        >\n          <Card>\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Activit├⌐ Syst├¿me R├⌐cente\n                </h3>\n                <Button variant=\"ghost\" size=\"sm\">\n                  Voir tout\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {recentAdminActivity.map((activity, index) => {\n                  const ActivityIcon = getActivityIcon(activity.type);\n                  const iconColor = getActivityColor(activity.severity);\n                  \n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.9 + index * 0.1 }}\n                      className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\"\n                    >\n                      <div className=\"p-2 rounded-lg bg-white shadow-sm\">\n                        <ActivityIcon className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm text-gray-900\">\n                          {activity.description}\n                        </p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <p className=\"text-xs text-gray-500\">\n                            {formatDate(activity.timestamp)}\n                          </p>\n                          <span className=\"text-xs text-gray-400\">ΓÇó</span>\n                          <p className=\"text-xs text-gray-500\">\n                            {activity.adminUser}\n                          </p>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* M├⌐triques du Salon */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1.1 }}\n          >\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-blue-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                <Building2 className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {adminMetrics.totalExhibitors}\n              </div>\n              <div className=\"text-gray-600 text-sm\">Exposants Actifs</div>\n              <Badge variant=\"success\" size=\"sm\" className=\"mt-2\">\n                +10% vs objectif\n              </Badge>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1.2 }}\n          >\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-green-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                <Users className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {adminMetrics.totalVisitors.toLocaleString()}\n              </div>\n              <div className=\"text-gray-600 text-sm\">Visiteurs Inscrits</div>\n              <Badge variant=\"success\" size=\"sm\" className=\"mt-2\">\n                +5% vs objectif\n              </Badge>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1.3 }}\n          >\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-purple-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                <Award className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {adminMetrics.totalPartners}\n              </div>\n              <div className=\"text-gray-600 text-sm\">Partenaires Officiels</div>\n              <Badge variant=\"success\" size=\"sm\" className=\"mt-2\">\n                +25% vs objectif\n              </Badge>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1.4 }}\n          >\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-orange-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                <Calendar className=\"h-8 w-8 text-orange-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {adminMetrics.totalEvents}\n              </div>\n              <div className=\"text-gray-600 text-sm\">Conf├⌐rences & Ateliers</div>\n              <Badge variant=\"success\" size=\"sm\" className=\"mt-2\">\n                +33% vs objectif\n              </Badge>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Acc├¿s aux M├⌐triques Compl├¿tes */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 1.5 }}\n        >\n          <Card className=\"bg-gradient-to-r from-red-50 to-pink-50 border-red-200\">\n            <div className=\"p-8 text-center\">\n              <div className=\"bg-red-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                <BarChart3 className=\"h-8 w-8 text-red-600\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                M├⌐triques & Performance D├⌐taill├⌐es\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                Acc├⌐dez aux analyses compl├¿tes de performance du salon SIPORTS 2026\n              </p>\n              <div className=\"flex items-center justify-center space-x-4\">\n                <Link to=\"/metrics\">\n                  <Button size=\"lg\" className=\"bg-red-600 hover:bg-red-700\">\n                    <BarChart3 className=\"h-5 w-5 mr-2\" />\n                    Voir les M├⌐triques Compl├¿tes\n                  </Button>\n                </Link>\n                <Badge variant=\"error\" size=\"sm\">\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  Acc├¿s Admin Uniquement\n                </Badge>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\dashboard\\DashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\dashboard\\ExhibitorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\dashboard\\PartnerDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { \n  Award, \n  Users, \n  Calendar, \n  MessageCircle, \n  TrendingUp,\n  Activity,\n  Bell,\n  Star,\n  Handshake,\n  Globe,\n  Target,\n  BarChart3,\n  Crown,\n  Zap\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { useDashboardStore } from '../../store/dashboardStore';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\nimport { Edit } from 'lucide-react';\n\nexport const PartnerDashboard: React.FC = () => {\n  const { dashboard, isLoading, fetchDashboard } = useDashboardStore();\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    fetchDashboard();\n  }, [fetchDashboard]);\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'profile_view': return Users;\n      case 'message': return MessageCircle;\n      case 'appointment': return Calendar;\n      case 'connection': return Handshake;\n      case 'download': return Award;\n      default: return Activity;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'profile_view': return 'text-blue-600';\n      case 'message': return 'text-green-600';\n      case 'appointment': return 'text-purple-600';\n      case 'connection': return 'text-orange-600';\n      case 'download': return 'text-indigo-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboard) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Erreur de chargement\n          </h3>\n          <p className=\"text-gray-600\">\n            Impossible de charger le tableau de bord partenaire\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header Partenaire */}\n        <div className=\"mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-purple-600 p-3 rounded-lg\">\n                <Award className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  Tableau de Bord Partenaire\n                </h1>\n                <p className=\"text-gray-600\">\n                  Bienvenue {user?.profile.firstName}, suivez votre impact SIPORTS 2026\n                </p>\n              </div>\n            </div>\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Crown className=\"h-5 w-5 text-purple-600\" />\n                <span className=\"text-purple-800 font-medium\">Espace Partenaire</span>\n                <Badge className=\"bg-purple-100 text-purple-800\" size=\"sm\">\n                  Partenaire Officiel\n                </Badge>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Stats Cards Partenaire */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Visibilit├⌐ Partenaire</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {dashboard.stats.profileViews?.toLocaleString() || '3,247'}\n                    </p>\n                  </div>\n                  <div className=\"bg-purple-100 p-3 rounded-lg\">\n                    <Crown className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-sm text-green-600\">+22% cette semaine</span>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Connexions ├ëtablies</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {dashboard.stats.connections}\n                    </p>\n                  </div>\n                  <div className=\"bg-orange-100 p-3 rounded-lg\">\n                    <Handshake className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-sm text-green-600\">+15% ce mois</span>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">├ëv├⌐nements Sponsoris├⌐s</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">8</p>\n                  </div>\n                  <div className=\"bg-blue-100 p-3 rounded-lg\">\n                    <Calendar className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-sm text-gray-600\">2 cette semaine</span>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">ROI Partenariat</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">285%</p>\n                  </div>\n                  <div className=\"bg-green-100 p-3 rounded-lg\">\n                    <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <Badge variant=\"success\" size=\"sm\">Excellent</Badge>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Actions Rapides Partenaire */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.5 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Gestion de votre Partenariat\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <Link to=\"/partners/2\" className=\"block\">\n                    <Button className=\"w-full justify-start\">\n                    <Globe className=\"h-4 w-4 mr-3\" />\n                      Modifier mon Profil Partenaire\n                    </Button>\n                  </Link>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Edit className=\"h-4 w-4 mr-3\" />\n                    Modifier mon Contenu\n                  </Button>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Calendar className=\"h-4 w-4 mr-3\" />\n                    ├ëv├⌐nements Sponsoris├⌐s\n                  </Button>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Users className=\"h-4 w-4 mr-3\" />\n                    Networking Privil├⌐gi├⌐\n                  </Button>\n                  \n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <BarChart3 className=\"h-4 w-4 mr-3\" />\n                    ROI & Analytics\n                  </Button>\n                  \n                  <Link to=\"/networking\" className=\"block\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Users className=\"h-4 w-4 mr-3\" />\n                      R├⌐seautage VIP Exclusif\n                    </Button>\n                  </Link>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      alert('≡ƒÄ» LEADS PARTENAIRE\\n\\n≡ƒæÑ 89 leads qualifi├⌐s g├⌐n├⌐r├⌐s\\n≡ƒÆ░ Valeur estim├⌐e: 2.5MΓé¼\\n≡ƒôê Taux conversion: 12%\\n≡ƒÅå ROI: 285%\\n\\n≡ƒÆ╝ Pipeline commercial excellent !');\n                    }}\n                  >\n                    <Target className=\"h-4 w-4 mr-3\" />\n                    Leads & Prospects\n                  </Button>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      alert('≡ƒô║ M├ëDIAS & PRESSE\\n\\n≡ƒô░ 12 mentions m├⌐dias\\n≡ƒô║ 3 interviews TV\\n≡ƒô╗ 5 passages radio\\n≡ƒô▒ 45K impressions sociales\\n\\n≡ƒÄ¼ Kit m├⌐dia disponible !');\n                    }}\n                  >\n                    <Globe className=\"h-4 w-4 mr-3\" />\n                    M├⌐dias & Communication\n                  </Button>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      alert('≡ƒÄ¬ ├ëV├ëNEMENTS SPONSORIS├ëS\\n\\n≡ƒôà 8 ├⌐v├⌐nements actifs\\n≡ƒæÑ 2,500 participants touch├⌐s\\n≡ƒÄ» Satisfaction: 98%\\n≡ƒôè Impact: Excellent\\n\\n≡ƒÄë Programmez votre prochain ├⌐v├⌐nement !');\n                    }}\n                  >\n                    <Calendar className=\"h-4 w-4 mr-3\" />\n                    Mes ├ëv├⌐nements Sponsoris├⌐s\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.6 }}\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Impact de votre Partenariat\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Mentions dans les m├⌐dias</span>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => {\n                        alert('≡ƒô░ MENTIONS M├ëDIAS\\n\\n≡ƒô║ TV: 3 interviews\\n≡ƒô╗ Radio: 5 passages\\n≡ƒô░ Presse: 12 articles\\n≡ƒô▒ Social: 45K vues\\n\\n≡ƒÄ¼ Revue de presse compl├¿te !');\n                      }}\n                    >\n                      <span className=\"font-semibold text-purple-600\">12</span>\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Port├⌐e sociale</span>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => {\n                        alert('≡ƒô▒ R├ëSEAUX SOCIAUX\\n\\n≡ƒæÑ 45,000 impressions\\nΓ¥ñ∩╕Å 2,340 likes\\n≡ƒöä 890 partages\\n≡ƒÆ¼ 456 commentaires\\n\\n≡ƒôè Engagement excellent !');\n                      }}\n                    >\n                      <span className=\"font-semibold text-blue-600\">45,000</span>\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Leads qualifi├⌐s</span>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => {\n                        alert('≡ƒÄ» LEADS QUALIFI├ëS\\n\\n≡ƒæÑ 89 prospects identifi├⌐s\\n≡ƒÆ░ Valeur: 2.5MΓé¼\\n≡ƒÅå Score moyen: 8.5/10\\n≡ƒôê +35% vs mois dernier\\n\\n≡ƒÆ╝ Pipeline commercial robuste !');\n                      }}\n                    >\n                      <span className=\"font-semibold text-green-600\">89</span>\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Satisfaction partenariat</span>\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => {\n                          alert('Γ¡É SATISFACTION PARTENARIAT\\n\\n≡ƒÅå Note: 4.9/5\\n≡ƒæÑ 98% de satisfaction\\n≡ƒÆ¼ \"Partenaire exceptionnel\"\\n≡ƒÄ» Recommandation: 100%\\n\\n≡ƒÄë Excellence reconnue !');\n                        }}\n                      >\n                        <span className=\"font-semibold text-gray-900\">4.9/5</span>\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-gray-200\">\n                    <Button \n                      className=\"w-full\"\n                      onClick={() => {\n                        const roiData = {\n                          investment: '2.5MΓé¼',\n                          return: '7.1MΓé¼',\n                          roi: '285%',\n                          period: '12 mois',\n                          objectives: '120% atteints',\n                          kpis: ['Visibilit├⌐: 95%', 'Leads: 89%', 'Networking: 92%', 'Satisfaction: 98%'],\n                          breakdown: {\n                            sponsorship: '1.2MΓé¼ ΓåÆ 3.8MΓé¼ (317% ROI)',\n                            networking: '800KΓé¼ ΓåÆ 2.1MΓé¼ (263% ROI)',\n                            branding: '500KΓé¼ ΓåÆ 1.2MΓé¼ (240% ROI)'\n                          },\n                          projections: '350% ROI pr├⌐vu ann├⌐e prochaine',\n                          recommendations: ['Augmenter budget networking', 'Sponsoriser plus d\\'├⌐v├⌐nements', '├ëtendre ├á l\\'international']\n                        };\n                        \n                        // G├⌐n├⌐ration rapport PDF d├⌐taill├⌐\n                        const link = document.createElement('a');\n                        link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEK';\n                        link.download = `rapport-roi-detaille-partenaire-${new Date().getFullYear()}.pdf`;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                        \n                        alert(`≡ƒôè RAPPORT ROI D├ëTAILL├ë\\n\\n≡ƒÆ░ Investissement total: ${roiData.investment}\\n≡ƒôê Retour g├⌐n├⌐r├⌐: ${roiData.return}\\n≡ƒÄ» ROI global: ${roiData.roi}\\n≡ƒôà P├⌐riode d'analyse: ${roiData.period}\\n≡ƒÅå Objectifs: ${roiData.objectives}\\n\\n≡ƒôï KPIs principaux:\\n${roiData.kpis.join('\\n')}\\n\\n≡ƒÆ╝ D├⌐tail par activit├⌐:\\nΓÇó Sponsoring: ${roiData.breakdown.sponsorship}\\nΓÇó Networking: ${roiData.breakdown.networking}\\nΓÇó Branding: ${roiData.breakdown.branding}\\n\\n≡ƒö« Projections: ${roiData.projections}\\n\\n≡ƒÆí Recommandations:\\n${roiData.recommendations.map(r => `ΓÇó ${r}`).join('\\n')}\\n\\n≡ƒôä Rapport PDF complet t├⌐l├⌐charg├⌐ !`);\n                      }}\n                    >\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                      Rapport ROI Complet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Activit├⌐ R├⌐cente Partenaire */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.7 }}\n        >\n          <Card>\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Activit├⌐ de votre Partenariat\n                </h3>\n                <Button variant=\"ghost\" size=\"sm\">\n                  Voir tout\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {[\n                  {\n                    id: '1',\n                    type: 'sponsorship',\n                    description: 'Votre logo affich├⌐ sur la page d\\'accueil - 2,500 vues',\n                    timestamp: new Date(Date.now() - 3600000)\n                  },\n                  {\n                    id: '2',\n                    type: 'networking',\n                    description: 'Session networking VIP - 45 participants connect├⌐s',\n                    timestamp: new Date(Date.now() - 7200000)\n                  },\n                  {\n                    id: '3',\n                    type: 'media',\n                    description: 'Mention dans le communiqu├⌐ de presse officiel',\n                    timestamp: new Date(Date.now() - 10800000)\n                  }\n                ].map((activity, index) => {\n                  const ActivityIcon = getActivityIcon(activity.type);\n                  const iconColor = getActivityColor(activity.type);\n                  \n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.8 + index * 0.1 }}\n                      className=\"flex items-start space-x-3\"\n                    >\n                      <div className=\"p-2 rounded-lg bg-purple-100\">\n                        <ActivityIcon className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm text-gray-900\">\n                          {activity.description}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {formatDate(activity.timestamp)}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Recommandations IA pour Partenaires */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.9 }}\n          className=\"mt-8\"\n        >\n          <Card className=\"bg-gradient-to-r from-purple-50 to-indigo-50 border-purple-200\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"bg-purple-100 p-2 rounded-lg\">\n                  <Zap className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  Recommandations IA pour Maximiser votre Partenariat\n                </h3>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-white rounded-lg border border-purple-200\">\n                  <h4 className=\"font-medium text-purple-900 mb-2\">\n                    ≡ƒÄ» Opportunit├⌐s de Networking\n                  </h4>\n                  <p className=\"text-sm text-purple-700\">\n                    15 prospects VIP identifi├⌐s pour des partenariats strat├⌐giques\n                  </p>\n                </div>\n                \n                <div className=\"p-4 bg-white rounded-lg border border-purple-200\">\n                  <h4 className=\"font-medium text-purple-900 mb-2\">\n                    ≡ƒôê Optimisation ROI\n                  </h4>\n                  <p className=\"text-sm text-purple-700\">\n                    Sponsoriser 2 conf├⌐rences suppl├⌐mentaires pourrait augmenter votre ROI de 35%\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\events\\EventsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8355,8358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8355,8358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":395,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16004,16007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16004,16007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  Video,\n  Filter,\n  Search,\n  Star,\n  ExternalLink\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useEventStore } from '../../store/eventStore';\nimport { motion } from 'framer-motion';\n\nexport const EventsPage: React.FC = () => {\n  const {\n    events,\n    featuredEvents,\n    registeredEvents,\n    isLoading,\n    fetchEvents,\n    registerForEvent,\n    unregisterFromEvent\n  } = useEventStore();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedType, setSelectedType] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    fetchEvents();\n  }, [fetchEvents]);\n\n  const categories = [\n    'Digital Transformation',\n    'Networking',\n    'Sustainability',\n    'Data Management',\n    'Maritime Transport'\n  ];\n\n  const eventTypes = [\n    { value: 'conference', label: 'Conf├⌐rence' },\n    { value: 'webinar', label: 'Webinaire' },\n    { value: 'roundtable', label: 'Table Ronde' },\n    { value: 'networking', label: 'R├⌐seautage' },\n    { value: 'workshop', label: 'Atelier' }\n  ];\n\n  const filteredEvents = events.filter(event => {\n    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         event.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || event.category === selectedCategory;\n    const matchesType = !selectedType || event.type === selectedType;\n    \n    return matchesSearch && matchesCategory && matchesType;\n  });\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      weekday: 'long',\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }).format(date);\n  };\n\n  const formatTime = (time: string) => {\n    return time;\n  };\n\n  const getEventTypeIcon = (type: string) => {\n    switch (type) {\n      case 'webinar': return Video;\n      case 'networking': return Users;\n      case 'roundtable': return Users;\n      case 'workshop': return Users;\n      case 'conference': return Calendar;\n      default: return Calendar;\n    }\n  };\n\n  const getEventTypeLabel = (type: string) => {\n    const typeObj = eventTypes.find(t => t.value === type);\n    return typeObj ? typeObj.label : type;\n  };\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'webinar': return 'info';\n      case 'networking': return 'success';\n      case 'roundtable': return 'warning';\n      case 'workshop': return 'error';\n      case 'conference': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const handleEventRegistration = async (eventId: string) => {\n    if (registeredEvents.includes(eventId)) {\n      await unregisterFromEvent(eventId);\n    } else {\n      await registerForEvent(eventId);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              ├ëv├⌐nements SIPORTS 2026\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Participez aux conf├⌐rences, webinaires et sessions de r├⌐seautage \n              organis├⌐s durant le salon\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Rechercher un ├⌐v├⌐nement...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFilters(!showFilters)}\n            >\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filtres\n            </Button>\n          </div>\n\n          {/* Filters */}\n          {showFilters && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              className=\"mt-4 p-4 bg-gray-50 rounded-lg\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Cat├⌐gorie\n                  </label>\n                  <select\n                    value={selectedCategory}\n                    onChange={(e) => setSelectedCategory(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Toutes les cat├⌐gories</option>\n                    {categories.map(category => (\n                      <option key={category} value={category}>\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Type d'├⌐v├⌐nement\n                  </label>\n                  <select\n                    value={selectedType}\n                    onChange={(e) => setSelectedType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Tous les types</option>\n                    {eventTypes.map(type => (\n                      <option key={type.value} value={type.value}>\n                        {type.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Featured Events */}\n        {featuredEvents.length > 0 && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n              ├ëv├⌐nements ├á la Une\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {featuredEvents.slice(0, 2).map((event, index) => {\n                const EventIcon = getEventTypeIcon(event.type);\n                const isRegistered = registeredEvents.includes(event.id);\n                \n                return (\n                  <motion.div\n                    key={event.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Card hover className=\"h-full\">\n                      <div className=\"relative\">\n                        {event.featured && (\n                          <div className=\"absolute top-4 right-4\">\n                            <Star className=\"h-5 w-5 text-yellow-500 fill-current\" />\n                          </div>\n                        )}\n                        \n                        <div className=\"p-6\">\n                          <div className=\"flex items-start space-x-4 mb-4\">\n                            <div className=\"bg-blue-100 p-3 rounded-lg\">\n                              <EventIcon className=\"h-6 w-6 text-blue-600\" />\n                            </div>\n                            \n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <Badge \n                                  variant={getEventTypeColor(event.type) as any}\n                                  size=\"sm\"\n                                >\n                                  {getEventTypeLabel(event.type)}\n                                </Badge>\n                                {event.virtual && (\n                                  <Badge variant=\"info\" size=\"sm\">\n                                    <Video className=\"h-3 w-3 mr-1\" />\n                                    Virtuel\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                                {event.title}\n                              </h3>\n                              \n                              <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                                {event.description}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          {/* Event Details */}\n                          <div className=\"space-y-2 mb-6\">\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Calendar className=\"h-4 w-4 mr-2\" />\n                              <span>{formatDate(event.date)}</span>\n                            </div>\n                            \n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Clock className=\"h-4 w-4 mr-2\" />\n                              <span>{formatTime(event.startTime)} - {formatTime(event.endTime)}</span>\n                            </div>\n                            \n                            {event.location && (\n                              <div className=\"flex items-center text-sm text-gray-600\">\n                                <MapPin className=\"h-4 w-4 mr-2\" />\n                                <span>{event.location}</span>\n                              </div>\n                            )}\n                            \n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Users className=\"h-4 w-4 mr-2\" />\n                              <span>{event.registered}/{event.capacity} participants</span>\n                            </div>\n                          </div>\n                          \n                          {/* Speakers */}\n                          {event.speakers.length > 0 && (\n                            <div className=\"mb-6\">\n                              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n                                Intervenants :\n                              </h4>\n                              <div className=\"flex flex-wrap gap-2\">\n                                {event.speakers.map(speaker => (\n                                  <div key={speaker.id} className=\"text-sm text-gray-600\">\n                                    {speaker.name} - {speaker.company}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Actions */}\n                          <div className=\"flex space-x-3\">\n                            <Button\n                              onClick={() => handleEventRegistration(event.id)}\n                              variant={isRegistered ? 'outline' : 'primary'}\n                              className=\"flex-1\"\n                            >\n                              {isRegistered ? 'Se d├⌐sinscrire' : 'S\\'inscrire'}\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                const shareData = {\n                                  title: event.title,\n                                  text: event.description,\n                                  url: window.location.href + '#event-' + event.id\n                                };\n                                \n                                if (navigator.share) {\n                                  navigator.share(shareData);\n                                } else {\n                                  navigator.clipboard.writeText(shareData.url);\n                                  alert('≡ƒöù Lien de l\\'├⌐v├⌐nement copi├⌐ !');\n                                }\n                              }}\n                              title=\"Partager cet ├⌐v├⌐nement\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* All Events */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              Tous les ├ëv├⌐nements ({filteredEvents.length})\n            </h2>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3, 4, 5, 6].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-white rounded-lg p-6 h-80\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredEvents.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Aucun ├⌐v├⌐nement trouv├⌐\n              </h3>\n              <p className=\"text-gray-600\">\n                Essayez de modifier vos crit├¿res de recherche\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredEvents.map((event, index) => {\n                const EventIcon = getEventTypeIcon(event.type);\n                const isRegistered = registeredEvents.includes(event.id);\n                \n                return (\n                  <motion.div\n                    key={event.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                  >\n                    <Card hover className=\"h-full\">\n                      <div className=\"p-6\">\n                        <div className=\"flex items-start space-x-3 mb-4\">\n                          <div className=\"bg-blue-100 p-2 rounded-lg\">\n                            <EventIcon className=\"h-5 w-5 text-blue-600\" />\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <Badge \n                                variant={getEventTypeColor(event.type) as any}\n                                size=\"sm\"\n                              >\n                                {getEventTypeLabel(event.type)}\n                              </Badge>\n                              {event.virtual && (\n                                <Badge variant=\"info\" size=\"sm\">Virtuel</Badge>\n                              )}\n                            </div>\n                            \n                            <h3 className=\"font-semibold text-gray-900 mb-2\">\n                              {event.title}\n                            </h3>\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                          {event.description}\n                        </p>\n                        \n                        {/* Event Info */}\n                        <div className=\"space-y-2 mb-4\">\n                          <div className=\"flex items-center text-xs text-gray-500\">\n                            <Calendar className=\"h-3 w-3 mr-2\" />\n                            <span>{formatDate(event.date)}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center text-xs text-gray-500\">\n                            <Clock className=\"h-3 w-3 mr-2\" />\n                            <span>{formatTime(event.startTime)} - {formatTime(event.endTime)}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center text-xs text-gray-500\">\n                            <Users className=\"h-3 w-3 mr-2\" />\n                            <span>{event.registered}/{event.capacity}</span>\n                          </div>\n                        </div>\n                        \n                        {/* Action */}\n                        <Button\n                          onClick={() => handleEventRegistration(event.id)}\n                          variant={isRegistered ? 'outline' : 'primary'}\n                          size=\"sm\"\n                          className=\"w-full\"\n                        >\n                          {isRegistered ? 'Inscrit' : 'S\\'inscrire'}\n                        </Button>\n                      </div>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\exhibitor\\ExhibitorDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_user' is assigned a value but never used.","line":30,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  MapPin,\n  Calendar,\n  MessageCircle,\n  Download,\n  Share2,\n  Star,\n  Award,\n  Clock,\n  Building2,\n  Eye,\n  Heart,\n  Target,\n  Zap,\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useExhibitorStore } from '../../store/exhibitorStore';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\nimport useAuthStore from '../../store/authStore';\n\nexport const ExhibitorDetailPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const { exhibitors, selectExhibitor, selectedExhibitor, fetchExhibitors } = useExhibitorStore();\n  const { user: _user } = useAuthStore();\n  // activeTab temporairement retir├⌐ (non utilis├⌐)\n\n  useEffect(() => {\n    // Charger les exposants si pas encore charg├⌐s\n    if (exhibitors.length === 0) {\n      fetchExhibitors();\n    }\n  }, [exhibitors.length, fetchExhibitors]);\n\n  useEffect(() => {\n    if (id) {\n      selectExhibitor(id);\n    }\n  }, [id, selectExhibitor, exhibitors]);\n\n  // Afficher loading pendant le chargement\n  if (exhibitors.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Chargement de l'exposant...\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n  // V├⌐rifier si l'exposant existe\n  if (!selectedExhibitor && id) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Exposant non trouv├⌐\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            L'exposant avec l'ID \"{id}\" n'existe pas ou a ├⌐t├⌐ supprim├⌐.\n          </p>\n          <Link to=\"/exhibitors\">\n            <Button>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour aux exposants\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // local non-null alias pour simplifier les acc├¿s (apr├¿s la garde)\n  const exhibitor = selectedExhibitor!;\n\n  // Mock data enrichie pour le mini-site avanc├⌐\n  const miniSiteData = {\n    hero: {\n      title: exhibitor.companyName,\n      subtitle: exhibitor.description,\n      description: exhibitor.description + ' Notre \\u00e9quipe d\\'experts d\\u00e9veloppe des solutions innovantes pour optimiser les op\\u00e9rations portuaires et am\\u00e9liorer l\\'efficacit\\u00e9 des cha\\u00eenes logistiques.',\n      backgroundImage: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1200',\n      ctaText: 'D├⌐couvrir nos solutions',\n      stats: [\n        { number: '20+', label: 'Ann├⌐es d\\'exp├⌐rience' },\n        { number: '150+', label: 'Ports ├⌐quip├⌐s' },\n        { number: '40+', label: 'Pays' },\n        { number: '500+', label: 'Clients satisfaits' }\n      ]\n    },\n    about: {\n      title: 'Notre expertise',\n  description: exhibitor.description + ' Notre ├⌐quipe d\\'experts d├⌐veloppe des solutions innovantes pour optimiser les op├⌐rations portuaires et am├⌐liorer l\\'efficacit├⌐ des cha├«nes logistiques.',\n      features: [\n        'Solutions innovantes',\n        'Expertise reconnue',\n        'Support 24/7',\n        'Pr├⌐sence internationale'\n      ],\n      certifications: [\n        'ISO 9001:2015',\n        'ISO 14001:2015',\n        'OHSAS 18001',\n        'Port Security Certified'\n      ]\n    },\n    news: [\n      {\n        id: '1',\n        title: 'Nouveau partenariat avec le Port de Rotterdam',\n        excerpt: 'Nous sommes fiers d\\'annoncer notre nouveau partenariat strat├⌐gique pour la digitalisation des op├⌐rations portuaires.',\n        date: '2024-01-15',\n        image: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=300',\n        category: 'Partenariat'\n      },\n      {\n        id: '2',\n        title: 'Lancement de la version 3.0 de SmartPort',\n        excerpt: 'La nouvelle version apporte des fonctionnalit├⌐s r├⌐volutionnaires d\\'intelligence artificielle et d\\'automatisation.',\n        date: '2024-01-10',\n        image: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=300',\n        category: 'Innovation'\n      }\n    ],\n    gallery: [\n      'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400'\n    ],\n    testimonials: [\n      {\n        name: 'Jean Dupont',\n        position: 'Directeur Technique',\n        company: 'Port de Marseille',\n        comment: 'Une solution exceptionnelle qui a transform├⌐ nos op├⌐rations portuaires. L\\'├⌐quipe de Port Solutions Inc. nous a accompagn├⌐s avec professionnalisme.',\n        avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100',\n        rating: 5\n      },\n      {\n        name: 'Maria Santos',\n        position: 'CEO',\n        company: 'Barcelona Port Authority',\n        comment: 'Innovation remarquable et support technique exceptionnel. Nous recommandons vivement leurs solutions.',\n        avatar: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=100',\n        rating: 5\n      }\n    ]\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('fr-FR', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation Sticky */}\n      <nav className=\"sticky top-0 z-50 bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Bouton de retour */}\n            <Link to=\"/exhibitors\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour aux exposants\n              </Button>\n            </Link>\n            \n            <div className=\"flex items-center space-x-3\">\n              <img\n                src={exhibitor.logo}\n                alt={exhibitor.companyName}\n                className=\"h-10 w-10 rounded-lg object-cover\"\n              />\n              <span className=\"font-bold text-gray-900\">{exhibitor.companyName}</span>\n            </div>\n            \n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#accueil\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">Accueil</a>\n              <a href=\"#apropos\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">├Ç propos</a>\n              <a href=\"#produits\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">Produits</a>\n              <a href=\"#actualites\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">Actualit├⌐s</a>\n              <a href=\"#galerie\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">Galerie</a>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button size=\"sm\">\n                <MessageCircle className=\"h-4 w-4 mr-2\" />\n                Contact\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Share2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section id=\"accueil\" className=\"relative h-96 bg-cover bg-center\" style={{\n        backgroundImage: `url(${miniSiteData.hero.backgroundImage})`\n      }}>\n        <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-white max-w-2xl\"\n          >\n            <h1 className=\"text-4xl lg:text-6xl font-bold mb-4\">\n              {miniSiteData.hero.title}\n            </h1>\n            <p className=\"text-xl mb-8 opacity-90\">\n              {miniSiteData.hero.subtitle}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n              <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-blue-50\">\n                <Zap className=\"h-4 w-4 mr-2\" />\n                {miniSiteData.hero.ctaText}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-white text-white hover:bg-white hover:text-blue-600\"\n                onClick={() => {\n                  const catalogData = {\n                    company: exhibitor.companyName,\n                    products: exhibitor.products.length || 0,\n                    pages: 24,\n                    size: '2.4 MB'\n                  };\n\n                  // Simulation du t├⌐l├⌐chargement\n                  const link = document.createElement('a');\n                  link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvUGFnZXMKL0tpZHMgWzMgMCBSXQovQ291bnQgMQo+PgplbmRvYmoKMyAwIG9iago8PAovVHlwZSAvUGFnZQovUGFyZW50IDIgMCBSCi9NZWRpYUJveCBbMCAwIDYxMiA3OTJdCj4+CmVuZG9iago=';\n                  link.download = `catalogue-${catalogData.company?.toLowerCase().replace(/\\s+/g, '-')}.pdf`;\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n\n                  toast('≡ƒôÑ T├⌐l├⌐chargement d├⌐marr├⌐...', { icon: '≡ƒôÑ' });\n                }}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                T├⌐l├⌐charger catalogue\n              </Button>\n            </div>\n            \n            {/* Stats Hero */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              {miniSiteData.hero.stats.map((stat, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.2 + index * 0.1 }}\n                  className=\"text-center bg-white bg-opacity-10 backdrop-blur-sm rounded-lg p-3\"\n                >\n                  <div className=\"text-2xl font-bold text-white mb-1\">\n                    {stat.number}\n                  </div>\n                  <div className=\"text-white text-sm opacity-90\">{stat.label}</div>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"apropos\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {miniSiteData.about.title}\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n              {miniSiteData.about.description}\n            </p>\n          </motion.div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            {miniSiteData.about.features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n                className=\"text-center p-6 bg-white rounded-lg shadow-sm\"\n              >\n                <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-4\">\n                  <Award className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900\">{feature}</h3>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Certifications */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center\"\n          >\n            <h3 className=\"text-xl font-bold text-gray-900 mb-6\">\n              Certifications & Accr├⌐ditations\n            </h3>\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              {miniSiteData.about.certifications.map((cert, index) => (\n                <Badge key={index} variant=\"success\" className=\"px-4 py-2\">\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  {cert}\n                </Badge>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Products Section */}\n      <section id=\"produits\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Nos Produits & Services\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              D├⌐couvrez notre gamme compl├¿te de solutions portuaires innovantes\n            </p>\n          </motion.div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {exhibitor.products.map((product, index) => (\n              <motion.div\n                key={product.id}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card hover className=\"h-full\">\n                  <img\n                    src={product.images[0]}\n                    alt={product.name}\n                    className=\"w-full h-48 object-cover rounded-t-lg\"\n                  />\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"info\" size=\"sm\">\n                        {product.category}\n                      </Badge>\n                      {product.featured && (\n                        <Badge variant=\"warning\" size=\"sm\">\n                          <Star className=\"h-3 w-3 mr-1\" />\n                          Vedette\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                      {product.name}\n                    </h3>\n                    \n                    <p className=\"text-gray-600 mb-4\">\n                      {product.description}\n                    </p>\n                    \n                    {product.specifications && (\n                      <div className=\"mb-4\">\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Sp├⌐cifications :</h4>\n                        <p className=\"text-sm text-gray-600\">{product.specifications}</p>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex space-x-3\">\n                      <Button size=\"sm\" className=\"flex-1\"\n                        onClick={() => {\n                          // Rediriger vers la section contact avec le produit s├⌐lectionn├⌐\n                          const contactSection = document.getElementById('contact');\n                          if (contactSection) {\n                            contactSection.scrollIntoView({ behavior: 'smooth' });\n                            \n                            // Pr├⌐remplir le formulaire avec les donn├⌐es du produit\n                            setTimeout(() => {\n                              const subjectField = document.querySelector('select[name=\"subject\"]') as HTMLSelectElement;\n                              const messageField = document.querySelector('textarea[name=\"message\"]') as HTMLTextAreaElement;\n                              \n                              if (subjectField) {\n                                subjectField.value = 'quote';\n                              }\n                              \n                              if (messageField) {\n                                messageField.value = `Demande de devis pour : ${product.name}\\n\\nCat├⌐gorie : ${product.category}\\nSp├⌐cifications : ${product.specifications || '├Ç d├⌐finir'}\\n\\nMerci de me faire parvenir un devis d├⌐taill├⌐ pour ce produit.`;\n                              }\n                              \n                              // Mettre en ├⌐vidence les champs\n                              subjectField?.focus();\n                            }, 500);\n                          }\n                        }}\n                      >\n                        <Target className=\"h-4 w-4 mr-2\" />\n                        Demander un devis\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\"\n                        onClick={() => {\n                          const docData = {\n                            product: product.name,\n                            type: 'Fiche technique PDF',\n                            size: '1.2 MB'\n                          };\n                          \n                          // Simulation t├⌐l├⌐chargement\n                          const link = document.createElement('a');\n                          link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEK';\n                          link.download = `fiche-${docData.product.toLowerCase().replace(/\\s+/g, '-')}.pdf`;\n                          document.body.appendChild(link);\n                          link.click();\n                          document.body.removeChild(link);\n                          \n                          toast('≡ƒôä T├⌐l├⌐chargement de la fiche technique en cours...', { icon: '≡ƒôä' });\n                        }}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <Link to={`/appointments?exhibitor=${exhibitor.id}`}>\n                      RDV\n                    </Link>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* News Section */}\n      <section id=\"actualites\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Actualit├⌐s & Innovations\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              Restez inform├⌐ de nos derni├¿res nouvelles et innovations\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {miniSiteData.news.map((article, index) => (\n              <motion.div\n                key={article.id}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card hover>\n                  <img\n                    src={article.image}\n                    alt={article.title}\n                    className=\"w-full h-48 object-cover rounded-t-lg\"\n                  />\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"success\" size=\"sm\">\n                        {article.category}\n                      </Badge>\n                      <span className=\"text-sm text-gray-500 flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {formatDate(article.date)}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Gallery Section */}\n      <section id=\"galerie\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Galerie & R├⌐alisations\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              D├⌐couvrez nos projets et r├⌐alisations en images\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {miniSiteData.gallery.map((image, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, scale: 0.8 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n                className=\"aspect-square overflow-hidden rounded-lg cursor-pointer hover:scale-105 transition-transform shadow-lg\"\n              >\n                <img\n                  src={image}\n                  alt={`R├⌐alisation ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              T├⌐moignages Clients\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              Ce que disent nos partenaires de nos solutions\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {miniSiteData.testimonials.map((testimonial, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card className=\"h-full\">\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <img\n                        src={testimonial.avatar}\n                        alt={testimonial.name}\n                        className=\"h-12 w-12 rounded-full object-cover\"\n                      />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{testimonial.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{testimonial.position}</p>\n                        <p className=\"text-sm text-gray-500\">{testimonial.company}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center mb-3\">\n                      {[...Array(testimonial.rating)].map((_, i) => (\n                        <Star key={i} className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                      ))}\n                    </div>\n                    \n                    <p className=\"text-gray-700 italic\">\n                      \"{testimonial.comment}\"\n                    </p>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl font-bold mb-4\">\n              Pr├¬t ├á transformer vos op├⌐rations portuaires ?\n            </h2>\n            <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n              Rejoignez plus de 500 ports dans le monde qui font confiance ├á nos solutions\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-blue-50\"\n                onClick={() => {\n                  const demoData = {\n                    company: selectedExhibitor?.companyName,\n                    products: selectedExhibitor?.products.length || 0,\n                    duration: '30 minutes',\n                    format: 'D├⌐monstration interactive'\n                  };\n                  \n                  toast.success(`≡ƒÄ» D├⌐monstration programm├⌐e pour ${demoData.company}`);\n                }}\n              >\n                <Target className=\"h-5 w-5 mr-2\" />\n                Demander une d├⌐monstration\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white hover:text-blue-600\"\n                onClick={() => {\n                  const catalogData = {\n                    company: selectedExhibitor?.companyName,\n                    products: selectedExhibitor?.products.length || 0,\n                    pages: 48,\n                    size: '5.2 MB',\n                    format: 'PDF Haute Qualit├⌐'\n                  };\n                  \n                  // Simulation t├⌐l├⌐chargement\n                  const link = document.createElement('a');\n                  link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEK';\n                  link.download = `catalogue-complet-${catalogData.company?.toLowerCase().replace(/\\s+/g, '-')}.pdf`;\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                  \n                  toast('≡ƒôª T├⌐l├⌐chargement du catalogue complet d├⌐marr├⌐', { icon: '≡ƒôª' });\n                }}\n              >\n                <Download className=\"h-5 w-5 mr-2\" />\n                T├⌐l├⌐charger notre catalogue\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer Mini-Site */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Company Info */}\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n        <img\n          src={exhibitor.logo}\n          alt={exhibitor.companyName}\n          className=\"h-10 w-10 rounded-lg\"\n        />\n        <span className=\"font-bold text-xl\">{exhibitor.companyName}</span>\n              </div>\n              <p className=\"text-gray-400 mb-4\">\n                {exhibitor.description}\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"success\" size=\"sm\">\n                  <Eye className=\"h-3 w-3 mr-1\" />\n                  {exhibitor.miniSite.views} vues\n                </Badge>\n              </div>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">Liens rapides</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#apropos\" className=\"text-gray-400 hover:text-white transition-colors\">├Ç propos</a></li>\n                <li><a href=\"#produits\" className=\"text-gray-400 hover:text-white transition-colors\">Produits</a></li>\n                <li><a href=\"#actualites\" className=\"text-gray-400 hover:text-white transition-colors\">Actualit├⌐s</a></li>\n              </ul>\n            </div>\n\n            {/* SIPORTS Info */}\n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">SIPORTS 2026</h4>\n              <div className=\"space-y-2 text-sm text-gray-400\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>5-7 F├⌐vrier 2026</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>El Jadida, Maroc</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Building2 className=\"h-4 w-4\" />\n                  <span>Stand {exhibitor.id === '1' ? 'A-12' : exhibitor.id === '2' ? 'B-08' : 'C-15'}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\">\n              ┬⌐ 2024 {exhibitor.companyName}. Tous droits r├⌐serv├⌐s.\n            </p>\n            <p className=\"text-sm text-gray-500 mt-4 md:mt-0\">\n              Propuls├⌐ par SIPORTS 2026\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <div className=\"flex flex-col space-y-3\">\n          <Link to={`/appointments?exhibitor=${exhibitor.id}`}>\n            <Button \n              className=\"rounded-full w-12 h-12 shadow-lg\"\n              title=\"Informations de contact\"\n              onClick={() => toast.success(`Contact: ${exhibitor.companyName} ΓÇö contact@portsolutions.com`)}\n            >\n              <MessageCircle className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n      <Link to={`/appointments?exhibitor=${exhibitor.id}`}>\n            <Button \n              variant=\"outline\" \n              className=\"rounded-full w-12 h-12 shadow-lg bg-white\"\n              title=\"Prendre rendez-vous\"\n              onClick={(e) => {\n                e.preventDefault();\n        window.location.href = `/networking?action=schedule&exhibitor=${exhibitor.id}&source=exhibitor-detail`;\n              }}\n            >\n              <Calendar className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <Button \n            variant=\"outline\" \n            className=\"rounded-full w-12 h-12 shadow-lg bg-white\"\n            onClick={() => {\n              const favorites = JSON.parse(localStorage.getItem('siports-favorites') || '[]');\n              const isFavorite = favorites.includes(exhibitor.id);\n\n              if (isFavorite) {\n                const newFavorites = favorites.filter((id: string) => id !== exhibitor.id);\n                localStorage.setItem('siports-favorites', JSON.stringify(newFavorites));\n                toast.success(`Favoris mis ├á jour ΓÇö retir├⌐: ${exhibitor.companyName}`);\n              } else {\n                favorites.push(exhibitor.id);\n                localStorage.setItem('siports-favorites', JSON.stringify(favorites));\n                toast.success(`Favoris mis ├á jour ΓÇö ajout├⌐: ${exhibitor.companyName}`);\n              }\n            }}\n            title=\"Ajouter/Retirer des favoris\"\n          >\n            <Heart className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\home\\FeaturedExhibitors.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4846,4849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4846,4849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Link } from 'react-router-dom';\nimport { ExternalLink, MapPin, Users, ArrowRight, Calendar, CheckCircle, Eye, MessageCircle } from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { useExhibitorStore } from '../../store/exhibitorStore';\nimport { motion } from 'framer-motion';\n\nexport const FeaturedExhibitors: React.FC = () => {\n  const { exhibitors, fetchExhibitors, isLoading } = useExhibitorStore();\n  const featuredExhibitors = exhibitors.filter(e => e.featured).slice(0, 4);\n\n  useEffect(() => {\n    if (exhibitors.length === 0) {\n      fetchExhibitors();\n    }\n  }, [exhibitors.length, fetchExhibitors]);\n\n  const getCategoryLabel = (category: string) => {\n    const labels = {\n      'institutional': 'Institutionnel',\n      'port-industry': 'Industrie Portuaire',\n      'port-operations': 'Exploitation & Gestion',\n      'academic': 'Acad├⌐mique & Formation'\n    };\n    return labels[category as keyof typeof labels] || category;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      'institutional': 'success',\n      'port-industry': 'error',\n      'port-operations': 'info',\n      'academic': 'warning'\n    };\n    return colors[category as keyof typeof colors] || 'default';\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Exposants ├á la Une\n            </h2>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-white rounded-lg p-6 h-80\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Exposants ├á la Une\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              D├⌐couvrez les leaders de l'industrie portuaire qui participent au salon SIPORTS 2026\n            </p>\n          </motion.div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n          {featuredExhibitors.map((exhibitor, index) => (\n            <motion.div\n              key={exhibitor.id}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: index * 0.1 }}\n              viewport={{ once: true }}\n            >\n              <Card hover className=\"h-full\">\n                <div className=\"flex flex-col h-full p-6\">\n                  {/* Header */}\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <img\n                        src={exhibitor.logo}\n                        alt={exhibitor.companyName}\n                        className=\"h-14 w-14 rounded-xl object-cover border-2 border-gray-100\"\n                      />\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 text-lg\">\n                          {exhibitor.companyName}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 font-medium\">{exhibitor.sector}</p>\n                      </div>\n                    </div>\n                    {exhibitor.verified && (\n                      <Badge variant=\"success\" size=\"sm\" className=\"flex items-center\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        V├⌐rifi├⌐\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Category */}\n                  <div className=\"mb-4\">\n                    <Badge \n                      variant={getCategoryColor(exhibitor.category) as any}\n                      size=\"sm\"\n                      className=\"font-medium\"\n                    >\n                      {getCategoryLabel(exhibitor.category)}\n                    </Badge>\n                  </div>\n\n                  {/* Description */}\n                  <p className=\"text-gray-700 text-sm mb-6 flex-grow line-clamp-3 leading-relaxed\">\n                    {exhibitor.description}\n                  </p>\n\n                  {/* Stats */}\n                  <div className=\"flex items-center justify-between text-sm text-gray-600 mb-6 bg-gray-50 p-3 rounded-lg\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"h-4 w-4 text-blue-500\" />\n                      <span>{exhibitor.miniSite.views} vues</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <MapPin className=\"h-4 w-4 text-green-500\" />\n                      <span>{exhibitor.products.length} produits</span>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex flex-col space-y-2\">\n                    <Link to={`/exhibitors/${exhibitor.id}`} className=\"flex-1\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-center\">\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        Voir le Profil\n                      </Button>\n                    </Link>\n                    <div className=\"flex space-x-2\">\n                      <Link to={`/appointments?exhibitor=${exhibitor.id}`} className=\"flex-1\">\n                        <Button \n                          size=\"sm\" \n                          className=\"w-full justify-center\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            window.location.href = `/networking?action=connect&exhibitor=${exhibitor.id}&source=homepage`;\n                          }}\n                        >\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Prendre RDV\n                        </Button>\n                      </Link>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          const contactData = {\n                            company: exhibitor.companyName,\n                            sector: exhibitor.sector,\n                            products: exhibitor.products.length,\n                            contact: 'contact@' + exhibitor.companyName.toLowerCase().replace(/\\s+/g, '') + '.com'\n                          };\n                          \n                          toast.success(`≡ƒÆ¼ Contact : ${contactData.company} ΓÇö ${contactData.contact}`);\n                        }}\n                        title=\"Contacter directement\"\n                      >\n                        <MessageCircle className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* CTA */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center\"\n        >\n          <Link to=\"/exhibitors\">\n            <Button size=\"lg\">\n              Voir Tous les Exposants\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </motion.div>\n      </div>\n    </section>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\home\\HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\home\\NetworkingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\layout\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\layout\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\metrics\\MetricsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":72,"column":49,"nodeType":"Identifier","endLine":72,"endColumn":57},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":200,"column":3,"nodeType":"Identifier","endLine":200,"endColumn":12}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  BarChart3, \n  TrendingUp, \n  Users, \n  Building2, \n  Calendar, \n  Globe,\n  Target,\n  Award,\n  Activity,\n  Eye,\n  MessageCircle,\n  Handshake,\n  Shield,\n  ArrowLeft\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { motion } from 'framer-motion';\nimport useAuthStore from '../../store/authStore';\n\ninterface MetricCard {\n  title: string;\n  value: string;\n  target: string;\n  progress: number;\n  icon: any;\n  color: string;\n  bgColor: string;\n  trend: 'up' | 'down' | 'stable';\n  trendValue: string;\n}\n\ninterface PavilionMetric {\n  name: string;\n  exhibitors: number;\n  visitors: number;\n  conferences: number;\n  satisfaction: number;\n  color: string;\n}\n\nexport const MetricsPage: React.FC = () => {\n  const { user } = useAuthStore();\n\n  // Rediriger si l'utilisateur n'est pas admin\n  if (user?.type !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Acc├¿s Restreint - Administrateurs Uniquement\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Cette section est r├⌐serv├⌐e aux administrateurs SIPORTS\n          </p>\n          <Link to=\"/admin/dashboard\">\n            <Button>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Tableau de Bord\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const [realTimeMetrics, setRealTimeMetrics] = useState({\n    activeUsers: 1247,\n    onlineExhibitors: 89,\n    scheduledMeetings: 156,\n    messagesExchanged: 2341\n  });\n\n  const keyMetrics: MetricCard[] = [\n    {\n      title: 'Exposants',\n      value: '330',\n      target: '300+',\n      progress: 110,\n      icon: Building2,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-100',\n      trend: 'up',\n      trendValue: '+10%'\n    },\n    {\n      title: 'Visiteurs Professionnels',\n      value: '6,300',\n      target: '6,000+',\n      progress: 105,\n      icon: Users,\n      color: 'text-green-600',\n      bgColor: 'bg-green-100',\n      trend: 'up',\n      trendValue: '+5%'\n    },\n    {\n      title: 'Conf├⌐rences & Panels',\n      value: '40',\n      target: '30+',\n      progress: 133,\n      icon: Calendar,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-100',\n      trend: 'up',\n      trendValue: '+33%'\n    },\n    {\n      title: 'Pays Repr├⌐sent├⌐s',\n      value: '42',\n      target: '40',\n      progress: 105,\n      icon: Globe,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-100',\n      trend: 'up',\n      trendValue: '+5%'\n    }\n  ];\n\n  const pavilionMetrics: PavilionMetric[] = [\n    {\n      name: 'Institutionnel & Networking B2B',\n      exhibitors: 85,\n      visitors: 1800,\n      conferences: 12,\n      satisfaction: 94,\n      color: 'bg-purple-500'\n    },\n    {\n      name: 'Industrie Portuaire',\n      exhibitors: 120,\n      visitors: 2200,\n      conferences: 8,\n      satisfaction: 92,\n      color: 'bg-blue-500'\n    },\n    {\n      name: 'Performance & Exploitation',\n      exhibitors: 65,\n      visitors: 1500,\n      conferences: 6,\n      satisfaction: 96,\n      color: 'bg-green-500'\n    },\n    {\n      name: 'Acad├⌐mique & Scientifique',\n      exhibitors: 45,\n      visitors: 800,\n      conferences: 10,\n      satisfaction: 98,\n      color: 'bg-orange-500'\n    },\n    {\n      name: 'Mus├⌐e des Ports',\n      exhibitors: 15,\n      visitors: 700,\n      conferences: 4,\n      satisfaction: 99,\n      color: 'bg-indigo-500'\n    }\n  ];\n\n  const engagementMetrics = [\n    {\n      title: 'Rendez-vous Programm├⌐s',\n      value: '2,847',\n      icon: Calendar,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50'\n    },\n    {\n      title: 'Messages ├ëchang├⌐s',\n      value: '15,432',\n      icon: MessageCircle,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50'\n    },\n    {\n      title: 'Connexions ├ëtablies',\n      value: '4,156',\n      icon: Handshake,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50'\n    },\n    {\n      title: 'Vues de Profils',\n      value: '28,934',\n      icon: Eye,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50'\n    }\n  ];\n\n  useEffect(() => {\n    // Simulation de mise ├á jour en temps r├⌐el\n    const interval = setInterval(() => {\n      setRealTimeMetrics(prev => ({\n        activeUsers: prev.activeUsers + Math.floor(Math.random() * 10) - 5,\n        onlineExhibitors: prev.onlineExhibitors + Math.floor(Math.random() * 4) - 2,\n        scheduledMeetings: prev.scheduledMeetings + Math.floor(Math.random() * 3),\n        messagesExchanged: prev.messagesExchanged + Math.floor(Math.random() * 20)\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Bouton de retour */}\n          <div className=\"mb-6\">\n            <Link to=\"/admin/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              M├⌐triques & Performance SIPORTS 2026\n            </h1>\n            <p className=\"text-gray-600\">\n              Suivi en temps r├⌐el des indicateurs cl├⌐s de performance du salon\n            </p>\n          </motion.div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* M├⌐triques Cl├⌐s */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n            Indicateurs Cl├⌐s de Performance\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {keyMetrics.map((metric, index) => {\n              const Icon = metric.icon;\n              return (\n                <motion.div\n                  key={metric.title}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className=\"relative overflow-hidden\">\n                    <div className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className={`${metric.bgColor} p-3 rounded-lg`}>\n                          <Icon className={`h-6 w-6 ${metric.color}`} />\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <TrendingUp className={`h-4 w-4 ${\n                            metric.trend === 'up' ? 'text-green-500' : \n                            metric.trend === 'down' ? 'text-red-500' : 'text-gray-500'\n                          }`} />\n                          <span className={`text-sm font-medium ${\n                            metric.trend === 'up' ? 'text-green-600' : \n                            metric.trend === 'down' ? 'text-red-600' : 'text-gray-600'\n                          }`}>\n                            {metric.trendValue}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mb-2\">\n                        <div className=\"text-3xl font-bold text-gray-900\">\n                          {metric.value}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          Objectif: {metric.target}\n                        </div>\n                      </div>\n                      \n                      <div className=\"mb-2\">\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600\">{metric.title}</span>\n                          <span className=\"text-gray-900 font-medium\">{metric.progress}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full ${\n                              metric.progress >= 100 ? 'bg-green-500' : \n                              metric.progress >= 80 ? 'bg-blue-500' : 'bg-yellow-500'\n                            }`}\n                            style={{ width: `${Math.min(metric.progress, 100)}%` }}\n                          />\n                        </div>\n                      </div>\n                      \n                      {metric.progress >= 100 && (\n                        <Badge variant=\"success\" size=\"sm\">\n                          <Target className=\"h-3 w-3 mr-1\" />\n                          Objectif Atteint\n                        </Badge>\n                      )}\n                    </div>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* M├⌐triques Temps R├⌐el */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n            Activit├⌐ en Temps R├⌐el\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.2 }}\n            >\n              <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Activity className=\"h-6 w-6\" />\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                      <span className=\"text-xs\">Live</span>\n                    </div>\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {realTimeMetrics.activeUsers.toLocaleString()}\n                  </div>\n                  <div className=\"text-blue-100 text-sm\">\n                    Utilisateurs Actifs\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.3 }}\n            >\n              <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Building2 className=\"h-6 w-6\" />\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                      <span className=\"text-xs\">Live</span>\n                    </div>\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {realTimeMetrics.onlineExhibitors}\n                  </div>\n                  <div className=\"text-green-100 text-sm\">\n                    Exposants En Ligne\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.4 }}\n            >\n              <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Calendar className=\"h-6 w-6\" />\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                      <span className=\"text-xs\">Live</span>\n                    </div>\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {realTimeMetrics.scheduledMeetings}\n                  </div>\n                  <div className=\"text-purple-100 text-sm\">\n                    RDV Programm├⌐s Aujourd'hui\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.5 }}\n            >\n              <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <MessageCircle className=\"h-6 w-6\" />\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n                      <span className=\"text-xs\">Live</span>\n                    </div>\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {realTimeMetrics.messagesExchanged.toLocaleString()}\n                  </div>\n                  <div className=\"text-orange-100 text-sm\">\n                    Messages ├ëchang├⌐s\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n\n        {/* Performance par Pavillon */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n            Performance par Pavillon\n          </h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {pavilionMetrics.map((pavilion, index) => (\n              <motion.div\n                key={pavilion.name}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card>\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className={`w-4 h-4 rounded-full ${pavilion.color}`} />\n                      <h3 className=\"font-semibold text-gray-900\">\n                        {pavilion.name}\n                      </h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {pavilion.exhibitors}\n                        </div>\n                        <div className=\"text-xs text-gray-600\">Exposants</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {pavilion.visitors.toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-gray-600\">Visiteurs</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-gray-900\">\n                          {pavilion.conferences}\n                        </div>\n                        <div className=\"text-xs text-gray-600\">Conf├⌐rences</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {pavilion.satisfaction}%\n                        </div>\n                        <div className=\"text-xs text-gray-600\">Satisfaction</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">Performance Globale</span>\n                      <Badge variant=\"success\" size=\"sm\">\n                        <Award className=\"h-3 w-3 mr-1\" />\n                        Excellent\n                      </Badge>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        {/* M├⌐triques d'Engagement */}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n            Engagement & Interactions\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {engagementMetrics.map((metric, index) => {\n              const Icon = metric.icon;\n              return (\n                <motion.div\n                  key={metric.title}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className={`${metric.bgColor} border-0`}>\n                    <div className=\"p-6 text-center\">\n                      <div className=\"flex justify-center mb-4\">\n                        <div className=\"bg-white p-3 rounded-full shadow-sm\">\n                          <Icon className={`h-6 w-6 ${metric.color}`} />\n                        </div>\n                      </div>\n                      <div className=\"text-2xl font-bold text-gray-900 mb-2\">\n                        {metric.value}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        {metric.title}\n                      </div>\n                    </div>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\minisite\\MiniSiteBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3082,3085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3082,3085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19497,19500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19497,19500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport {\n  Layout,\n  Image,\n  FileText,\n  Save,\n  Eye,\n  Smartphone,\n  Monitor,\n  Tablet,\n  Plus,\n  Trash2,\n  Settings,\n  ArrowLeft\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\n\ninterface Section {\n  id: string;\n  type: 'hero' | 'about' | 'products' | 'gallery' | 'contact' | 'news';\n  title: string;\n  content: any;\n  visible: boolean;\n  order: number;\n}\n\nexport const MiniSiteBuilder: React.FC = () => {\n  const [previewMode, setPreviewMode] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const [sections, setSections] = useState<Section[]>([\n    {\n      id: '1',\n      type: 'hero',\n      title: 'Section Hero',\n      content: {\n        title: 'Port Solutions Inc.',\n        subtitle: 'Leading provider of integrated port management solutions',\n        backgroundImage:\n          'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1200',\n        ctaText: 'D├⌐couvrir nos solutions',\n        ctaLink: '#products'\n      },\n      visible: true,\n      order: 0\n    },\n    {\n      id: '2',\n      type: 'about',\n      title: '├Ç propos',\n      content: {\n        title: 'Notre expertise',\n        description:\n          \"Avec plus de 20 ans d'exp├⌐rience dans le secteur portuaire, nous accompagnons les ports du monde entier dans leur transformation digitale.\",\n        features: ['Solutions innovantes', 'Expertise reconnue', 'Support 24/7', 'Pr├⌐sence internationale']\n      },\n      visible: true,\n      order: 1\n    },\n    {\n      id: '3',\n      type: 'products',\n      title: 'Produits & Services',\n      content: {\n        title: 'Nos solutions',\n        products: [\n          {\n            name: 'SmartPort Management',\n            description: 'Plateforme compl├¿te de gestion portuaire',\n            image:\n              'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n            features: ['Analytics temps r├⌐el', 'API int├⌐gr├⌐e', 'Multi-langues']\n          },\n          {\n            name: 'Port Analytics',\n            description: \"Outils d'analyse et de reporting avanc├⌐s\",\n            image:\n              'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400',\n            features: ['Dashboards personnalis├⌐s', 'Pr├⌐dictions IA', 'Export donn├⌐es']\n          }\n        ]\n      },\n      visible: true,\n      order: 2\n    }\n  ]);\n\n  const [siteSettings, setSiteSettings] = useState({\n    primaryColor: '#1e40af',\n    secondaryColor: '#3b82f6',\n    accentColor: '#60a5fa',\n    fontFamily: 'Inter',\n    logoUrl:\n      'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200'\n  });\n\n  const sectionTypes: { type: Section['type']; title: string; icon: any; description: string }[] = [\n    { type: 'hero', title: 'Section Hero', icon: Layout, description: \"Banni├¿re d'accueil avec titre et CTA\" },\n    { type: 'about', title: '├Ç propos', icon: FileText, description: 'Pr├⌐sentation de votre entreprise' },\n    { type: 'products', title: 'Produits', icon: Image, description: 'Catalogue de vos produits et services' },\n    { type: 'gallery', title: 'Galerie', icon: Image, description: 'Photos et vid├⌐os de votre entreprise' },\n    { type: 'news', title: 'Actualit├⌐s', icon: FileText, description: 'Derni├¿res nouvelles et annonces' }\n  ];\n\n  const addSection = (type: Section['type']) => {\n    const newSection: Section = {\n      id: Date.now().toString(),\n      type,\n      title: sectionTypes.find((s) => s.type === type)?.title || 'Nouvelle section',\n      content: getDefaultContent(type),\n      visible: true,\n      order: sections.length\n    };\n    setSections((prev) => [...prev, newSection]);\n    toast.success('Section ajout├⌐e');\n  };\n\n  const getDefaultContent = (type: Section['type']) => {\n    switch (type) {\n      case 'hero':\n        return { title: 'Votre titre', subtitle: 'Votre sous-titre', backgroundImage: '', ctaText: 'En savoir plus', ctaLink: '#' };\n      case 'about':\n        return { title: '├Ç propos de nous', description: 'D├⌐crivez votre entreprise ici...', features: [] };\n      case 'products':\n        return { title: 'Nos produits', products: [] };\n      case 'gallery':\n        return { title: 'Galerie', images: [] };\n      case 'news':\n        return { title: 'Actualit├⌐s', articles: [] };\n      default:\n        return {};\n    }\n  };\n\n  const removeSection = (id: string) => {\n    setSections((prev) => prev.filter((s) => s.id !== id));\n    toast.success('Section supprim├⌐e');\n  };\n\n  const toggleSectionVisibility = (id: string) => {\n    setSections((prev) => prev.map((s) => (s.id === id ? { ...s, visible: !s.visible } : s)));\n  };\n\n  // updateSectionContent kept out ΓÇö implement when inline editors are added\n\n  const getPreviewWidth = () => {\n    switch (previewMode) {\n      case 'mobile':\n        return 'w-80';\n      case 'tablet':\n        return 'w-96';\n      case 'desktop':\n        return 'w-full';\n      default:\n        return 'w-full';\n    }\n  };\n\n  const handlePreview = () => {\n    const previewData = {\n      url: `https://siports.com/minisite/preview/${Date.now()}`,\n      sections: sections.filter((s) => s.visible).length,\n      theme: siteSettings.fontFamily,\n      colors: siteSettings.primaryColor,\n      responsive: true,\n      seoOptimized: true,\n      loadTime: '1.2s',\n      mobileScore: '98/100'\n    };\n\n    const previewWindow = window.open('', '_blank', 'width=1200,height=800');\n    if (previewWindow) {\n      previewWindow.document.write(`\n        <html>\n          <head><title>Pr├⌐visualisation Mini-Site</title></head>\n          <body style=\"margin:0;padding:20px;font-family:${siteSettings.fontFamily}\">\n            <h1 style=\"color:${siteSettings.primaryColor}\">Pr├⌐visualisation Mini-Site</h1>\n            <p>Sections visibles: ${previewData.sections}</p>\n            <p>Th├¿me: ${previewData.theme}</p>\n            <p>Couleur principale: ${previewData.colors}</p>\n            <div style=\"background:${siteSettings.primaryColor};color:white;padding:20px;margin:20px 0;\">\n              <h2>Aper├ºu du design</h2>\n              <p>Votre mini-site avec les couleurs personnalis├⌐es</p>\n            </div>\n          </body>\n        </html>\n      `);\n      previewWindow.document.close();\n    }\n\n    toast.success('Pr├⌐visualisation g├⌐n├⌐r├⌐e et ouverte dans un nouvel onglet.');\n  };\n\n  const handleSave = () => {\n    const saveData = {\n      sections: sections.length,\n      visibleSections: sections.filter((s) => s.visible).length,\n      lastSaved: new Date().toLocaleTimeString('fr-FR'),\n      autoSave: true,\n      backup: true\n    };\n\n    // Simulate save\n    setTimeout(() => {\n      toast.success(`Mini-site sauvegard├⌐ (${saveData.lastSaved})`);\n    }, 400);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <Link to=\"/dashboard\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Tableau de Bord Exposant\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Cr├⌐ateur de Mini-Site</h1>\n            <p className=\"text-gray-600\">Personnalisez votre vitrine digitale pour SIPORTS 2026</p>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 bg-white rounded-lg p-1 shadow-sm\">\n              <button\n                onClick={() => setPreviewMode('desktop')}\n                className={`p-2 rounded ${previewMode === 'desktop' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Monitor className=\"h-4 w-4\" />\n              </button>\n              <button\n                onClick={() => setPreviewMode('tablet')}\n                className={`p-2 rounded ${previewMode === 'tablet' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Tablet className=\"h-4 w-4\" />\n              </button>\n              <button\n                onClick={() => setPreviewMode('mobile')}\n                className={`p-2 rounded ${previewMode === 'mobile' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Smartphone className=\"h-4 w-4\" />\n              </button>\n            </div>\n\n            <Button variant=\"outline\" onClick={handlePreview}>\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Pr├⌐visualiser\n            </Button>\n\n            <Button onClick={handleSave}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              Sauvegarder\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Settings className=\"h-4 w-4 mr-2\" /> Param├¿tres du site\n                </h3>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Couleur principale</label>\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"color\"\n                        value={siteSettings.primaryColor}\n                        onChange={(e) => setSiteSettings({ ...siteSettings, primaryColor: e.target.value })}\n                        className=\"w-8 h-8 rounded border border-gray-300\"\n                      />\n                      <input\n                        type=\"text\"\n                        value={siteSettings.primaryColor}\n                        onChange={(e) => setSiteSettings({ ...siteSettings, primaryColor: e.target.value })}\n                        className=\"flex-1 px-2 py-1 text-sm border border-gray-300 rounded\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Police</label>\n                    <select\n                      value={siteSettings.fontFamily}\n                      onChange={(e) => setSiteSettings({ ...siteSettings, fontFamily: e.target.value })}\n                      className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"Inter\">Inter</option>\n                      <option value=\"Roboto\">Roboto</option>\n                      <option value=\"Open Sans\">Open Sans</option>\n                      <option value=\"Lato\">Lato</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Plus className=\"h-4 w-4 mr-2\" /> Ajouter une section\n                </h3>\n\n                <div className=\"space-y-2\">\n                  {sectionTypes.map((sectionType) => (\n                    <button\n                      key={sectionType.type}\n                      onClick={() => addSection(sectionType.type)}\n                      className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <sectionType.icon className=\"h-4 w-4 text-gray-400\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{sectionType.title}</p>\n                          <p className=\"text-xs text-gray-500\">{sectionType.description}</p>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </Card>\n\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Sections ({sections.length})</h3>\n\n                <div className=\"space-y-2\">\n                  {sections.map((section) => (\n                    <div\n                      key={section.id}\n                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                        activeSection === section.id ? 'border-blue-300 bg-blue-50' : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => setActiveSection(section.id)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <span className=\"text-sm font-medium text-gray-900\">{section.title}</span>\n                        </div>\n\n                        <div className=\"flex items-center space-x-1\">\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleSectionVisibility(section.id);\n                            }}\n                            className={`p-1 rounded ${section.visible ? 'text-green-600' : 'text-gray-400'}`}\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </button>\n\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              removeSection(section.id);\n                            }}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </button>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-2 flex items-center justify-between\">\n                        <Badge variant=\"info\" size=\"sm\">\n                          {section.type}\n                        </Badge>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => setActiveSection(section.id)}>\n                            <Eye className=\"h-4 w-4 mr-2\" /> Pr├⌐visualiser\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <Card className=\"p-6\">\n              <div className=\"flex justify-center\">\n                <div className={`${getPreviewWidth()} transition-all duration-300`}>\n                  <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden shadow-lg\">\n                    <div className=\"bg-gray-100 px-4 py-2 border-b border-gray-200\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex space-x-1\">\n                          <Save className=\"h-4 w-4 mr-2\" /> Sauvegarder\n                        </div>\n                        <div className=\"flex-1 bg-white rounded px-3 py-1 text-xs text-gray-500\">siports.com/exhibitor/port-solutions-inc</div>\n                      </div>\n                    </div>\n\n                    <div className=\"min-h-96\">\n                      {sections\n                        .filter((s) => s.visible)\n                        .sort((a, b) => a.order - b.order)\n                        .map((section) => (\n                          <motion.div\n                            key={section.id}\n                            className={`border-2 border-transparent hover:border-blue-300 transition-colors ${\n                              activeSection === section.id ? 'border-blue-500' : ''\n                            }`}\n                            onClick={() => setActiveSection(section.id)}\n                          >\n                            {section.type === 'hero' && (\n                              <div\n                                className=\"relative h-64 bg-cover bg-center flex items-center justify-center\"\n                                style={{\n                                  backgroundImage: section.content.backgroundImage ? `url(${section.content.backgroundImage})` : 'linear-gradient(135deg, #1e40af 0%, #3b82f6 100%)'\n                                }}\n                              >\n                                <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n                                <div className=\"relative text-center text-white px-6\">\n                                  <h1 className=\"text-3xl font-bold mb-4\">{section.content.title}</h1>\n                                  <p className=\"text-lg mb-6 opacity-90\">{section.content.subtitle}</p>\n                                  <button\n                                    className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors\"\n                                    style={{ color: siteSettings.primaryColor }}\n                                  >\n                                    {section.content.ctaText}\n                                  </button>\n                                </div>\n                              </div>\n                            )}\n\n                            {section.type === 'about' && (\n                              <div className=\"p-8\">\n                                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">{section.content.title}</h2>\n                                <p className=\"text-gray-600 mb-6\">{section.content.description}</p>\n                                {section.content.features.length > 0 && (\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    {section.content.features.map((feature: string, index: number) => (\n                                      <div key={index} className=\"flex items-center space-x-2\">\n                                        <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: siteSettings.primaryColor }}></div>\n                                        <span className=\"text-sm text-gray-700\">{feature}</span>\n                                      </div>\n                                    ))}\n                                  </div>\n                                )}\n                              </div>\n                            )}\n\n                            {section.type === 'products' && (\n                              <div className=\"p-8 bg-gray-50\">\n                                <h2 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">{section.content.title}</h2>\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                  {section.content.products.map((product: any, index: number) => (\n                                    <div key={index} className=\"bg-white rounded-lg p-6 shadow-sm\">\n                                      <img src={product.image} alt={product.name} className=\"w-full h-32 object-cover rounded-lg mb-4\" />\n                                      <h3 className=\"font-semibold text-gray-900 mb-2\">{product.name}</h3>\n                                      <p className=\"text-gray-600 text-sm mb-4\">{product.description}</p>\n                                      <div className=\"flex flex-wrap gap-1\">\n                                        {product.features.map((feature: string, idx: number) => (\n                                          <Badge key={idx} variant=\"info\" size=\"sm\">{feature}</Badge>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </motion.div>\n                        ))}\n\n                      {sections.filter((s) => s.visible).length === 0 && (\n                        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n                          <div className=\"text-center\">\n                            <Layout className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                            <p>Ajoutez des sections pour commencer ├á cr├⌐er votre mini-site</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\minisite\\MiniSiteEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7185,7188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7185,7188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7539,7542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7539,7542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7731,7734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7731,7734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9160,9163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9160,9163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":307,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":792,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":792,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32160,32163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32160,32163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Link } from 'react-router-dom';\nimport { \n  Layout,\n  Image,\n  FileText,\n  Save,\n  Eye,\n  Smartphone,\n  Monitor,\n  Tablet,\n  Plus,\n  Trash2,\n  Move,\n  Settings,\n  ArrowLeft,\n  Edit,\n  Upload,\n  Globe,\n  Mail,\n  Phone,\n  MapPin,\n  Check,\n  X\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { motion } from 'framer-motion';\n\ninterface Section {\n  id: string;\n  type: 'hero' | 'about' | 'products' | 'gallery' | 'contact' | 'news';\n  title: string;\n  content: any;\n  visible: boolean;\n  order: number;\n}\n\nexport const MiniSiteEditor: React.FC = () => {\n  const [previewMode, setPreviewMode] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const [editingField, setEditingField] = useState<string | null>(null);\n  const [editingValue, setEditingValue] = useState<string>('');\n  const [sections, setSections] = useState<Section[]>([\n    {\n      id: '1',\n      type: 'hero',\n      title: 'Section Hero',\n      content: {\n        title: 'Port Solutions Inc.',\n        subtitle: 'Leading provider of integrated port management solutions',\n        backgroundImage: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1200',\n        ctaText: 'D├⌐couvrir nos solutions',\n        ctaLink: '#products'\n      },\n      visible: true,\n      order: 0\n    },\n    {\n      id: '2',\n      type: 'about',\n      title: '├Ç propos',\n      content: {\n        title: 'Notre expertise',\n        description: 'Avec plus de 20 ans d\\'exp├⌐rience dans le secteur portuaire, nous accompagnons les ports du monde entier dans leur transformation digitale.',\n        features: [\n          'Solutions innovantes',\n          'Expertise reconnue',\n          'Support 24/7',\n          'Pr├⌐sence internationale'\n        ]\n      },\n      visible: true,\n      order: 1\n    },\n    {\n      id: '3',\n      type: 'products',\n      title: 'Produits & Services',\n      content: {\n        title: 'Nos solutions',\n        products: [\n          {\n            id: '1',\n            name: 'SmartPort Management',\n            description: 'Plateforme compl├¿te de gestion portuaire',\n            image: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n            features: ['Analytics temps r├⌐el', 'API int├⌐gr├⌐e', 'Multi-langues'],\n            price: 'Sur devis'\n          },\n          {\n            id: '2',\n            name: 'Port Analytics',\n            description: 'Outils d\\'analyse et de reporting avanc├⌐s',\n            image: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400',\n            features: ['Dashboards personnalis├⌐s', 'Pr├⌐dictions IA', 'Export donn├⌐es'],\n            price: '├Ç partir de 5000Γé¼'\n          }\n        ]\n      },\n      visible: true,\n      order: 2\n    },\n    {\n      id: '4',\n      type: 'contact',\n      title: 'Contact',\n      content: {\n        title: 'Contactez-nous',\n        address: '123 Port Avenue, Casablanca, Maroc',\n        phone: '+212 6 12 34 56 78',\n        email: 'contact@portsolutions.com',\n        website: 'https://portsolutions.com',\n        hours: 'Lun-Ven: 8h-18h'\n      },\n      visible: true,\n      order: 3\n    }\n  ]);\n\n  const [siteSettings, setSiteSettings] = useState({\n    primaryColor: '#1e40af',\n    secondaryColor: '#3b82f6',\n    accentColor: '#60a5fa',\n    fontFamily: 'Inter',\n    logoUrl: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200'\n  });\n\n  const sectionTypes = [\n    { type: 'hero', title: 'Section Hero', icon: Layout, description: 'Banni├¿re d\\'accueil avec titre et CTA' },\n    { type: 'about', title: '├Ç propos', icon: FileText, description: 'Pr├⌐sentation de votre entreprise' },\n    { type: 'products', title: 'Produits', icon: Image, description: 'Catalogue de vos produits et services' },\n    { type: 'gallery', title: 'Galerie', icon: Image, description: 'Photos et vid├⌐os de votre entreprise' },\n    { type: 'news', title: 'Actualit├⌐s', icon: FileText, description: 'Derni├¿res nouvelles et annonces' },\n    { type: 'contact', title: 'Contact', icon: Mail, description: 'Informations de contact et formulaire' }\n  ];\n\n  const addSection = (type: Section['type']) => {\n    const newSection: Section = {\n      id: Date.now().toString(),\n      type,\n      title: sectionTypes.find(s => s.type === type)?.title || 'Nouvelle section',\n      content: getDefaultContent(type),\n      visible: true,\n      order: sections.length\n    };\n  setSections([...sections, newSection]);\n  toast.success(`Γ£à SECTION AJOUT├ëE ΓÇö ${sectionTypes.find(s => s.type === type)?.title}`);\n  };\n\n  const getDefaultContent = (type: Section['type']) => {\n    switch (type) {\n      case 'hero':\n        return {\n          title: 'Votre titre',\n          subtitle: 'Votre sous-titre',\n          backgroundImage: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1200',\n          ctaText: 'En savoir plus',\n          ctaLink: '#'\n        };\n      case 'about':\n        return {\n          title: '├Ç propos de nous',\n          description: 'D├⌐crivez votre entreprise ici...',\n          features: ['Nouvelle fonctionnalit├⌐ 1', 'Nouvelle fonctionnalit├⌐ 2']\n        };\n      case 'products':\n        return {\n          title: 'Nos produits',\n          products: []\n        };\n      case 'gallery':\n        return {\n          title: 'Galerie',\n          images: []\n        };\n      case 'news':\n        return {\n          title: 'Actualit├⌐s',\n          articles: []\n        };\n      case 'contact':\n        return {\n          title: 'Contactez-nous',\n          address: 'Votre adresse',\n          phone: 'Votre t├⌐l├⌐phone',\n          email: 'votre@email.com',\n          website: 'https://votre-site.com',\n          hours: 'Vos horaires'\n        };\n      default:\n        return {};\n    }\n  };\n\n  const removeSection = (id: string) => {\n    const sectionTitle = sections.find(s => s.id === id)?.title;\n    if (window.confirm(`├ètes-vous s├╗r de vouloir supprimer la section \"${sectionTitle}\" ?`)) {\n      setSections(sections.filter(s => s.id !== id));\n      toast.success(`Section supprim├⌐e : \"${sectionTitle}\". Ordre r├⌐organis├⌐.`);\n    }\n  };\n\n  const toggleSectionVisibility = (id: string) => {\n    const section = sections.find(s => s.id === id);\n    const newVisibility = !section?.visible;\n    setSections(sections.map(s => \n      s.id === id ? { ...s, visible: !s.visible } : s\n    ));\n    toast.success(`Visibilit├⌐ modifi├⌐e : ${section?.title} (${newVisibility ? 'Visible' : 'Masqu├⌐e'})`);\n  };\n\n  const startEditing = (fieldKey: string, currentValue: string) => {\n    setEditingField(fieldKey);\n    setEditingValue(currentValue);\n  };\n\n  // saveEdit removed: edits are handled inline in EditableText to avoid unused helper\n\n  const cancelEdit = () => {\n    setEditingField(null);\n    setEditingValue('');\n  };\n\n  const updateSectionContent = (sectionId: string, field: string, value: any) => {\n    setSections(sections.map(section =>\n      section.id === sectionId\n        ? {\n            ...section,\n            content: {\n              ...section.content,\n              [field]: value\n            }\n          }\n        : section\n    ));\n  };\n\n  const updateProductField = (sectionId: string, productIndex: number, field: string, value: any) => {\n    setSections(sections.map(section => {\n      if (section.id === sectionId && section.type === 'products') {\n        const updatedProducts = section.content.products.map((product: any, index: number) =>\n          index === productIndex ? { ...product, [field]: value } : product\n        );\n        return {\n          ...section,\n          content: {\n            ...section.content,\n            products: updatedProducts\n          }\n        };\n      }\n      return section;\n    }));\n  };\n\n  const addProduct = (sectionId: string) => {\n    setSections(sections.map(section => {\n      if (section.id === sectionId && section.type === 'products') {\n        const newProduct = {\n          id: Date.now().toString(),\n          name: 'Nouveau produit',\n          description: 'Description du produit',\n          image: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n          features: ['Fonctionnalit├⌐ 1', 'Fonctionnalit├⌐ 2'],\n          price: 'Sur devis'\n        };\n        return {\n          ...section,\n          content: {\n            ...section.content,\n            products: [...section.content.products, newProduct]\n          }\n        };\n      }\n      return section;\n    }));\n  toast.success('Γ£à Produit ajout├⌐.');\n  };\n\n  const removeProduct = (sectionId: string, productIndex: number) => {\n  if (window.confirm('├ètes-vous s├╗r de vouloir supprimer ce produit ?')) {\n      setSections(sections.map(section => {\n        if (section.id === sectionId && section.type === 'products') {\n          const updatedProducts = section.content.products.filter((_: any, index: number) => index !== productIndex);\n          return {\n            ...section,\n            content: {\n              ...section.content,\n              products: updatedProducts\n            }\n          };\n        }\n        return section;\n      }));\n  toast.success('Produit supprim├⌐.');\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      // Simulation de sauvegarde\n      await new Promise(resolve => setTimeout(resolve, 1500));\n  toast.success('≡ƒÆ╛ Mini-site sauvegard├⌐. Toutes les modifications enregistr├⌐es.');\n    } catch (error) {\n  toast.error('Γ¥î Erreur lors de la sauvegarde');\n    }\n  };\n\n  const handlePreview = () => {\n  toast(`≡ƒæü∩╕Å Aper├ºu ΓÇö Mode: ${previewMode}`, { icon: '∩┐╜∩╕Å' });\n    window.open('/minisite/1', '_blank');\n  };\n\n  const getPreviewWidth = () => {\n    switch (previewMode) {\n      case 'mobile': return 'w-80';\n      case 'tablet': return 'w-96';\n      case 'desktop': return 'w-full';\n      default: return 'w-full';\n    }\n  };\n\n  const EditableText: React.FC<{\n    value: string;\n    onChange: (value: string) => void;\n    placeholder?: string;\n    multiline?: boolean;\n    className?: string;\n    fieldKey: string;\n  }> = ({ value, onChange, placeholder, multiline = false, className = '', fieldKey }) => {\n    const isEditing = editingField === fieldKey;\n\n    if (isEditing) {\n      return (\n        <div className=\"relative\">\n          {multiline ? (\n            <textarea\n              value={editingValue}\n              onChange={(e) => setEditingValue(e.target.value)}\n              placeholder={placeholder}\n              className={`w-full px-3 py-2 border-2 border-blue-500 rounded-lg focus:outline-none bg-white ${className}`}\n              rows={3}\n              autoFocus\n            />\n          ) : (\n            <input\n              type=\"text\"\n              value={editingValue}\n              onChange={(e) => setEditingValue(e.target.value)}\n              placeholder={placeholder}\n              className={`w-full px-3 py-2 border-2 border-blue-500 rounded-lg focus:outline-none bg-white ${className}`}\n              autoFocus\n            />\n          )}\n          <div className=\"flex space-x-2 mt-2\">\n                <Button \n              size=\"sm\" \n              onClick={() => {\n                onChange(editingValue);\n                setEditingField(null);\n                setEditingValue('');\n                toast.success(`Texte modifi├⌐: \"${editingValue}\"`);\n              }}\n            >\n              <Check className=\"h-3 w-3 mr-1\" />\n              Sauver\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={cancelEdit}>\n              <X className=\"h-3 w-3 mr-1\" />\n              Annuler\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        onClick={() => startEditing(fieldKey, value)}\n        className={`cursor-pointer hover:bg-blue-50 hover:border-blue-200 border-2 border-transparent rounded-lg p-2 transition-colors group ${className}`}\n        title=\"Cliquer pour modifier\"\n      >\n        {value || (\n          <span className=\"text-gray-400 italic\">{placeholder || 'Cliquer pour modifier'}</span>\n        )}\n        <Edit className=\"h-3 w-3 text-blue-400 inline ml-2 opacity-0 group-hover:opacity-100 transition-opacity\" />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <Link to=\"/dashboard\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Tableau de Bord Exposant\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              ├ëditeur de Mini-Site\n            </h1>\n            <p className=\"text-gray-600\">\n              Personnalisez votre vitrine digitale pour SIPORTS 2026\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Preview Mode Selector */}\n            <div className=\"flex items-center space-x-2 bg-white rounded-lg p-1 shadow-sm\">\n              <button\n                onClick={() => {\n                  setPreviewMode('desktop');\n                  toast('≡ƒûÑ∩╕Å Mode Desktop s├⌐lectionn├⌐');\n                }}\n                className={`p-2 rounded ${previewMode === 'desktop' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Monitor className=\"h-4 w-4\" />\n              </button>\n              <button\n                onClick={() => {\n                  setPreviewMode('tablet');\n                  toast('≡ƒô▒ Mode Tablette s├⌐lectionn├⌐');\n                }}\n                className={`p-2 rounded ${previewMode === 'tablet' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Tablet className=\"h-4 w-4\" />\n              </button>\n              <button\n                onClick={() => {\n                  setPreviewMode('mobile');\n                  toast('≡ƒô▒ Mode Mobile s├⌐lectionn├⌐');\n                }}\n                className={`p-2 rounded ${previewMode === 'mobile' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n              >\n                <Smartphone className=\"h-4 w-4\" />\n              </button>\n            </div>\n\n            <Button variant=\"outline\" onClick={handlePreview}>\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Pr├⌐visualiser\n            </Button>\n            \n            <Button onClick={handleSave}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              Sauvegarder\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar - Tools */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Site Settings */}\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Param├¿tres du site\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Couleur principale\n                    </label>\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"color\"\n                        value={siteSettings.primaryColor}\n                        onChange={(e) => {\n                          setSiteSettings({...siteSettings, primaryColor: e.target.value});\n                          toast.success(`Couleur principale mise ├á jour: ${e.target.value}`);\n                        }}\n                        className=\"w-8 h-8 rounded border border-gray-300 cursor-pointer\"\n                      />\n                      <input\n                        type=\"text\"\n                        value={siteSettings.primaryColor}\n                        onChange={(e) => setSiteSettings({...siteSettings, primaryColor: e.target.value})}\n                        className=\"flex-1 px-2 py-1 text-sm border border-gray-300 rounded\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Police\n                    </label>\n                    <select\n                      value={siteSettings.fontFamily}\n                      onChange={(e) => {\n                        setSiteSettings({...siteSettings, fontFamily: e.target.value});\n                        toast.success(`Police mise ├á jour: ${e.target.value}`);\n                      }}\n                      className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"Inter\">Inter</option>\n                      <option value=\"Roboto\">Roboto</option>\n                      <option value=\"Open Sans\">Open Sans</option>\n                      <option value=\"Lato\">Lato</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Logo\n                    </label>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full\"\n                      onClick={() => {\n                        const input = document.createElement('input');\n                        input.type = 'file';\n                        input.accept = 'image/*';\n                        input.onchange = (e) => {\n                          const file = (e.target as HTMLInputElement).files?.[0];\n                          if (file) {\n                            toast.success(`Logo s├⌐lectionn├⌐: ${file.name}`);\n                          }\n                        };\n                        input.click();\n                      }}\n                    >\n                      <Upload className=\"h-3 w-3 mr-1\" />\n                      Changer Logo\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Add Sections */}\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Ajouter une section\n                </h3>\n                \n                <div className=\"space-y-2\">\n                  {sectionTypes.map((sectionType) => {\n                    return (\n                      <button\n                        key={sectionType.type}\n                        onClick={() => addSection(sectionType.type as Section['type'])}\n                        className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <sectionType.icon className=\"h-4 w-4 text-gray-400\" />\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {sectionType.title}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {sectionType.description}\n                            </p>\n                          </div>\n                        </div>\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            </Card>\n\n            {/* Sections List */}\n            <Card>\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">\n                  Sections ({sections.length})\n                </h3>\n                \n                <div className=\"space-y-2\">\n                  {sections.map((section) => (\n                    <div\n                      key={section.id}\n                      className={`p-3 border rounded-lg cursor-pointer transition-colors group ${\n                        activeSection === section.id \n                          ? 'border-blue-300 bg-blue-50' \n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => setActiveSection(section.id)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Move className=\"h-4 w-4 text-gray-400 cursor-move\" />\n                          <span className=\"text-sm font-medium text-gray-900\">\n                            {section.title}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-1\">\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleSectionVisibility(section.id);\n                            }}\n                            className={`p-1 rounded ${\n                              section.visible ? 'text-green-600' : 'text-gray-400'\n                            }`}\n                            title={section.visible ? 'Masquer la section' : 'Afficher la section'}\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </button>\n                          \n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              removeSection(section.id);\n                            }}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50\"\n                            title=\"Supprimer la section\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-2\">\n                        <Badge variant=\"info\" size=\"sm\">\n                          {section.type}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* Main Content - Preview */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"p-6\">\n              <div className=\"flex justify-center\">\n                <div className={`${getPreviewWidth()} transition-all duration-300`}>\n                  <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden shadow-lg\">\n                    {/* Preview Header */}\n                    <div className=\"bg-gray-100 px-4 py-2 border-b border-gray-200\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                          <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                          <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                        </div>\n                        <div className=\"flex-1 bg-white rounded px-3 py-1 text-xs text-gray-500\">\n                          siports.com/exhibitor/port-solutions-inc\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Preview Content */}\n                    <div className=\"min-h-96\">\n                      {sections\n                        .filter(s => s.visible)\n                        .sort((a, b) => a.order - b.order)\n                        .map((section) => (\n                          <motion.div\n                            key={section.id}\n                            className={`border-2 border-transparent hover:border-blue-300 transition-colors group ${\n                              activeSection === section.id ? 'border-blue-500' : ''\n                            }`}\n                            onClick={() => setActiveSection(section.id)}\n                          >\n                            {/* Section Hero */}\n                            {section.type === 'hero' && (\n                              <div \n                                className=\"relative h-64 bg-cover bg-center flex items-center justify-center\"\n                                style={{ \n                                  backgroundImage: section.content.backgroundImage \n                                    ? `url(${section.content.backgroundImage})` \n                                    : 'linear-gradient(135deg, #1e40af 0%, #3b82f6 100%)'\n                                }}\n                              >\n                                <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n                                <div className=\"relative text-center text-white px-6 w-full\">\n                                  <EditableText\n                                    value={section.content.title}\n                                    onChange={(value) => updateSectionContent(section.id, 'title', value)}\n                                    placeholder=\"Titre principal\"\n                                    className=\"text-3xl font-bold mb-4 text-white\"\n                                    fieldKey={`${section.id}-title`}\n                                  />\n                                  <EditableText\n                                    value={section.content.subtitle}\n                                    onChange={(value) => updateSectionContent(section.id, 'subtitle', value)}\n                                    placeholder=\"Sous-titre\"\n                                    multiline\n                                    className=\"text-lg mb-6 opacity-90 text-white\"\n                                    fieldKey={`${section.id}-subtitle`}\n                                  />\n                                  <EditableText\n                                    value={section.content.ctaText}\n                                    onChange={(value) => updateSectionContent(section.id, 'ctaText', value)}\n                                    placeholder=\"Texte du bouton\"\n                                    className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors inline-block\"\n                                    fieldKey={`${section.id}-cta`}\n                                  />\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Section About */}\n                            {section.type === 'about' && (\n                              <div className=\"p-8\">\n                                <EditableText\n                                  value={section.content.title}\n                                  onChange={(value) => updateSectionContent(section.id, 'title', value)}\n                                  placeholder=\"Titre de la section\"\n                                  className=\"text-2xl font-bold text-gray-900 mb-4\"\n                                  fieldKey={`${section.id}-title`}\n                                />\n                                <EditableText\n                                  value={section.content.description}\n                                  onChange={(value) => updateSectionContent(section.id, 'description', value)}\n                                  placeholder=\"Description de votre entreprise\"\n                                  multiline\n                                  className=\"text-gray-600 mb-6\"\n                                  fieldKey={`${section.id}-description`}\n                                />\n                                {section.content.features.length > 0 && (\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    {section.content.features.map((feature: string, index: number) => (\n                                      <div key={index} className=\"flex items-center space-x-2\">\n                                        <div \n                                          className=\"w-2 h-2 rounded-full\"\n                                          style={{ backgroundColor: siteSettings.primaryColor }}\n                                        ></div>\n                                        <EditableText\n                                          value={feature}\n                                          onChange={(value) => {\n                                            const updatedFeatures = [...section.content.features];\n                                            updatedFeatures[index] = value;\n                                            updateSectionContent(section.id, 'features', updatedFeatures);\n                                          }}\n                                          placeholder=\"Caract├⌐ristique\"\n                                          className=\"text-sm text-gray-700\"\n                                          fieldKey={`${section.id}-feature-${index}`}\n                                        />\n                                      </div>\n                                    ))}\n                                  </div>\n                                )}\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  className=\"mt-4\"\n                                    onClick={() => {\n                                    const newFeatures = [...section.content.features, 'Nouvelle fonctionnalit├⌐'];\n                                    updateSectionContent(section.id, 'features', newFeatures);\n                                    toast.success('Fonctionnalit├⌐ ajout├⌐e');\n                                  }}\n                                >\n                                  <Plus className=\"h-3 w-3 mr-1\" />\n                                  Ajouter fonctionnalit├⌐\n                                </Button>\n                              </div>\n                            )}\n\n                            {/* Section Products */}\n                            {section.type === 'products' && (\n                              <div className=\"p-8 bg-gray-50\">\n                                <div className=\"flex items-center justify-between mb-6\">\n                                  <EditableText\n                                    value={section.content.title}\n                                    onChange={(value) => updateSectionContent(section.id, 'title', value)}\n                                    placeholder=\"Titre de la section produits\"\n                                    className=\"text-2xl font-bold text-gray-900\"\n                                    fieldKey={`${section.id}-title`}\n                                  />\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => addProduct(section.id)}\n                                  >\n                                    <Plus className=\"h-3 w-3 mr-1\" />\n                                    Produit\n                                  </Button>\n                                </div>\n                                \n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                  {section.content.products.map((product: any, index: number) => (\n                                    <div key={index} className=\"bg-white rounded-lg p-6 shadow-sm relative group\">\n                                      <button\n                                        onClick={() => removeProduct(section.id, index)}\n                                        className=\"absolute top-2 right-2 p-1 bg-red-100 text-red-600 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                                        title=\"Supprimer ce produit\"\n                                      >\n                                        <Trash2 className=\"h-3 w-3\" />\n                                      </button>\n                                      \n                                      <img\n                                        src={product.image}\n                                        alt={product.name}\n                                        className=\"w-full h-32 object-cover rounded-lg mb-4 cursor-pointer hover:opacity-80\"\n                                        onClick={() => {\n                                          const input = document.createElement('input');\n                                          input.type = 'file';\n                                          input.accept = 'image/*';\n                                          input.onchange = (e) => {\n                                            const file = (e.target as HTMLInputElement).files?.[0];\n                                            if (file) {\n                                              toast.success(`Image produit s├⌐lectionn├⌐e: ${file.name}`);\n                                            }\n                                          };\n                                          input.click();\n                                        }}\n                                        title=\"Cliquer pour changer l'image\"\n                                      />\n                                      \n                                      <EditableText\n                                        value={product.name}\n                                        onChange={(value) => updateProductField(section.id, index, 'name', value)}\n                                        placeholder=\"Nom du produit\"\n                                        className=\"font-semibold text-gray-900 mb-2\"\n                                        fieldKey={`${section.id}-product-${index}-name`}\n                                      />\n                                      \n                                      <EditableText\n                                        value={product.description}\n                                        onChange={(value) => updateProductField(section.id, index, 'description', value)}\n                                        placeholder=\"Description du produit\"\n                                        multiline\n                                        className=\"text-gray-600 text-sm mb-4\"\n                                        fieldKey={`${section.id}-product-${index}-description`}\n                                      />\n                                      \n                                      <div className=\"flex items-center justify-between\">\n                                        <EditableText\n                                          value={product.price}\n                                          onChange={(value) => updateProductField(section.id, index, 'price', value)}\n                                          placeholder=\"Prix\"\n                                          className=\"text-blue-600 font-semibold\"\n                                          fieldKey={`${section.id}-product-${index}-price`}\n                                        />\n                                        <Button \n                                          size=\"sm\" \n                                          variant=\"outline\"\n                                          onClick={() => {\n                                            const input = document.createElement('input');\n                                            input.type = 'file';\n                                            input.accept = 'image/*';\n                                            input.onchange = (e) => {\n                                              const file = (e.target as HTMLInputElement).files?.[0];\n                                              if (file) {\n                                                toast.success(`Image s├⌐lectionn├⌐e: ${file.name}`);\n                                              }\n                                            };\n                                            input.click();\n                                          }}\n                                        >\n                                          <Upload className=\"h-3 w-3 mr-1\" />\n                                          Image\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Section Contact */}\n                            {section.type === 'contact' && (\n                              <div className=\"p-8\">\n                                <EditableText\n                                  value={section.content.title}\n                                  onChange={(value) => updateSectionContent(section.id, 'title', value)}\n                                  placeholder=\"Titre de la section contact\"\n                                  className=\"text-2xl font-bold text-gray-900 mb-6\"\n                                  fieldKey={`${section.id}-title`}\n                                />\n                                \n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                                  <div className=\"space-y-4\">\n                                    <div className=\"flex items-center space-x-3\">\n                                      <MapPin className=\"h-5 w-5 text-blue-600\" />\n                                      <EditableText\n                                        value={section.content.address}\n                                        onChange={(value) => updateSectionContent(section.id, 'address', value)}\n                                        placeholder=\"Adresse compl├¿te\"\n                                        className=\"text-gray-700\"\n                                        fieldKey={`${section.id}-address`}\n                                      />\n                                    </div>\n                                    \n                                    <div className=\"flex items-center space-x-3\">\n                                      <Phone className=\"h-5 w-5 text-blue-600\" />\n                                      <EditableText\n                                        value={section.content.phone}\n                                        onChange={(value) => updateSectionContent(section.id, 'phone', value)}\n                                        placeholder=\"Num├⌐ro de t├⌐l├⌐phone\"\n                                        className=\"text-gray-700\"\n                                        fieldKey={`${section.id}-phone`}\n                                      />\n                                    </div>\n                                    \n                                    <div className=\"flex items-center space-x-3\">\n                                      <Mail className=\"h-5 w-5 text-blue-600\" />\n                                      <EditableText\n                                        value={section.content.email}\n                                        onChange={(value) => updateSectionContent(section.id, 'email', value)}\n                                        placeholder=\"Adresse email\"\n                                        className=\"text-gray-700\"\n                                        fieldKey={`${section.id}-email`}\n                                      />\n                                    </div>\n                                    \n                                    <div className=\"flex items-center space-x-3\">\n                                      <Globe className=\"h-5 w-5 text-blue-600\" />\n                                      <EditableText\n                                        value={section.content.website}\n                                        onChange={(value) => updateSectionContent(section.id, 'website', value)}\n                                        placeholder=\"Site web\"\n                                        className=\"text-gray-700\"\n                                        fieldKey={`${section.id}-website`}\n                                      />\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                                    <h4 className=\"font-medium text-gray-900 mb-3\">Formulaire de contact</h4>\n                                    <p className=\"text-sm text-gray-600\">\n                                      Un formulaire de contact sera automatiquement g├⌐n├⌐r├⌐\n                                    </p>\n                                    <div className=\"mt-3 space-y-3\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"text-sm text-gray-700\">Champ Nom</span>\n                                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                                          <input\n                                            type=\"checkbox\"\n                                            defaultChecked\n                                            onChange={(e) => {\n                                                      const checked = e.target.checked;\n                                                      toast.success(`Champ Nom ${checked ? 'activ├⌐' : 'd├⌐sactiv├⌐'}`);\n                                                    }}\n                                            className=\"sr-only peer\"\n                                          />\n                                          <div className=\"w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600\"></div>\n                                        </label>\n                                      </div>\n                                      \n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"text-sm text-gray-700\">Champ T├⌐l├⌐phone</span>\n                                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                                          <input\n                                            type=\"checkbox\"\n                                            onChange={(e) => {\n                                              const checked = e.target.checked;\n                                              toast.success(`Champ T├⌐l├⌐phone ${checked ? 'activ├⌐' : 'd├⌐sactiv├⌐'}`);\n                                            }}\n                                            className=\"sr-only peer\"\n                                          />\n                                          <div className=\"w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600\"></div>\n                                        </label>\n                                      </div>\n                                      \n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"text-sm text-gray-700\">Champ Entreprise</span>\n                                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                                          <input\n                                            type=\"checkbox\"\n                                            defaultChecked\n                                            onChange={(e) => {\n                                              const checked = e.target.checked;\n                                              toast.success(`Champ Entreprise ${checked ? 'activ├⌐' : 'd├⌐sactiv├⌐'}`);\n                                            }}\n                                            className=\"sr-only peer\"\n                                          />\n                                          <div className=\"w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600\"></div>\n                                        </label>\n                                      </div>\n                                      \n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"text-sm text-gray-700\">Anti-spam (reCAPTCHA)</span>\n                                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                                          <input\n                                            type=\"checkbox\"\n                                            defaultChecked\n                                            onChange={(e) => {\n                                              const checked = e.target.checked;\n                                              toast.success(`Anti-spam (reCAPTCHA) ${checked ? 'activ├⌐' : 'd├⌐sactiv├⌐'}`);\n                                            }}\n                                            className=\"sr-only peer\"\n                                          />\n                                          <div className=\"w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600\"></div>\n                                        </label>\n                                      </div>\n                                      \n                                      <div className=\"mt-4 pt-3 border-t border-gray-200\">\n                                        <div className=\"flex items-center justify-between mb-2\">\n                                          <span className=\"text-sm font-medium text-gray-700\">Email de notification</span>\n                                        </div>\n                                        <input\n                                          type=\"email\"\n                                          defaultValue={section.content.email}\n                                          onChange={(e) => {\n                                            updateSectionContent(section.id, 'notificationEmail', e.target.value);\n                                            toast.success(`Email de notification modifi├⌐: ${e.target.value}`);\n                                          }}\n                                          placeholder=\"email@entreprise.com\"\n                                          className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                        />\n                                      </div>\n                                      \n                                      <div className=\"mt-3\">\n                                        <Button \n                                          variant=\"outline\" \n                                          size=\"sm\" \n                                          className=\"w-full\"\n                                          onClick={() => {\n                                            const config = {\n                                              fields: {\n                                                name: true,\n                                                email: true,\n                                                phone: false,\n                                                company: true,\n                                                message: true\n                                              },\n                                              security: {\n                                                recaptcha: true,\n                                                honeypot: true,\n                                                rateLimit: '5 messages/heure'\n                                              },\n                                              notifications: {\n                                                email: section.content.notificationEmail || section.content.email,\n                                                autoReply: true,\n                                                template: 'Merci pour votre message, nous vous r├⌐pondrons sous 24h.'\n                                              }\n                                            };\n                                            \n                                            toast.success(`Formulaire configur├⌐ ΓÇö notifications: ${config.notifications.email}`);\n                                          }}\n                                        >\n                                          <Settings className=\"h-3 w-3 mr-1\" />\n                                          Tester la Configuration\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </motion.div>\n                        ))}\n                      \n                      {sections.filter(s => s.visible).length === 0 && (\n                        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n                          <div className=\"text-center\">\n                            <Layout className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                            <p>Ajoutez des sections pour commencer ├á cr├⌐er votre mini-site</p>\n                            <Button \n                              className=\"mt-4\"\n                              onClick={() => addSection('hero')}\n                            >\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Ajouter Section Hero\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Instructions d'utilisation */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"mt-8\"\n        >\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-blue-900 mb-4\">\n                ≡ƒÆí Comment utiliser l'├⌐diteur\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-blue-800\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Γ£Å∩╕Å Modification du texte :</h4>\n                  <ul className=\"space-y-1\">\n                    <li>ΓÇó Cliquez sur n'importe quel texte pour le modifier</li>\n                    <li>ΓÇó Tapez votre nouveau contenu</li>\n                    <li>ΓÇó Cliquez \"Sauver\" pour confirmer</li>\n                    <li>ΓÇó Cliquez \"Annuler\" pour revenir au texte original</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">≡ƒÄ¿ Gestion des sections :</h4>\n                  <ul className=\"space-y-1\">\n                    <li>ΓÇó Ajoutez des sections depuis la sidebar</li>\n                    <li>ΓÇó Cliquez sur l'┼ôil pour masquer/afficher</li>\n                    <li>ΓÇó Utilisez la corbeille pour supprimer</li>\n                    <li>ΓÇó Glissez-d├⌐posez pour r├⌐organiser</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">≡ƒû╝∩╕Å Images et m├⌐dias :</h4>\n                  <ul className=\"space-y-1\">\n                    <li>ΓÇó Cliquez sur une image pour la changer</li>\n                    <li>ΓÇó Formats support├⌐s: JPG, PNG, WebP</li>\n                    <li>ΓÇó Taille max recommand├⌐e: 2MB</li>\n                    <li>ΓÇó Optimisation automatique</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\minisite\\MiniSitePreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exhibitorId' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { \n  Phone, \n  Mail, \n  MapPin, \n  Globe, \n  Calendar,\n  Download,\n  Share2,\n  MessageCircle,\n  Star,\n  Award,\n  Users,\n  Clock,\n  ArrowLeft,\n  CheckCircle,\n  ExternalLink\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { motion } from 'framer-motion';\n\nexport const MiniSitePreview: React.FC = () => {\n  const { exhibitorId } = useParams<{ exhibitorId: string }>();\n\n  // Mock data for the mini-site\n  const miniSiteData = {\n    id: '1',\n    exhibitorId: '1',\n    companyName: 'Port Solutions Inc.',\n    logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n    theme: {\n      primaryColor: '#1e40af',\n      secondaryColor: '#3b82f6',\n      accentColor: '#60a5fa',\n      fontFamily: 'Inter'\n    },\n    hero: {\n      title: 'Port Solutions Inc.',\n      subtitle: 'Leading provider of integrated port management solutions',\n      backgroundImage: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1200',\n      ctaText: 'D├⌐couvrir nos solutions',\n      ctaLink: '#products'\n    },\n    about: {\n      title: 'Notre expertise',\n      description: 'Avec plus de 20 ans d\\'exp├⌐rience dans le secteur portuaire, nous accompagnons les ports du monde entier dans leur transformation digitale. Notre ├⌐quipe d\\'experts d├⌐veloppe des solutions innovantes pour optimiser les op├⌐rations portuaires et am├⌐liorer l\\'efficacit├⌐ des cha├«nes logistiques.',\n      features: [\n        'Solutions innovantes',\n        'Expertise reconnue',\n        'Support 24/7',\n        'Pr├⌐sence internationale'\n      ],\n      stats: [\n        { number: '20+', label: 'Ann├⌐es d\\'exp├⌐rience' },\n        { number: '150+', label: 'Ports ├⌐quip├⌐s' },\n        { number: '40+', label: 'Pays' },\n        { number: '500+', label: 'Clients satisfaits' }\n      ]\n    },\n    products: [\n      {\n        id: '1',\n        name: 'SmartPort Management System',\n        description: 'Plateforme compl├¿te de gestion portuaire avec analytics temps r├⌐el',\n        image: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n        features: ['Analytics temps r├⌐el', 'API int├⌐gr├⌐e', 'Multi-langues'],\n        price: 'Sur devis',\n        category: 'Software'\n      },\n      {\n        id: '2',\n        name: 'Port Analytics Dashboard',\n        description: 'Outils d\\'analyse et de reporting avanc├⌐s pour optimiser les performances',\n        image: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400',\n        features: ['Dashboards personnalis├⌐s', 'Pr├⌐dictions IA', 'Export donn├⌐es'],\n        price: '├Ç partir de 5000Γé¼',\n        category: 'Analytics'\n      },\n      {\n        id: '3',\n        name: 'Mobile Port App',\n        description: 'Application mobile pour la gestion des op├⌐rations portuaires en mobilit├⌐',\n        image: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n        features: ['Interface intuitive', 'Mode offline', 'Synchronisation cloud'],\n        price: '2500Γé¼/an',\n        category: 'Mobile'\n      }\n    ],\n    news: [\n      {\n        id: '1',\n        title: 'Nouveau partenariat avec le Port de Rotterdam',\n        excerpt: 'Nous sommes fiers d\\'annoncer notre nouveau partenariat strat├⌐gique...',\n        date: '2024-01-15',\n        image: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=300',\n        category: 'Partenariat'\n      },\n      {\n        id: '2',\n        title: 'Lancement de la version 3.0 de SmartPort',\n        excerpt: 'La nouvelle version apporte des fonctionnalit├⌐s r├⌐volutionnaires...',\n        date: '2024-01-10',\n        image: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=300',\n        category: 'Produit'\n      }\n    ],\n    contact: {\n      address: '123 Port Avenue, Casablanca, Maroc',\n      phone: '+212 6 12 34 56 78',\n      email: 'contact@portsolutions.com',\n      website: 'https://portsolutions.com',\n      hours: 'Lun-Ven: 8h-18h',\n      social: {\n        linkedin: 'https://linkedin.com/company/portsolutions',\n        twitter: 'https://twitter.com/portsolutions'\n      }\n    },\n    gallery: [\n      'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400',\n      'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400'\n    ],\n    testimonials: [\n      {\n        name: 'Jean Dupont',\n        position: 'Directeur Technique',\n        company: 'Port de Marseille',\n        comment: 'Une solution exceptionnelle qui a transform├⌐ nos op├⌐rations.',\n        avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100'\n      }\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Bouton de retour */}\n      <div className=\"bg-gray-50 border-b border-gray-200 p-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Link to=\"/minisite\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour au Cr├⌐ateur de Mini-Site\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Navigation Sticky */}\n      <nav className=\"sticky top-0 z-50 bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <img\n                src={miniSiteData.logo}\n                alt={miniSiteData.companyName}\n                className=\"h-10 w-10 rounded-lg\"\n              />\n              <span className=\"font-bold text-gray-900\">{miniSiteData.companyName}</span>\n            </div>\n            \n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#accueil\" className=\"text-gray-700 hover:text-blue-600\">Accueil</a>\n              <a href=\"#apropos\" className=\"text-gray-700 hover:text-blue-600\">├Ç propos</a>\n              <a href=\"#produits\" className=\"text-gray-700 hover:text-blue-600\">Produits</a>\n              <a href=\"#actualites\" className=\"text-gray-700 hover:text-blue-600\">Actualit├⌐s</a>\n              <a href=\"#galerie\" className=\"text-gray-700 hover:text-blue-600\">Galerie</a>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button size=\"sm\">\n                <MessageCircle className=\"h-4 w-4 mr-2\" />\n                Contact\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Share2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section id=\"accueil\" className=\"relative h-96 bg-cover bg-center\" style={{\n        backgroundImage: `url(${miniSiteData.hero.backgroundImage})`\n      }}>\n        <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-white max-w-2xl\"\n          >\n            <h1 className=\"text-4xl lg:text-6xl font-bold mb-4\">\n              {miniSiteData.hero.title}\n            </h1>\n            <p className=\"text-xl mb-8 opacity-90\">\n              {miniSiteData.hero.subtitle}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-blue-50\">\n                {miniSiteData.hero.ctaText}\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white hover:text-blue-600\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                T├⌐l├⌐charger catalogue\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"apropos\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {miniSiteData.about.title}\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n              {miniSiteData.about.description}\n            </p>\n          </motion.div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            {miniSiteData.about.stats.map((stat, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n                className=\"text-center\"\n              >\n                <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                  {stat.number}\n                </div>\n                <div className=\"text-gray-600\">{stat.label}</div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Features */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {miniSiteData.about.features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n                className=\"text-center p-6 bg-white rounded-lg shadow-sm\"\n              >\n                <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-4\">\n                  <Award className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900\">{feature}</h3>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Products Section */}\n      <section id=\"produits\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Nos Produits & Services\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              D├⌐couvrez notre gamme compl├¿te de solutions portuaires\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {miniSiteData.products.map((product, index) => (\n              <motion.div\n                key={product.id}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card hover className=\"h-full\">\n                  <img\n                    src={product.image}\n                    alt={product.name}\n                    className=\"w-full h-48 object-cover rounded-t-lg\"\n                  />\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"info\" size=\"sm\">\n                        {product.category}\n                      </Badge>\n                      <span className=\"text-sm font-semibold text-blue-600\">\n                        {product.price}\n                      </span>\n                    </div>\n                    \n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                      {product.name}\n                    </h3>\n                    \n                    <p className=\"text-gray-600 mb-4\">\n                      {product.description}\n                    </p>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-6\">\n                      {product.features.map((feature, idx) => (\n                        <Badge key={idx} variant=\"default\" size=\"sm\">\n                          {feature}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"flex space-x-3\">\n                      <Button size=\"sm\" className=\"flex-1\">\n                        Demander un devis\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* News Section */}\n      <section id=\"actualites\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Actualit├⌐s\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              Restez inform├⌐ de nos derni├¿res nouvelles\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {miniSiteData.news.map((article, index) => (\n              <motion.div\n                key={article.id}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card hover>\n                  <img\n                    src={article.image}\n                    alt={article.title}\n                    className=\"w-full h-48 object-cover rounded-t-lg\"\n                  />\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"success\" size=\"sm\">\n                        {article.category}\n                      </Badge>\n                      <span className=\"text-sm text-gray-500\">\n                        {new Date(article.date).toLocaleDateString('fr-FR')}\n                      </span>\n                    </div>\n                    \n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                      {article.title}\n                    </h3>\n                    \n                    <p className=\"text-gray-600 mb-4\">\n                      {article.excerpt}\n                    </p>\n                    \n                    <Button variant=\"outline\" size=\"sm\">\n                      Lire la suite\n                    </Button>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Gallery Section */}\n      <section id=\"galerie\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Galerie\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              D├⌐couvrez nos r├⌐alisations en images\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {miniSiteData.gallery.map((image, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, scale: 0.8 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ delay: index * 0.1 }}\n                className=\"aspect-square overflow-hidden rounded-lg cursor-pointer hover:scale-105 transition-transform\"\n              >\n                <img\n                  src={image}\n                  alt={`Galerie ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"flex items-center space-x-3 mb-4 md:mb-0\">\n              <img\n                src={miniSiteData.logo}\n                alt={miniSiteData.companyName}\n                className=\"h-10 w-10 rounded-lg\"\n              />\n              <span className=\"font-bold text-xl\">{miniSiteData.companyName}</span>\n            </div>\n            \n            <div className=\"text-center md:text-right\">\n              <p className=\"text-gray-400 mb-2\">\n                ┬⌐ 2024 {miniSiteData.companyName}. Tous droits r├⌐serv├⌐s.\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                Propuls├⌐ par SIPORTS 2026\n              </p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\pavilions\\PavillonsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[453,456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[453,456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":43,"column":80,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":43,"endColumn":81,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1017,1018],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1017,1017],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":44,"column":106,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":44,"endColumn":107,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1174,1175],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1174,1174],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":58,"column":28,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":58,"endColumn":29,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1644,1645],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1644,1644],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":58,"column":117,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":58,"endColumn":118,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1733,1734],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1733,1733],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":58,"column":130,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":58,"endColumn":131,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1746,1747],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1746,1746],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":59,"column":57,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":59,"endColumn":58,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1811,1812],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1811,1811],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":88,"column":30,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":88,"endColumn":31,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2975,2976],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2975,2975],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport {\n  Building2,\n  Users,\n  Calendar,\n  Globe,\n  Target,\n  Lightbulb,\n  MapPin,\n  Handshake\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { motion } from 'framer-motion';\n\ninterface Pavilion {\n  id: string;\n  name: string;\n  title: string;\n  description: string;\n  icon: any;\n  color: string;\n  bgColor: string;\n  objectives: string[];\n  features: string[];\n  targetAudience: string[];\n  exhibitors: number;\n  visitors: number;\n  conferences: number;\n}\n\nconst pavilions: Pavilion[] = [\n  {\n    id: 'digitalization',\n    name: 'Digitalisation Portuaire',\n    title: 'Automatisation et Num├⌐risation',\n    description: \"Technologies num├⌐riques transformant l'├⌐cosyst├¿me portuaire\",\n    icon: Building2,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-100',\n    objectives: ['Am├⌐liorer l\\'efficacit├⌐ op├⌐rationnelle', \"R├⌐duire les temps d\\'attente\", \"Optimiser la gestion des ressources\"],\n    features: ['Solutions IoT portuaires', 'Syst├¿mes de gestion automatis├⌐e', \"Int├⌐gration des syst├¿mes d\\'information\"],\n    targetAudience: ['Autorit├⌐s Portuaires', 'Op├⌐rateurs de Terminaux', 'D├⌐veloppeurs de Solutions'],\n    exhibitors: 8,\n    visitors: 450,\n    conferences: 3\n  },\n  {\n    id: 'sustainability',\n    name: 'Durabilit├⌐ Portuaire',\n    title: '├ëcologie et ├ënergies Renouvelables',\n    description: \"Initiatives environnementales pour des ports durables\",\n    icon: Globe,\n    color: 'text-green-600',\n    bgColor: 'bg-green-100',\n    objectives: [\"R├⌐duire l\\'empreinte carbone\", \"D├⌐velopper les ├⌐nergies renouvelables\", \"Am├⌐liorer la qualit├⌐ de l\\'eau et de l\\'air\"],\n    features: [\"├ëlectrification des quais\", \"Solutions d\\'├⌐nergie renouvelable\", \"Gestion des d├⌐chets et ├⌐conomie circulaire\"],\n    targetAudience: ['Experts Environnementaux', 'Fournisseurs d\\'├ënergie', 'Autorit├⌐s Portuaires'],\n    exhibitors: 6,\n    visitors: 380,\n    conferences: 2\n  },\n  {\n    id: 'security',\n    name: 'S├⌐curit├⌐ et S├╗ret├⌐',\n    title: 'Protection et Cybers├⌐curit├⌐',\n    description: \"Solutions pour la s├⌐curit├⌐ physique et num├⌐rique des ports\",\n    icon: Users,\n    color: 'text-red-600',\n    bgColor: 'bg-red-100',\n    objectives: [\"Renforcer la cybers├⌐curit├⌐\", \"Am├⌐liorer la s├╗ret├⌐ des op├⌐rations\", \"G├⌐rer les risques et crises\"],\n    features: ['Syst├¿mes de surveillance intelligents', 'Solutions de cybers├⌐curit├⌐ maritime', 'Gestion des identit├⌐s et acc├¿s'],\n    targetAudience: ['Responsables S├⌐curit├⌐', 'Experts Cybers├⌐curit├⌐', 'Autorit├⌐s Douani├¿res'],\n    exhibitors: 5,\n    visitors: 320,\n    conferences: 2\n  },\n  {\n    id: 'innovation',\n    name: 'Innovation Portuaire',\n    title: 'R&D et Startups',\n    description: \"Nouvelles technologies et mod├¿les ├⌐conomiques portuaires\",\n    icon: Calendar,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-100',\n    objectives: [\"Favoriser l\\'innovation ouverte\", \"D├⌐velopper les partenariats\", \"Acc├⌐l├⌐rer la transformation num├⌐rique\"],\n    features: ['Zone de d├⌐monstration startups', 'Hackathon portuaire', 'Pr├⌐sentations de projets innovants'],\n    targetAudience: ['Startups', 'Incubateurs', 'Investisseurs'],\n    exhibitors: 12,\n    visitors: 550,\n    conferences: 4\n  }\n];\n\nexport const PavillonsPage: React.FC = () => {\n  const [selectedPavilion, setSelectedPavilion] = useState<string | null>(null);\n  const metrics = {\n    totalExhibitors: 24,\n    totalVisitors: 1200,\n    totalConferences: 8,\n    countries: 12\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-gradient-to-r from-blue-900 to-indigo-900 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"text-center\">\n            <h1 className=\"text-4xl font-bold mb-4\">Pavillons Th├⌐matiques SIPORTS 2026</h1>\n            <p className=\"text-xl text-blue-100 max-w-3xl mx-auto\">Hub central pour le d├⌐veloppement, l'innovation et la connectivit├⌐ mondiale de l'├⌐cosyst├¿me portuaire international</p>\n          </motion.div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }} className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-blue-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\"><Building2 className=\"h-8 w-8 text-blue-600\" /></div>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{metrics.totalExhibitors}+</div>\n            <div className=\"text-gray-600\">Exposants</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-green-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\"><Users className=\"h-8 w-8 text-green-600\" /></div>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{metrics.totalVisitors.toLocaleString()}+</div>\n            <div className=\"text-gray-600\">Visiteurs Professionnels</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-purple-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\"><Calendar className=\"h-8 w-8 text-purple-600\" /></div>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{metrics.totalConferences}+</div>\n            <div className=\"text-gray-600\">Conf├⌐rences & Panels</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-orange-100 p-4 rounded-full w-16 h-16 mx-auto mb-4\"><Globe className=\"h-8 w-8 text-orange-600\" /></div>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{metrics.countries}</div>\n            <div className=\"text-gray-600\">Pays Repr├⌐sent├⌐s</div>\n          </Card>\n        </motion.div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8\">\n          {pavilions.map((pavilion, index) => {\n            const Icon = pavilion.icon;\n            const isSelected = selectedPavilion === pavilion.id;\n            return (\n              <motion.div key={pavilion.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.05 }} className={`${isSelected ? 'lg:col-span-2 xl:col-span-3' : ''}`}>\n                <Card className={`h-full transition-all duration-300 ${isSelected ? 'ring-2 ring-blue-500 shadow-xl' : ''}`}>\n                  <div className=\"p-6\" onClick={() => setSelectedPavilion(isSelected ? null : pavilion.id)} style={{ cursor: 'pointer' }}>\n                    <div className=\"flex items-start space-x-4 mb-4\">\n                      <div className={`${pavilion.bgColor} p-3 rounded-lg`}><Icon className={`h-6 w-6 ${pavilion.color}`} /></div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{pavilion.name}</h3>\n                        <p className=\"text-lg text-gray-700 font-medium mb-2\">{pavilion.title}</p>\n                        <p className=\"text-gray-600 text-sm\">{pavilion.description}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                      <div className=\"text-center\"><div className=\"text-2xl font-bold text-gray-900\">{pavilion.exhibitors}</div><div className=\"text-xs text-gray-600\">Exposants</div></div>\n                      <div className=\"text-center\"><div className=\"text-2xl font-bold text-gray-900\">{pavilion.visitors.toLocaleString()}</div><div className=\"text-xs text-gray-600\">Visiteurs</div></div>\n                      <div className=\"text-center\"><div className=\"text-2xl font-bold text-gray-900\">{pavilion.conferences}</div><div className=\"text-xs text-gray-600\">Conf├⌐rences</div></div>\n                    </div>\n\n                    {isSelected && (\n                      <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }} className=\"border-t border-gray-200 pt-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\"><Target className=\"h-4 w-4 mr-2\" />Objectifs</h4>\n                            <ul className=\"space-y-2\">{pavilion.objectives.map((o, i) => <li key={i} className=\"text-sm text-gray-600 flex items-start\"><div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 mr-2 flex-shrink-0\" />{o}</li>)}</ul>\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\"><Lightbulb className=\"h-4 w-4 mr-2\" />Fonctionnalit├⌐s</h4>\n                            <ul className=\"space-y-2\">{pavilion.features.map((f, i) => <li key={i} className=\"text-sm text-gray-600 flex items-start\"><div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 mr-2 flex-shrink-0\" />{f}</li>)}</ul>\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\"><Users className=\"h-4 w-4 mr-2\" />Public Cible</h4>\n                            <div className=\"space-y-2\">{pavilion.targetAudience.map((t, i) => <Badge key={i} variant=\"info\" size=\"sm\" className=\"mr-2 mb-2\">{t}</Badge>)}</div>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-6 flex space-x-4\">\n                          <Button onClick={() => toast.success(`Visite virtuelle lanc├⌐e pour le pavillon ${pavilion.name}.`)}><MapPin className=\"h-4 w-4 mr-2\" />Visiter le Pavillon</Button>\n                          <Button variant=\"outline\" onClick={() => toast.success(`Networking ouvert pour le pavillon ${pavilion.name}.`)}><Handshake className=\"h-4 w-4 mr-2\" />Networking</Button>\n                          <Button variant=\"outline\" onClick={() => toast.success(`Programme du pavillon ${pavilion.name} affich├⌐.`)}><Calendar className=\"h-4 w-4 mr-2\" />Programme</Button>\n                        </div>\n                      </motion.div>\n                    )}\n\n                    {!isSelected && (\n                      <div className=\"flex justify-between items-center\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedPavilion(pavilion.id)}>D├⌐couvrir</Button>\n                        <div className=\"text-xs text-gray-500\">Cliquez pour plus de d├⌐tails</div>\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PavillonsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\profile\\DetailedProfilePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { User, Mail, Phone, MapPin, Calendar, Edit2, Save, X } from 'lucide-react';\nimport useAuthStore from '../../store/authStore';\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  company?: string;\n  position?: string;\n  location?: string;\n  bio?: string;\n  avatar?: string;\n  createdAt: string;\n}\n\nexport const DetailedProfilePage: React.FC = () => {\n  const { user } = useAuthStore();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedProfile, setEditedProfile] = useState<Partial<UserProfile>>({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      // Simulate loading user profile data\n  toast.success('Profil utilisateur charg├⌐ (simulation).');\n      setLoading(false);\n    }\n  }, [user]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleSave = () => {\n    if (profile && editedProfile) {\n      setProfile({ ...profile, ...editedProfile });\n      setIsEditing(false);\n      // Here you would typically save to your backend\n      console.log('Profile updated:', editedProfile);\n  toast.success('Profil mis ├á jour (simulation).');\n    }\n  };\n\n  const handleCancel = () => {\n    setEditedProfile(profile || {});\n    setIsEditing(false);\n  };\n\n  const handleInputChange = (field: keyof UserProfile, value: string) => {\n    setEditedProfile(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Profile not found</h2>\n          <p className=\"text-gray-600\">Unable to load profile information.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"bg-white shadow-xl rounded-lg overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-8\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <img\n                  src={profile.avatar}\n                  alt=\"Profile\"\n                  className=\"w-20 h-20 rounded-full border-4 border-white shadow-lg\"\n                />\n                <div className=\"text-white\">\n                  <h1 className=\"text-3xl font-bold\">\n                    {profile.firstName} {profile.lastName}\n                  </h1>\n                  <p className=\"text-blue-100\">{profile.position} at {profile.company}</p>\n                </div>\n              </div>\n              <button\n                onClick={isEditing ? handleSave : handleEdit}\n                className=\"bg-white text-blue-600 px-4 py-2 rounded-lg font-medium hover:bg-blue-50 transition-colors flex items-center space-x-2\"\n              >\n                {isEditing ? (\n                  <>\n                    <Save className=\"w-4 h-4\" />\n                    <span>Save</span>\n                  </>\n                ) : (\n                  <>\n                    <Edit2 className=\"w-4 h-4\" />\n                    <span>Edit</span>\n                  </>\n                )}\n              </button>\n              {isEditing && (\n                <button\n                  onClick={handleCancel}\n                  className=\"ml-2 bg-gray-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-gray-600 transition-colors flex items-center space-x-2\"\n                >\n                  <X className=\"w-4 h-4\" />\n                  <span>Cancel</span>\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"px-6 py-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {/* Contact Information */}\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                  Contact Information\n                </h2>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"w-5 h-5 text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <label className=\"block text-sm font-medium text-gray-700\">Email</label>\n                      {isEditing ? (\n                        <input\n                          type=\"email\"\n                          value={editedProfile.email || ''}\n                          onChange={(e) => handleInputChange('email', e.target.value)}\n                          className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900\">{profile.email}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Phone className=\"w-5 h-5 text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <label className=\"block text-sm font-medium text-gray-700\">Phone</label>\n                      {isEditing ? (\n                        <input\n                          type=\"tel\"\n                          value={editedProfile.phone || ''}\n                          onChange={(e) => handleInputChange('phone', e.target.value)}\n                          className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900\">{profile.phone}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <MapPin className=\"w-5 h-5 text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <label className=\"block text-sm font-medium text-gray-700\">Location</label>\n                      {isEditing ? (\n                        <input\n                          type=\"text\"\n                          value={editedProfile.location || ''}\n                          onChange={(e) => handleInputChange('location', e.target.value)}\n                          className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900\">{profile.location}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"w-5 h-5 text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <label className=\"block text-sm font-medium text-gray-700\">Member since</label>\n                      <p className=\"text-gray-900\">\n                        {new Date(profile.createdAt).toLocaleDateString('en-US', {\n                          year: 'numeric',\n                          month: 'long',\n                          day: 'numeric'\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Professional Information */}\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                  Professional Information\n                </h2>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Company</label>\n                    {isEditing ? (\n                      <input\n                        type=\"text\"\n                        value={editedProfile.company || ''}\n                        onChange={(e) => handleInputChange('company', e.target.value)}\n                        className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    ) : (\n                      <p className=\"text-gray-900\">{profile.company}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Position</label>\n                    {isEditing ? (\n                      <input\n                        type=\"text\"\n                        value={editedProfile.position || ''}\n                        onChange={(e) => handleInputChange('position', e.target.value)}\n                        className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    ) : (\n                      <p className=\"text-gray-900\">{profile.position}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Bio</label>\n                    {isEditing ? (\n                      <textarea\n                        value={editedProfile.bio || ''}\n                        onChange={(e) => handleInputChange('bio', e.target.value)}\n                        rows={4}\n                        className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    ) : (\n                      <p className=\"text-gray-900\">{profile.bio}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\profile\\ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\ui\\Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\ui\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\ui\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\ui\\CountdownModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":2,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'salonDate' object construction makes the dependencies of useEffect Hook (at line 57) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'salonDate' in its own useMemo() Hook.","line":26,"column":9,"nodeType":"VariableDeclarator","endLine":26,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { X, Calendar, Clock, MapPin, Users, Building2, Globe, Mail } from 'lucide-react';\nimport { Card } from './Card';\nimport { Button } from './Button';\nimport { Badge } from './Badge';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'react-hot-toast';\n\ninterface CountdownModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface TimeLeft {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport const CountdownModal: React.FC<CountdownModalProps> = ({ isOpen, onClose }) => {\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const [isEventStarted, setIsEventStarted] = useState(false);\n\n  // Date du salon SIPORTS 2026\n  const salonDate = new Date('2026-02-05T09:30:00');\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const calculateTimeLeft = () => {\n      const now = new Date();\n      const difference = salonDate.getTime() - now.getTime();\n\n      if (difference <= 0) {\n        setIsEventStarted(true);\n        return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n      }\n\n      return {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        minutes: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((difference % (1000 * 60)) / 1000)\n      };\n    };\n\n    // Calcul initial\n    setTimeLeft(calculateTimeLeft());\n\n    // Mise ├á jour chaque seconde\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isOpen, salonDate]);\n\n  const salonInfo = {\n    name: 'SIPORTS 2026',\n    fullName: 'Salon International des Ports',\n    dates: '5-7 F├⌐vrier 2026',\n    location: 'El Jadida, Maroc',\n    venue: 'Mohammed VI Exhibition Center',\n    hours: '9h30 - 18h00',\n    stats: {\n      exhibitors: 330,\n      visitors: 6300,\n      countries: 42,\n      conferences: 40\n    }\n  };\n\n  const formatNumber = (num: number) => {\n    return num.toString().padStart(2, '0');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.9 }}\n          className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n        >\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 rounded-t-2xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">{salonInfo.name}</h2>\n                <p className=\"text-blue-100\">{salonInfo.fullName}</p>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"p-2 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors\"\n              >\n                <X className=\"h-6 w-6\" />\n              </button>\n            </div>\n\n            {/* Informations du salon */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{salonInfo.dates}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"h-4 w-4\" />\n                <span>{salonInfo.location}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{salonInfo.hours}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Compte ├á rebours */}\n          <div className=\"p-8\">\n            {isEventStarted ? (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"text-center\"\n              >\n                <div className=\"bg-green-100 p-8 rounded-2xl mb-6\">\n                  <div className=\"text-6xl mb-4\">≡ƒÄë</div>\n                  <h3 className=\"text-3xl font-bold text-green-800 mb-2\">\n                    Le salon a commenc├⌐ !\n                  </h3>\n                  <p className=\"text-green-700\">\n                    SIPORTS 2026 est maintenant ouvert. Bienvenue !\n                  </p>\n                </div>\n              </motion.div>\n            ) : (\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  Ouverture dans :\n                </h3>\n                <p className=\"text-gray-600 mb-8\">\n                  Plus que quelques {timeLeft.days > 30 ? 'mois' : timeLeft.days > 7 ? 'semaines' : 'jours'} avant l'ouverture du plus grand salon portuaire international\n                </p>\n\n                {/* Compteurs */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                  <motion.div\n                    key={timeLeft.days}\n                    initial={{ scale: 1.1 }}\n                    animate={{ scale: 1 }}\n                    className=\"bg-gradient-to-br from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-lg\"\n                  >\n                    <div className=\"text-4xl font-bold mb-2\">\n                      {formatNumber(timeLeft.days)}\n                    </div>\n                    <div className=\"text-blue-100 text-sm font-medium\">\n                      {timeLeft.days <= 1 ? 'Jour' : 'Jours'}\n                    </div>\n                  </motion.div>\n\n                  <motion.div\n                    key={timeLeft.hours}\n                    initial={{ scale: 1.1 }}\n                    animate={{ scale: 1 }}\n                    className=\"bg-gradient-to-br from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-lg\"\n                  >\n                    <div className=\"text-4xl font-bold mb-2\">\n                      {formatNumber(timeLeft.hours)}\n                    </div>\n                    <div className=\"text-purple-100 text-sm font-medium\">\n                      {timeLeft.hours <= 1 ? 'Heure' : 'Heures'}\n                    </div>\n                  </motion.div>\n\n                  <motion.div\n                    key={timeLeft.minutes}\n                    initial={{ scale: 1.1 }}\n                    animate={{ scale: 1 }}\n                    className=\"bg-gradient-to-br from-green-500 to-green-600 text-white p-6 rounded-xl shadow-lg\"\n                  >\n                    <div className=\"text-4xl font-bold mb-2\">\n                      {formatNumber(timeLeft.minutes)}\n                    </div>\n                    <div className=\"text-green-100 text-sm font-medium\">\n                      {timeLeft.minutes <= 1 ? 'Minute' : 'Minutes'}\n                    </div>\n                  </motion.div>\n\n                  <motion.div\n                    key={timeLeft.seconds}\n                    initial={{ scale: 1.1 }}\n                    animate={{ scale: 1 }}\n                    className=\"bg-gradient-to-br from-orange-500 to-orange-600 text-white p-6 rounded-xl shadow-lg\"\n                  >\n                    <div className=\"text-4xl font-bold mb-2\">\n                      {formatNumber(timeLeft.seconds)}\n                    </div>\n                    <div className=\"text-orange-100 text-sm font-medium\">\n                      {timeLeft.seconds <= 1 ? 'Seconde' : 'Secondes'}\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            )}\n\n            {/* Informations d├⌐taill├⌐es du salon */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n              <Card>\n                <div className=\"p-6\">\n                  <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                    <MapPin className=\"h-5 w-5 mr-2 text-blue-600\" />\n                    Lieu & Acc├¿s\n                  </h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Venue :</span>\n                      <p className=\"text-gray-600\">{salonInfo.venue}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Adresse :</span>\n                      <p className=\"text-gray-600\">Route de Casablanca, El Jadida 24000, Maroc</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Horaires :</span>\n                      <p className=\"text-gray-600\">{salonInfo.hours}</p>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              <Card>\n                <div className=\"p-6\">\n                  <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-blue-600\" />\n                    Chiffres Cl├⌐s\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {salonInfo.stats.exhibitors}+\n                      </div>\n                      <div className=\"text-xs text-gray-600\">Exposants</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {salonInfo.stats.visitors.toLocaleString()}+\n                      </div>\n                      <div className=\"text-xs text-gray-600\">Visiteurs</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {salonInfo.stats.countries}\n                      </div>\n                      <div className=\"text-xs text-gray-600\">Pays</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-orange-600\">\n                        {salonInfo.stats.conferences}+\n                      </div>\n                      <div className=\"text-xs text-gray-600\">Conf├⌐rences</div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Programme des 3 jours */}\n            <Card className=\"mb-6\">\n              <div className=\"p-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Programme des 3 Jours\n                </h4>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"font-bold text-blue-600 mb-2\">Jour 1 - 5 F├⌐vrier</div>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <div>ΓÇó C├⌐r├⌐monie d'ouverture</div>\n                      <div>ΓÇó Conf├⌐rences pl├⌐ni├¿res</div>\n                      <div>ΓÇó Networking d'accueil</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <div className=\"font-bold text-green-600 mb-2\">Jour 2 - 6 F├⌐vrier</div>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <div>ΓÇó Ateliers techniques</div>\n                      <div>ΓÇó Sessions B2B</div>\n                      <div>ΓÇó D├⌐monstrations</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                    <div className=\"font-bold text-purple-600 mb-2\">Jour 3 - 7 F├⌐vrier</div>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <div>ΓÇó Tables rondes</div>\n                      <div>ΓÇó Remise des prix</div>\n                      <div>ΓÇó C├⌐r├⌐monie de cl├┤ture</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                onClick={() => {\n                  toast.success('Rappel programm├⌐ : notification 24h avant ouverture, rappel mobile et email configur├⌐s, itin├⌐raire inclus.');\n                }}\n              >\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Programmer un Rappel\n              </Button>\n              \n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  const shareText = `≡ƒÜó SIPORTS 2026 - Salon International des Ports\\n≡ƒôà ${salonInfo.dates}\\n≡ƒôì ${salonInfo.location}\\n\\nΓÅ░ Plus que ${timeLeft.days} jours, ${timeLeft.hours} heures !\\n\\n≡ƒîÉ https://siportevent.com`;\n                  \n                  if (navigator.share) {\n                    navigator.share({\n                      title: 'SIPORTS 2026 - Compte ├á Rebours',\n                      text: shareText,\n                      url: window.location.origin\n                    });\n                  } else {\n                    navigator.clipboard.writeText(shareText);\n                    toast.success('≡ƒöù Compte ├á rebours copi├⌐ dans le presse-papiers !');\n                  }\n                }}\n              >\n                <Globe className=\"h-4 w-4 mr-2\" />\n                Partager le Compte ├á Rebours\n              </Button>\n              \n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  const calendarEvent = {\n                    title: 'SIPORTS 2026 - Salon International des Ports',\n                    start: '2026-02-05T09:30:00',\n                    end: '2026-02-07T18:00:00',\n                    location: 'Mohammed VI Exhibition Center, El Jadida, Maroc',\n                    description: 'Le plus grand salon portuaire international - 330+ exposants, 6300+ visiteurs de 42 pays'\n                  };\n                  \n                  const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(calendarEvent.title)}&dates=${calendarEvent.start.replace(/[-:]/g, '').replace('.000', '')}Z/${calendarEvent.end.replace(/[-:]/g, '').replace('.000', '')}Z&location=${encodeURIComponent(calendarEvent.location)}&details=${encodeURIComponent(calendarEvent.description)}`;\n                  \n                  window.open(googleCalendarUrl, '_blank');\n                    toast.success('≡ƒôà ├ëv├⌐nement ajout├⌐ ├á votre calendrier : SIPORTS 2026, rappels automatiques et itin├⌐raire inclus.');\n                }}\n              >\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Ajouter au Calendrier\n              </Button>\n            </div>\n\n            {/* Informations pratiques */}\n            <div className=\"mt-8 pt-6 border-t border-gray-200\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-sm\">\n                <div>\n                  <h5 className=\"font-semibold text-gray-900 mb-3\">Informations Pratiques</h5>\n                  <div className=\"space-y-2 text-gray-600\">\n                    <div>ΓÇó Inscription gratuite pour les visiteurs</div>\n                    <div>ΓÇó Parking gratuit sur site</div>\n                    <div>ΓÇó Navettes depuis l'a├⌐roport</div>\n                    <div>ΓÇó Restauration sur place</div>\n                    <div>ΓÇó WiFi gratuit dans tout le centre</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h5 className=\"font-semibold text-gray-900 mb-3\">Contact Organisation</h5>\n                  <div className=\"space-y-2 text-gray-600\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span>contact@siportevent.com</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Globe className=\"h-4 w-4\" />\n                      <span>www.siportevent.com</span>\n                    </div>\n                    <div>≡ƒô▒ +212 1 23 45 67 89</div>\n                    <div>≡ƒòÆ Lun-Ven: 9h-18h</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\ui\\LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\visitor\\VisitorDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Brain' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Search' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Handshake' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Linkedin' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useVisitorStore' is defined but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setStats' is assigned a value but never used.","line":41,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":25}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { \n  Users, \n  MessageCircle, \n  Calendar, \n  Brain, \n  Globe, \n  Search,\n  Filter,\n  Star,\n  Building2,\n  MapPin,\n  Zap,\n  Target,\n  Heart,\n  Eye,\n  User,\n  Award,\n  TrendingUp,\n  Network,\n  Handshake,\n  Mail,\n  Phone,\n  Linkedin,\n  Clock,\n  CheckCircle,\n  Plus,\n  Settings,\n  BarChart3\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useVisitorStore } from '../../store/visitorStore';\nimport useAuthStore from '../../store/authStore';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\n\nexport const VisitorDashboard: React.FC = () => {\n  const { user, isAuthenticated } = useAuthStore();\n  const [stats, setStats] = useState({\n    appointmentsBooked: 3,\n    exhibitorsVisited: 12,\n    eventsAttended: 5,\n    connectionsRequested: 8\n  });\n\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Acc├¿s non autoris├⌐\n          </h3>\n          <p className=\"text-gray-600\">\n            Veuillez vous connecter pour acc├⌐der ├á votre tableau de bord visiteur\n          </p>\n          <Link to=\"/login\" className=\"mt-4 inline-block\">\n            <Button>Se connecter</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Tableau de bord visiteur\n          </h1>\n          <p className=\"text-gray-600 mt-2\">\n            Bienvenue {user.name}, g├⌐rez vos activit├⌐s SIPORTS 2026\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">RDV programm├⌐s</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.appointmentsBooked}</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Exposants visit├⌐s</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.exhibitorsVisited}</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">├ëv├⌐nements</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.eventsAttended}</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Network className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Connexions</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.connectionsRequested}</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Calendar className=\"h-5 w-5 mr-2 text-blue-600\" />\n              Prendre un rendez-vous\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Planifiez des rencontres avec les exposants selon leurs disponibilit├⌐s\n            </p>\n            <Link to=\"/networking?action=schedule\">\n              <Button className=\"w-full\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Programmer un RDV\n              </Button>\n            </Link>\n          </Card>\n\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <MessageCircle className=\"h-5 w-5 mr-2 text-green-600\" />\n              Messagerie\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Communiquez directement avec les exposants et partenaires\n            </p>\n            <Link to=\"/chat\">\n              <Button variant=\"outline\" className=\"w-full\">\n                <MessageCircle className=\"h-4 w-4 mr-2\" />\n                Ouvrir la messagerie\n              </Button>\n            </Link>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Clock className=\"h-5 w-5 mr-2 text-gray-600\" />\n            Activit├⌐ r├⌐cente\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">RDV confirm├⌐ avec TechMarine</p>\n                  <p className=\"text-sm text-gray-600\">Demain ├á 14h30 - Stand A12</p>\n                </div>\n              </div>\n              <Badge variant=\"success\">Confirm├⌐</Badge>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <MessageCircle className=\"h-5 w-5 text-blue-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Nouveau message de PortLogistics</p>\n                  <p className=\"text-sm text-gray-600\">Il y a 2 heures</p>\n                </div>\n              </div>\n              <Badge variant=\"info\">Nouveau</Badge>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <Star className=\"h-5 w-5 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Exposant ajout├⌐ aux favoris</p>\n                  <p className=\"text-sm text-gray-600\">Maritime Solutions - Il y a 1 jour</p>\n                </div>\n              </div>\n              <Badge variant=\"warning\">Favori</Badge>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\components\\visitor\\VisitorProfileSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Smartphone' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5442,5445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5442,5445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  User, \n  Building2, \n  Mail, \n  Phone, \n  Globe, \n  MapPin,\n  Edit,\n  Save,\n  X,\n  Camera,\n  Target,\n  Award,\n  Settings,\n  Bell,\n  Shield,\n  Smartphone,\n  ArrowLeft\n} from 'lucide-react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { useVisitorStore } from '../../store/visitorStore';\nimport { motion } from 'framer-motion';\n\nexport const VisitorProfileSettings: React.FC = () => {\n  const { visitorProfile, updateProfile, updateNotificationPreferences, isLoading } = useVisitorStore();\n  const [isEditing, setIsEditing] = useState(false);\n  const [activeSection, setActiveSection] = useState<'profile' | 'interests' | 'notifications' | 'privacy'>('profile');\n  \n  const [formData, setFormData] = useState({\n    firstName: visitorProfile?.firstName || '',\n    lastName: visitorProfile?.lastName || '',\n    company: visitorProfile?.company || '',\n    position: visitorProfile?.position || '',\n    phone: visitorProfile?.phone || '',\n    country: visitorProfile?.country || '',\n    sectorsOfInterest: visitorProfile?.sectorsOfInterest || [],\n    visitObjectives: visitorProfile?.visitObjectives || [],\n    competencies: visitorProfile?.competencies || [],\n    thematicInterests: visitorProfile?.thematicInterests || []\n  });\n\n  const handleSave = async () => {\n    try {\n      await updateProfile(formData);\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: visitorProfile?.firstName || '',\n      lastName: visitorProfile?.lastName || '',\n      company: visitorProfile?.company || '',\n      position: visitorProfile?.position || '',\n      phone: visitorProfile?.phone || '',\n      country: visitorProfile?.country || '',\n      sectorsOfInterest: visitorProfile?.sectorsOfInterest || [],\n      visitObjectives: visitorProfile?.visitObjectives || [],\n      competencies: visitorProfile?.competencies || [],\n      thematicInterests: visitorProfile?.thematicInterests || []\n    });\n    setIsEditing(false);\n  };\n\n  const availableSectors = [\n    'Port Operations',\n    'Digital Transformation',\n    'Sustainability',\n    'Maritime Technology',\n    'Logistics',\n    'Infrastructure',\n    'Equipment Manufacturing',\n    'Consulting',\n    'Research & Development',\n    'Government & Regulation'\n  ];\n\n  const availableObjectives = [\n    'Recherche de fournisseurs',\n    'Veille technologique',\n    'Opportunit├⌐s de partenariat',\n    'Formation continue',\n    'Opportunit├⌐s d\\'emploi',\n    'Investissements',\n    'Benchmarking',\n    'Networking professionnel'\n  ];\n\n  const availableCompetencies = [\n    'Gestion de projet portuaire',\n    'Analyse de performance',\n    'Consulting strat├⌐gique',\n    'Transformation digitale',\n    'Gestion des op├⌐rations',\n    'D├⌐veloppement durable',\n    'Innovation technologique',\n    'Relations internationales'\n  ];\n\n  const availableThematics = [\n    'Technologies maritimes',\n    '├ënergies renouvelables',\n    'Logistique portuaire',\n    'Innovation digitale',\n    'D├⌐fense navale',\n    'Automatisation',\n    'Intelligence artificielle',\n    'Blockchain maritime'\n  ];\n\n  if (!visitorProfile) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Profil non trouv├⌐\n          </h3>\n          <p className=\"text-gray-600\">\n            Impossible de charger les informations du profil\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          {/* Bouton de retour */}\n          <div className=\"mb-4\">\n            <Link to=\"/visitor/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Visiteur\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Param├¿tres du Profil Visiteur\n            </h1>\n            <p className=\"text-gray-600\">\n              Personnalisez votre profil et vos pr├⌐f├⌐rences pour optimiser votre exp├⌐rience SIPORTS\n            </p>\n          </motion.div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Navigation Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <div className=\"p-4\">\n                <nav className=\"space-y-2\">\n                  {[\n                    { id: 'profile', label: 'Profil Personnel', icon: User },\n                    { id: 'interests', label: 'Int├⌐r├¬ts & Objectifs', icon: Target },\n                    { id: 'notifications', label: 'Notifications', icon: Bell },\n                    { id: 'privacy', label: 'Confidentialit├⌐', icon: Shield }\n                  ].map((section) => (\n                    <button\n                      key={section.id}\n                      onClick={() => setActiveSection(section.id as any)}\n                      className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${\n                        activeSection === section.id\n                          ? 'bg-blue-100 text-blue-700'\n                          : 'text-gray-600 hover:bg-gray-100'\n                      }`}\n                    >\n                      <section.icon className=\"h-4 w-4\" />\n                      <span className=\"text-sm font-medium\">{section.label}</span>\n                    </button>\n                  ))}\n                </nav>\n              </div>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Profil Personnel */}\n            {activeSection === 'profile' && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n              >\n                <Card>\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Informations Personnelles\n                      </h3>\n                      {!isEditing ? (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setIsEditing(true)}\n                        >\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Modifier\n                        </Button>\n                      ) : (\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleCancel}\n                          >\n                            <X className=\"h-4 w-4 mr-2\" />\n                            Annuler\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            onClick={handleSave}\n                            disabled={isLoading}\n                          >\n                            <Save className=\"h-4 w-4 mr-2\" />\n                            Sauvegarder\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Photo de Profil */}\n                    <div className=\"flex items-center space-x-6 mb-8\">\n                      <div className=\"relative\">\n                        <div className=\"h-20 w-20 bg-gray-300 rounded-full flex items-center justify-center\">\n                          {visitorProfile.avatar ? (\n                            <img\n                              src={visitorProfile.avatar}\n                              alt=\"Profile\"\n                              className=\"h-20 w-20 rounded-full object-cover\"\n                            />\n                          ) : (\n                            <User className=\"h-10 w-10 text-gray-600\" />\n                          )}\n                        </div>\n                        <button className=\"absolute bottom-0 right-0 bg-blue-600 text-white p-1.5 rounded-full shadow-lg hover:bg-blue-700 transition-colors\">\n                          <Camera className=\"h-3 w-3\" />\n                        </button>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">Photo de profil</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          Ajoutez une photo pour personnaliser votre profil\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Informations de Base */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Pr├⌐nom\n                        </label>\n                        {isEditing ? (\n                          <input\n                            type=\"text\"\n                            value={formData.firstName}\n                            onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : (\n                          <p className=\"text-gray-900\">{visitorProfile.firstName}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Nom\n                        </label>\n                        {isEditing ? (\n                          <input\n                            type=\"text\"\n                            value={formData.lastName}\n                            onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : (\n                          <p className=\"text-gray-900\">{visitorProfile.lastName}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Entreprise\n                        </label>\n                        {isEditing ? (\n                          <input\n                            type=\"text\"\n                            value={formData.company}\n                            onChange={(e) => setFormData({ ...formData, company: e.target.value })}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <Building2 className=\"h-4 w-4 text-gray-400\" />\n                            <p className=\"text-gray-900\">{visitorProfile.company}</p>\n                          </div>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Poste\n                        </label>\n                        {isEditing ? (\n                          <input\n                            type=\"text\"\n                            value={formData.position}\n                            onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : (\n                          <p className=\"text-gray-900\">{visitorProfile.position}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Email\n                        </label>\n                        <div className=\"flex items-center space-x-2\">\n                          <Mail className=\"h-4 w-4 text-gray-400\" />\n                          <p className=\"text-gray-900\">{visitorProfile.email}</p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          T├⌐l├⌐phone\n                        </label>\n                        {isEditing ? (\n                          <input\n                            type=\"tel\"\n                            value={formData.phone}\n                            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <Phone className=\"h-4 w-4 text-gray-400\" />\n                            <p className=\"text-gray-900\">{visitorProfile.phone}</p>\n                          </div>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Pays\n                        </label>\n                        <div className=\"flex items-center space-x-2\">\n                          <MapPin className=\"h-4 w-4 text-gray-400\" />\n                          <p className=\"text-gray-900\">{visitorProfile.country}</p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Type de Pass\n                        </label>\n                        <Badge \n                          className={`${\n                            visitorProfile.passType === 'vip' ? 'bg-yellow-100 text-yellow-800' :\n                            visitorProfile.passType === 'premium' ? 'bg-purple-100 text-purple-800' :\n                            visitorProfile.passType === 'basic' ? 'bg-blue-100 text-blue-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`}\n                        >\n                          {visitorProfile.passType === 'vip' ? 'Pass VIP' :\n                           visitorProfile.passType === 'premium' ? 'Pass Premium' :\n                           visitorProfile.passType === 'basic' ? 'Pass Basic' :\n                           'Pass Gratuit'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Int├⌐r├¬ts & Objectifs */}\n            {activeSection === 'interests' && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                className=\"space-y-6\"\n              >\n                {/* Secteurs d'Int├⌐r├¬t */}\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                      <Target className=\"h-5 w-5 inline mr-2\" />\n                      Secteurs d'Int├⌐r├¬t\n                    </h3>\n                    \n                    {isEditing ? (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {availableSectors.map((sector) => (\n                          <label key={sector} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.sectorsOfInterest.includes(sector)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  setFormData({\n                                    ...formData,\n                                    sectorsOfInterest: [...formData.sectorsOfInterest, sector]\n                                  });\n                                } else {\n                                  setFormData({\n                                    ...formData,\n                                    sectorsOfInterest: formData.sectorsOfInterest.filter(s => s !== sector)\n                                  });\n                                }\n                              }}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                            <span className=\"text-sm text-gray-700\">{sector}</span>\n                          </label>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {visitorProfile.sectorsOfInterest.map((sector) => (\n                          <Badge key={sector} variant=\"info\" size=\"sm\">\n                            {sector}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n\n                {/* Objectifs de Visite */}\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                      <Award className=\"h-5 w-5 inline mr-2\" />\n                      Objectifs de Visite\n                    </h3>\n                    \n                    {isEditing ? (\n                      <div className=\"grid grid-cols-1 gap-2\">\n                        {availableObjectives.map((objective) => (\n                          <label key={objective} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.visitObjectives.includes(objective)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  setFormData({\n                                    ...formData,\n                                    visitObjectives: [...formData.visitObjectives, objective]\n                                  });\n                                } else {\n                                  setFormData({\n                                    ...formData,\n                                    visitObjectives: formData.visitObjectives.filter(o => o !== objective)\n                                  });\n                                }\n                              }}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                            <span className=\"text-sm text-gray-700\">{objective}</span>\n                          </label>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {visitorProfile.visitObjectives.map((objective) => (\n                          <div key={objective} className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                            <span className=\"text-sm text-gray-700\">{objective}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n\n                {/* Comp├⌐tences */}\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                      Comp├⌐tences & Expertises\n                    </h3>\n                    \n                    {isEditing ? (\n                      <div className=\"grid grid-cols-1 gap-2\">\n                        {availableCompetencies.map((competency) => (\n                          <label key={competency} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.competencies.includes(competency)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  setFormData({\n                                    ...formData,\n                                    competencies: [...formData.competencies, competency]\n                                  });\n                                } else {\n                                  setFormData({\n                                    ...formData,\n                                    competencies: formData.competencies.filter(c => c !== competency)\n                                  });\n                                }\n                              }}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                            <span className=\"text-sm text-gray-700\">{competency}</span>\n                          </label>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {visitorProfile.competencies.map((competency) => (\n                          <Badge key={competency} variant=\"success\" size=\"sm\">\n                            {competency}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n\n                {/* Th├⌐matiques d'Int├⌐r├¬t */}\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                      Th├⌐matiques d'Int├⌐r├¬t\n                    </h3>\n                    \n                    {isEditing ? (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {availableThematics.map((thematic) => (\n                          <label key={thematic} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.thematicInterests.includes(thematic)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  setFormData({\n                                    ...formData,\n                                    thematicInterests: [...formData.thematicInterests, thematic]\n                                  });\n                                } else {\n                                  setFormData({\n                                    ...formData,\n                                    thematicInterests: formData.thematicInterests.filter(t => t !== thematic)\n                                  });\n                                }\n                              }}\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            />\n                            <span className=\"text-sm text-gray-700\">{thematic}</span>\n                          </label>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {visitorProfile.thematicInterests.map((thematic) => (\n                          <Badge key={thematic} variant=\"warning\" size=\"sm\">\n                            {thematic}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Notifications */}\n            {activeSection === 'notifications' && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n              >\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                      <Bell className=\"h-5 w-5 inline mr-2\" />\n                      Pr├⌐f├⌐rences de Notification\n                    </h3>\n                    \n                    <div className=\"space-y-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Notifications Email</h4>\n                          <p className=\"text-sm text-gray-600\">Recevez les notifications par email</p>\n                        </div>\n                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={visitorProfile.notificationPreferences.email}\n                            onChange={(e) => updateNotificationPreferences({ email: e.target.checked })}\n                            className=\"sr-only peer\"\n                          />\n                          <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                        </label>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Notifications Push</h4>\n                          <p className=\"text-sm text-gray-600\">Notifications sur votre appareil</p>\n                        </div>\n                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={visitorProfile.notificationPreferences.push}\n                            onChange={(e) => updateNotificationPreferences({ push: e.target.checked })}\n                            className=\"sr-only peer\"\n                          />\n                          <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                        </label>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">Notifications In-App</h4>\n                          <p className=\"text-sm text-gray-600\">Notifications dans l'application</p>\n                        </div>\n                        <label className=\"relative inline-flex items-center cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={visitorProfile.notificationPreferences.inApp}\n                            onChange={(e) => updateNotificationPreferences({ inApp: e.target.checked })}\n                            className=\"sr-only peer\"\n                          />\n                          <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Confidentialit├⌐ */}\n            {activeSection === 'privacy' && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n              >\n                <Card>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                      <Shield className=\"h-5 w-5 inline mr-2\" />\n                      Param├¿tres de Confidentialit├⌐\n                    </h3>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-3\">\n                          Visibilit├⌐ du Profil\n                        </h4>\n                        <div className=\"space-y-3\">\n                          <label className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"radio\"\n                              name=\"profileVisibility\"\n                              value=\"public\"\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm text-gray-700\">Public - Visible par tous les participants</span>\n                          </label>\n                          <label className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"radio\"\n                              name=\"profileVisibility\"\n                              value=\"connections\"\n                              defaultChecked\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm text-gray-700\">Connexions uniquement - Visible par mes connexions</span>\n                          </label>\n                          <label className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"radio\"\n                              name=\"profileVisibility\"\n                              value=\"private\"\n                              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm text-gray-700\">Priv├⌐ - Non visible dans les recherches</span>\n                          </label>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-3\">\n                          Partage des Donn├⌐es\n                        </h4>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-700\">Permettre aux exposants de me contacter</span>\n                            <label className=\"relative inline-flex items-center cursor-pointer\">\n                              <input type=\"checkbox\" defaultChecked className=\"sr-only peer\" />\n                              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                            </label>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-700\">Inclure dans les recommandations IA</span>\n                            <label className=\"relative inline-flex items-center cursor-pointer\">\n                              <input type=\"checkbox\" defaultChecked className=\"sr-only peer\" />\n                              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <h4 className=\"font-medium text-gray-900 mb-3\">\n                          Conformit├⌐ RGPD\n                        </h4>\n                        <p className=\"text-sm text-gray-600 mb-4\">\n                          Vos donn├⌐es sont prot├⌐g├⌐es selon le R├¿glement G├⌐n├⌐ral sur la Protection des Donn├⌐es (RGPD).\n                        </p>\n                        <div className=\"flex space-x-3\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            T├⌐l├⌐charger mes donn├⌐es\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Supprimer mon compte\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\hooks\\useGoogleAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1191,1194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1191,1194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1465,1468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1465,1468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { User as FirebaseUser } from 'firebase/auth';\nimport GoogleAuthService from '../services/googleAuth';\nimport useAuthStore from '../store/authStore';\n\ninterface UseGoogleAuthReturn {\n  isInitialized: boolean;\n  currentUser: FirebaseUser | null;\n  signInWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const useGoogleAuth = (): UseGoogleAuthReturn => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { loginWithGoogle, logout } = useAuthStore();\n\n  useEffect(() => {\n    // ├ëcouter les changements d'├⌐tat d'authentification\n    const unsubscribe = GoogleAuthService.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setIsInitialized(true);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const signInWithGoogle = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await loginWithGoogle();\n    } catch (err: any) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await GoogleAuthService.signOut();\n      logout();\n    } catch (err: any) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    isInitialized,\n    currentUser,\n    signInWithGoogle,\n    signOut,\n    isLoading,\n    error\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\hooks\\useTranslation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1502,1505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1502,1505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1750,1753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1750,1753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2004,2007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2004,2007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2443,2446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2443,2446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2860,2863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2860,2863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3284,3287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3284,3287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3510,3513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3510,3513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3535,3538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3535,3538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3792,3795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3792,3795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3818,3821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3818,3821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4081,4084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4081,4084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4107,4110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4107,4110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n// V├⌐rifier si Supabase est configur├⌐ avec de vraies valeurs\nconst isSupabaseConfigured = supabaseUrl && \n                             supabaseAnonKey &&\n                             supabaseUrl.startsWith('https://') &&\n                             !supabaseUrl.includes('placeholder') &&\n                             !supabaseUrl.includes('votre-project-id') &&\n                             supabaseAnonKey.length > 50 &&\n                             !supabaseAnonKey.includes('placeholder');\n\nif (!isSupabaseConfigured) {\n  console.warn('ΓÜá∩╕Å Supabase non configur├⌐ - Mode d├⌐mo activ├⌐');\n  console.warn('Pour activer Supabase, configurez VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY dans .env');\n  console.warn('URL actuelle:', supabaseUrl);\n}\n\n// Cr├⌐er le client Supabase seulement si configur├⌐ correctement\nexport const supabase = isSupabaseConfigured && supabaseUrl && supabaseAnonKey\n  ? createClient(supabaseUrl, supabaseAnonKey)\n  : null;\n\n// Export de la fonction de v├⌐rification\nexport const isSupabaseReady = () => isSupabaseConfigured && supabase !== null;\n\n// Types pour TypeScript\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string;\n          email: string;\n          name: string;\n          type: 'exhibitor' | 'partner' | 'visitor' | 'admin';\n          profile: any;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          email: string;\n          name: string;\n          type: 'exhibitor' | 'partner' | 'visitor' | 'admin';\n          profile: any;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          email?: string;\n          name?: string;\n          type?: 'exhibitor' | 'partner' | 'visitor' | 'admin';\n          profile?: any;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      exhibitors: {\n        Row: {\n          id: string;\n          user_id: string;\n          company_name: string;\n          category: string;\n          sector: string;\n          description: string;\n          logo_url: string | null;\n          website: string | null;\n          verified: boolean;\n          featured: boolean;\n          contact_info: any;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          user_id: string;\n          company_name: string;\n          category: string;\n          sector: string;\n          description: string;\n          logo_url?: string | null;\n          website?: string | null;\n          verified?: boolean;\n          featured?: boolean;\n          contact_info?: any;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          user_id?: string;\n          company_name?: string;\n          category?: string;\n          sector?: string;\n          description?: string;\n          logo_url?: string | null;\n          website?: string | null;\n          verified?: boolean;\n          featured?: boolean;\n          contact_info?: any;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      mini_sites: {\n        Row: {\n          id: string;\n          exhibitor_id: string;\n          theme: string;\n          custom_colors: any;\n          sections: any;\n          published: boolean;\n          views: number;\n          last_updated: string;\n          created_at: string;\n        };\n        Insert: {\n          id?: string;\n          exhibitor_id: string;\n          theme: string;\n          custom_colors?: any;\n          sections?: any;\n          published?: boolean;\n          views?: number;\n          last_updated?: string;\n          created_at?: string;\n        };\n        Update: {\n          id?: string;\n          exhibitor_id?: string;\n          theme?: string;\n          custom_colors?: any;\n          sections?: any;\n          published?: boolean;\n          views?: number;\n          last_updated?: string;\n          created_at?: string;\n        };\n      };\n      products: {\n        Row: {\n          id: string;\n          exhibitor_id: string;\n          name: string;\n          description: string;\n          category: string;\n          images: string[];\n          specifications: string | null;\n          price: number | null;\n          featured: boolean;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          exhibitor_id: string;\n          name: string;\n          description: string;\n          category: string;\n          images?: string[];\n          specifications?: string | null;\n          price?: number | null;\n          featured?: boolean;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          exhibitor_id?: string;\n          name?: string;\n          description?: string;\n          category?: string;\n          images?: string[];\n          specifications?: string | null;\n          price?: number | null;\n          featured?: boolean;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      appointments: {\n        Row: {\n          id: string;\n          exhibitor_id: string;\n          visitor_id: string;\n          time_slot_id: string;\n          status: 'pending' | 'confirmed' | 'cancelled' | 'completed';\n          message: string | null;\n          notes: string | null;\n          rating: number | null;\n          created_at: string;\n          meeting_type: 'in-person' | 'virtual' | 'hybrid';\n          meeting_link: string | null;\n        };\n        Insert: {\n          id?: string;\n          exhibitor_id: string;\n          visitor_id: string;\n          time_slot_id: string;\n          status?: 'pending' | 'confirmed' | 'cancelled' | 'completed';\n          message?: string | null;\n          notes?: string | null;\n          rating?: number | null;\n          created_at?: string;\n          meeting_type?: 'in-person' | 'virtual' | 'hybrid';\n          meeting_link?: string | null;\n        };\n        Update: {\n          id?: string;\n          exhibitor_id?: string;\n          visitor_id?: string;\n          time_slot_id?: string;\n          status?: 'pending' | 'confirmed' | 'cancelled' | 'completed';\n          message?: string | null;\n          notes?: string | null;\n          rating?: number | null;\n          created_at?: string;\n          meeting_type?: 'in-person' | 'virtual' | 'hybrid';\n          meeting_link?: string | null;\n        };\n      };\n      events: {\n        Row: {\n          id: string;\n          title: string;\n          description: string;\n          type: 'webinar' | 'roundtable' | 'networking' | 'workshop' | 'conference';\n          event_date: string;\n          start_time: string;\n          end_time: string;\n          capacity: number;\n          registered: number;\n          category: string;\n          virtual: boolean;\n          featured: boolean;\n          location: string | null;\n          meeting_link: string | null;\n          tags: string[];\n          created_at: string;\n        };\n        Insert: {\n          id?: string;\n          title: string;\n          description: string;\n          type: 'webinar' | 'roundtable' | 'networking' | 'workshop' | 'conference';\n          event_date: string;\n          start_time: string;\n          end_time: string;\n          capacity?: number;\n          registered?: number;\n          category: string;\n          virtual?: boolean;\n          featured?: boolean;\n          location?: string | null;\n          meeting_link?: string | null;\n          tags?: string[];\n          created_at?: string;\n        };\n        Update: {\n          id?: string;\n          title?: string;\n          description?: string;\n          type?: 'webinar' | 'roundtable' | 'networking' | 'workshop' | 'conference';\n          event_date?: string;\n          start_time?: string;\n          end_time?: string;\n          capacity?: number;\n          registered?: number;\n          category?: string;\n          virtual?: boolean;\n          featured?: boolean;\n          location?: string | null;\n          meeting_link?: string | null;\n          tags?: string[];\n          created_at?: string;\n        };\n      };\n    };\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\ArticleDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbsUp' is defined but never used.","line":4,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":90},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":4,"column":175,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":179},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronRight' is defined but never used.","line":4,"column":181,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":193},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[814,817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[814,817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[883,886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[883,886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'react-hot-toast';\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { ArrowLeft, Calendar, Clock, User, Eye, Share2, Bookmark, MessageCircle, ThumbsUp, Tag, ExternalLink, Download, Printer as Print, Globe, TrendingUp, BookOpen, Heart, Star, ChevronRight, Facebook, Twitter, Linkedin } from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { useNewsStore } from '../store/newsStore';\nimport { motion } from 'framer-motion';\n\nexport const ArticleDetailPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const { articles, fetchNews } = useNewsStore();\n  const [article, setArticle] = useState<any>(null);\n  const [relatedArticles, setRelatedArticles] = useState<any[]>([]);\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [likes, setLikes] = useState(0);\n  const [readingProgress, setReadingProgress] = useState(0);\n\n  useEffect(() => {\n    fetchNews();\n  }, [fetchNews]);\n\n  useEffect(() => {\n    if (id && articles.length > 0) {\n      const foundArticle = articles.find(a => a.id === id);\n      if (foundArticle) {\n        setArticle(foundArticle);\n        setLikes(Math.floor(Math.random() * 100) + 20);\n        \n        // Articles similaires\n        const related = articles\n          .filter(a => a.id !== id && (a.category === foundArticle.category || \n                      a.tags.some(tag => foundArticle.tags.includes(tag))))\n          .slice(0, 3);\n        setRelatedArticles(related);\n      }\n    }\n  }, [id, articles]);\n\n  // Suivi du progr├¿s de lecture\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.scrollY;\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const progress = (scrollTop / docHeight) * 100;\n      setReadingProgress(Math.min(progress, 100));\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  if (!article) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Chargement de l'article...\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      weekday: 'long',\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }).format(date);\n  };\n\n  const formatReadTime = (minutes: number) => {\n    return `${minutes} min de lecture`;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      '├ëv├⌐nement': 'bg-blue-100 text-blue-800',\n      'Innovation': 'bg-purple-100 text-purple-800',\n      'Partenariat': 'bg-green-100 text-green-800',\n      'Durabilit├⌐': 'bg-emerald-100 text-emerald-800',\n      'Formation': 'bg-orange-100 text-orange-800',\n      'Commerce': 'bg-indigo-100 text-indigo-800'\n    };\n    return colors[category] || 'bg-gray-100 text-gray-800';\n  };\n\n  const handleShare = (platform: string) => {\n    const shareData = {\n      title: article.title,\n      text: article.excerpt,\n      url: window.location.href\n    };\n\n    const urls = {\n      facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareData.url)}`,\n      twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareData.title)}&url=${encodeURIComponent(shareData.url)}`,\n      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareData.url)}`\n    };\n\n    if (platform === 'native' && navigator.share) {\n      navigator.share(shareData);\n    } else if (urls[platform as keyof typeof urls]) {\n      window.open(urls[platform as keyof typeof urls], '_blank', 'width=600,height=400');\n    } else {\n      navigator.clipboard.writeText(shareData.url);\n      toast.success('≡ƒöù Lien de l\\'article copi├⌐ dans le presse-papiers !');\n    }\n  };\n\n  const handleBookmark = () => {\n  setIsBookmarked(!isBookmarked);\n  const action = isBookmarked ? 'retir├⌐ des' : 'ajout├⌐ aux';\n  toast.success(`≡ƒôû Article ${action} favoris !`);\n  };\n\n  const handleLike = () => {\n    setIsLiked(!isLiked);\n    setLikes(prev => isLiked ? prev - 1 : prev + 1);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleDownloadPDF = () => {\n    toast('≡ƒôä G├⌐n├⌐ration du PDF en cours...', { icon: '≡ƒôä' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Barre de progression de lecture */}\n      <div className=\"fixed top-0 left-0 w-full h-1 bg-gray-200 z-50\">\n        <div \n          className=\"h-full bg-blue-600 transition-all duration-300\"\n          style={{ width: `${readingProgress}%` }}\n        />\n      </div>\n\n      {/* Header Article */}\n      <div className=\"bg-gray-50 border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Link to=\"/news\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour aux actualit├⌐s\n              </Button>\n            </Link>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={handleBookmark}\n                className={isBookmarked ? 'bg-yellow-50 border-yellow-300 text-yellow-700' : ''}\n              >\n                <Bookmark className={`h-4 w-4 ${isBookmarked ? 'fill-current' : ''}`} />\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={handlePrint}>\n                <Print className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={handleDownloadPDF}>\n                <Download className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleShare('native')}>\n                <Share2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* M├⌐tadonn├⌐es Article */}\n          <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600\">\n            <Badge className={getCategoryColor(article.category)} size=\"sm\">\n              {article.category}\n            </Badge>\n            \n            <div className=\"flex items-center space-x-1\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>{formatDate(article.publishedAt)}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{formatReadTime(article.readTime)}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-1\">\n              <Eye className=\"h-4 w-4\" />\n              <span>{article.views.toLocaleString()} vues</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-1\">\n              <User className=\"h-4 w-4\" />\n              <span>{article.author}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Contenu Principal */}\n      <article className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Titre et Image */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-12\"\n        >\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6 leading-tight\">\n            {article.title}\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-8 leading-relaxed\">\n            {article.excerpt}\n          </p>\n          \n          {article.image && (\n            <div className=\"relative mb-8\">\n              <img\n                src={article.image}\n                alt={article.title}\n                className=\"w-full h-96 object-cover rounded-2xl shadow-lg\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl\" />\n            </div>\n          )}\n        </motion.div>\n\n        {/* Contenu de l'Article */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"prose prose-lg max-w-none mb-12\"\n        >\n          <div className=\"text-gray-800 leading-relaxed space-y-6\">\n            {/* Contenu enrichi simul├⌐ */}\n            <p className=\"text-lg\">\n              {article.content || `L'industrie portuaire mondiale conna├«t une transformation sans pr├⌐c├⌐dent. Les ports modernes ne sont plus seulement des points de transit, mais deviennent de v├⌐ritables hubs technologiques int├⌐gr├⌐s dans l'├⌐conomie num├⌐rique mondiale.`}\n            </p>\n\n            <h2 className=\"text-2xl font-bold text-gray-900 mt-8 mb-4\">\n              Les Enjeux de la Transformation Digitale\n            </h2>\n            \n            <p>\n              La digitalisation des ports repr├⌐sente un d├⌐fi majeur pour l'industrie maritime. Les autorit├⌐s portuaires investissent massivement dans des technologies de pointe pour optimiser leurs op├⌐rations et am├⌐liorer leur comp├⌐titivit├⌐.\n            </p>\n\n            <blockquote className=\"border-l-4 border-blue-600 pl-6 py-4 bg-blue-50 rounded-r-lg my-8\">\n              <p className=\"text-lg italic text-blue-900\">\n                \"L'avenir des ports se joue aujourd'hui dans leur capacit├⌐ ├á int├⌐grer les technologies ├⌐mergentes tout en pr├⌐servant leur efficacit├⌐ op├⌐rationnelle.\"\n              </p>\n              <footer className=\"text-blue-700 mt-2\">ΓÇö {article.author}</footer>\n            </blockquote>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">\n              Technologies ├ëmergentes\n            </h3>\n            \n            <ul className=\"space-y-2 ml-6\">\n              <li className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                <span>Intelligence Artificielle pour l'optimisation des flux</span>\n              </li>\n              <li className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                <span>IoT et capteurs pour la surveillance en temps r├⌐el</span>\n              </li>\n              <li className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                <span>Blockchain pour la tra├ºabilit├⌐ des marchandises</span>\n              </li>\n              <li className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                <span>Automatisation des ├⌐quipements de manutention</span>\n              </li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">\n              Impact sur l'├ëcosyst├¿me Portuaire\n            </h3>\n            \n            <p>\n              Cette transformation ne concerne pas seulement les infrastructures, mais l'ensemble de l'├⌐cosyst├¿me portuaire. Les op├⌐rateurs, les transitaires, les transporteurs et m├¬me les autorit├⌐s douani├¿res doivent s'adapter ├á ces nouvelles r├⌐alit├⌐s technologiques.\n            </p>\n\n            <div className=\"bg-gray-50 p-6 rounded-xl my-8\">\n              <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2 text-green-600\" />\n                Chiffres Cl├⌐s\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">85%</div>\n                  <div className=\"text-sm text-gray-600\">Ports en digitalisation</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">+40%</div>\n                  <div className=\"text-sm text-gray-600\">Gain d'efficacit├⌐</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-purple-600\">2.5MΓé¼</div>\n                  <div className=\"text-sm text-gray-600\">Investissement moyen</div>\n                </div>\n              </div>\n            </div>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">\n              Perspectives d'Avenir\n            </h3>\n            \n            <p>\n              L'avenir des ports s'annonce prometteur avec l'├⌐mergence de nouvelles technologies et l'engagement croissant vers la durabilit├⌐. SIPORTS 2026 sera l'occasion de d├⌐couvrir ces innovations et de rencontrer les acteurs qui fa├ºonnent l'avenir du secteur portuaire.\n            </p>\n\n            {article.sourceUrl && (\n              <div className=\"bg-blue-50 p-4 rounded-lg mt-8\">\n                <p className=\"text-sm text-blue-800 mb-2\">\n                  <Globe className=\"h-4 w-4 inline mr-1\" />\n                  Source officielle :\n                </p>\n                <a \n                  href={article.sourceUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  {article.sourceUrl}\n                  <ExternalLink className=\"h-4 w-4 inline ml-1\" />\n                </a>\n              </div>\n            )}\n          </div>\n        </motion.div>\n\n        {/* Tags */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"mb-8\"\n        >\n          <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n            <Tag className=\"h-4 w-4 mr-2\" />\n            Mots-cl├⌐s\n          </h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {article.tags.map((tag: string, index: number) => (\n              <Badge key={index} variant=\"info\" size=\"sm\" className=\"cursor-pointer hover:bg-blue-200\">\n                #{tag}\n              </Badge>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Actions Sociales */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"flex items-center justify-between py-6 border-t border-b border-gray-200 mb-12\"\n        >\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLike}\n              className={`${isLiked ? 'bg-red-50 border-red-300 text-red-700' : ''}`}\n            >\n              <Heart className={`h-4 w-4 mr-2 ${isLiked ? 'fill-current text-red-500' : ''}`} />\n              {likes} J'aime\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Commenter\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600 mr-3\">Partager :</span>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => handleShare('facebook')}\n              className=\"text-blue-600 border-blue-300 hover:bg-blue-50\"\n            >\n              <Facebook className=\"h-4 w-4\" />\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => handleShare('twitter')}\n              className=\"text-sky-600 border-sky-300 hover:bg-sky-50\"\n            >\n              <Twitter className=\"h-4 w-4\" />\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => handleShare('linkedin')}\n              className=\"text-blue-700 border-blue-300 hover:bg-blue-50\"\n            >\n              <Linkedin className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Informations Auteur */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.8 }}\n          className=\"mb-12\"\n        >\n          <Card className=\"p-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"h-16 w-16 bg-gray-200 rounded-full flex items-center justify-center\">\n                <User className=\"h-8 w-8 text-gray-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-gray-900 text-lg mb-2\">\n                  {article.author}\n                </h4>\n                <p className=\"text-gray-600 mb-3\">\n                  Expert en d├⌐veloppement portuaire et innovation maritime. Contributeur r├⌐gulier aux publications sp├⌐cialis├⌐es du secteur.\n                </p>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                  <span>≡ƒôº {article.author.toLowerCase().replace(' ', '.')}@siportevent.com</span>\n                  <span>≡ƒöù LinkedIn</span>\n                  <span>≡ƒô░ 12 articles publi├⌐s</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Articles Similaires */}\n        {relatedArticles.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1.0 }}\n            className=\"mb-12\"\n          >\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">\n              Articles Similaires\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {relatedArticles.map((relatedArticle, index) => (\n                <motion.div\n                  key={relatedArticle.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 1.1 + index * 0.1 }}\n                >\n                  <Card hover className=\"h-full\">\n                    <img\n                      src={relatedArticle.image}\n                      alt={relatedArticle.title}\n                      className=\"w-full h-48 object-cover rounded-t-lg\"\n                    />\n                    <div className=\"p-4\">\n                      <Badge className={getCategoryColor(relatedArticle.category) + ' mb-3'} size=\"sm\">\n                        {relatedArticle.category}\n                      </Badge>\n                      \n                      <h4 className=\"font-semibold text-gray-900 mb-2 line-clamp-2\">\n                        {relatedArticle.title}\n                      </h4>\n                      \n                      <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n                        {relatedArticle.excerpt}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n                        <span>{formatDate(relatedArticle.publishedAt)}</span>\n                        <span>{formatReadTime(relatedArticle.readTime)}</span>\n                      </div>\n                      \n                      <Link to={`/news/${relatedArticle.id}`}>\n                        <Button size=\"sm\" className=\"w-full\">\n                          <BookOpen className=\"h-4 w-4 mr-2\" />\n                          Lire l'article\n                        </Button>\n                      </Link>\n                    </div>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n\n        {/* Newsletter CTA */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 1.2 }}\n        >\n          <Card className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n            <div className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\">\n                Restez inform├⌐ des actualit├⌐s portuaires\n              </h3>\n              <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n                Recevez les derni├¿res nouvelles du secteur portuaire et les actualit├⌐s \n                exclusives de SIPORTS 2026 directement dans votre bo├«te mail\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n                <input\n                  type=\"email\"\n                  placeholder=\"votre@email.com\"\n                  className=\"flex-1 px-4 py-3 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-white\"\n                />\n                <Button \n                  size=\"lg\" \n                  className=\"bg-white text-blue-600 hover:bg-blue-50\"\n                  onClick={() => {\n                    toast.success('Γ£à Inscription newsletter confirm├⌐e.');\n                  }}\n                >\n                  S'abonner\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      </article>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        <div className=\"flex flex-col space-y-3\">\n          <Button \n            className=\"rounded-full w-12 h-12 shadow-lg\"\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n            title=\"Retour en haut\"\n          >\n            <ArrowLeft className=\"h-5 w-5 rotate-90\" />\n          </Button>\n          \n          <Button \n            variant=\"outline\" \n            className=\"rounded-full w-12 h-12 shadow-lg bg-white\"\n            onClick={() => handleShare('native')}\n            title=\"Partager l'article\"\n          >\n            <Share2 className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\ExhibitorsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10173,10176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10173,10176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13403,13406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13403,13406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Search, \n  Filter, \n  Grid, \n  List, \n  MapPin, \n  Users, \n  ExternalLink,\n  Star,\n  Verified,\n  Calendar,\n  MessageCircle\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Badge } from '../components/ui/Badge';\nimport { Button } from '../components/ui/Button';\nimport { useExhibitorStore } from '../store/exhibitorStore';\nimport { motion } from 'framer-motion';\n\nexport const ExhibitorsPage: React.FC = () => {\n  const { \n    filteredExhibitors, \n    filters, \n    isLoading, \n    fetchExhibitors, \n    setFilters \n  } = useExhibitorStore();\n  \n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    fetchExhibitors();\n  }, [fetchExhibitors]);\n\n  const categories = [\n    { value: '', label: 'Toutes les cat├⌐gories' },\n    { value: 'institutional', label: 'Institutionnel' },\n    { value: 'port-industry', label: 'Industrie Portuaire' },\n    { value: 'port-operations', label: 'Exploitation & Gestion' },\n    { value: 'academic', label: 'Acad├⌐mique & Formation' }\n  ];\n\n  const getCategoryLabel = (category: string) => {\n    const labels = {\n      'institutional': 'Institutionnel',\n      'port-industry': 'Industrie Portuaire',\n      'port-operations': 'Exploitation & Gestion',\n      'academic': 'Acad├⌐mique & Formation'\n    };\n    return labels[category as keyof typeof labels] || category;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      'institutional': 'success',\n      'port-industry': 'error',\n      'port-operations': 'info',\n      'academic': 'warning'\n    };\n    return colors[category as keyof typeof colors] || 'default';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n            <div className=\"mb-6 lg:mb-0\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Exposants SIPORTS 2026\n              </h1>\n              <p className=\"text-lg text-gray-600\">\n                D├⌐couvrez les {filteredExhibitors.length} exposants participants au salon\n              </p>\n            </div>\n            \n            {/* Search and View Controls */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1 sm:w-80\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Rechercher un exposant...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters({ search: e.target.value })}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"flex items-center\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filtres\n                </Button>\n                \n                <div className=\"flex border border-gray-300 rounded-lg\">\n                  <button\n                    onClick={() => setViewMode('grid')}\n                    className={`p-2 ${viewMode === 'grid' ? 'bg-blue-50 text-blue-600' : 'text-gray-400'}`}\n                  >\n                    <Grid className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={() => setViewMode('list')}\n                    className={`p-2 ${viewMode === 'list' ? 'bg-blue-50 text-blue-600' : 'text-gray-400'}`}\n                  >\n                    <List className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Filters */}\n          {showFilters && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mt-6 p-4 bg-gray-50 rounded-lg\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Cat├⌐gorie\n                  </label>\n                  <select\n                    value={filters.category}\n                    onChange={(e) => setFilters({ category: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {categories.map((category) => (\n                      <option key={category.value} value={category.value}>\n                        {category.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Secteur\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ex: Port Management\"\n                    value={filters.sector}\n                    onChange={(e) => setFilters({ sector: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Pays\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ex: Morocco\"\n                    value={filters.country}\n                    onChange={(e) => setFilters({ country: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-white rounded-lg p-6 h-80\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : filteredExhibitors.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4\">\n              <Search className=\"h-12 w-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              Aucun exposant trouv├⌐\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Essayez de modifier vos crit├¿res de recherche\n            </p>\n            <Button onClick={() => setFilters({ search: '', category: '', sector: '', country: '' })}>\n              R├⌐initialiser les filtres\n            </Button>\n          </div>\n        ) : (\n          <div className={viewMode === 'grid' \n            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n            : 'space-y-6'\n          }>\n            {filteredExhibitors.map((exhibitor, index) => (\n              <motion.div\n                key={exhibitor.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n              >\n                <Card hover className={viewMode === 'list' ? 'flex items-center p-6' : 'h-full'}>\n                  {viewMode === 'grid' ? (\n                    <div className=\"flex flex-col h-full\">\n                      {/* Header */}\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <img\n                            src={exhibitor.logo}\n                            alt={exhibitor.companyName}\n                            className=\"h-12 w-12 rounded-lg object-cover\"\n                          />\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900 text-lg\">\n                              {exhibitor.companyName}\n                            </h3>\n                            <p className=\"text-sm text-gray-500\">{exhibitor.sector}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          {exhibitor.featured && (\n                            <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                          )}\n                          {exhibitor.verified && (\n                            <Verified className=\"h-4 w-4 text-blue-500\" />\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Category */}\n                      <div className=\"mb-4\">\n                        <Badge \n                          variant={getCategoryColor(exhibitor.category) as any}\n                          size=\"sm\"\n                        >\n                          {getCategoryLabel(exhibitor.category)}\n                        </Badge>\n                      </div>\n\n                      {/* Description */}\n                      <p className=\"text-gray-600 text-sm mb-6 flex-grow line-clamp-3\">\n                        {exhibitor.description}\n                      </p>\n\n                      {/* Stats */}\n                      <div className=\"flex items-center justify-between text-sm text-gray-500 mb-6\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Users className=\"h-4 w-4\" />\n                          <span>{exhibitor.miniSite.views} vues</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <MapPin className=\"h-4 w-4\" />\n                          <span>{exhibitor.products.length} produits</span>\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      <div className=\"flex space-x-3\">\n                        <Link to={`/exhibitors/${exhibitor.id}`} className=\"flex-1\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                            Voir le Profil\n                          </Button>\n                        </Link>\n                        <Link to={`/appointments?exhibitor=${exhibitor.id}`}>\n                          <Button size=\"sm\" className=\"ml-2\">\n                            <Calendar className=\"h-4 w-4 mr-1\" />\n                            RDV\n                          </Button>\n                        </Link>\n                        {exhibitor.website && (\n                          <a\n                            href={exhibitor.website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                          >\n                            <ExternalLink className=\"h-4 w-4\" />\n                          </a>\n                        )}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-6 w-full\">\n                      <img\n                        src={exhibitor.logo}\n                        alt={exhibitor.companyName}\n                        className=\"h-16 w-16 rounded-lg object-cover flex-shrink-0\"\n                      />\n                      \n                      <div className=\"flex-grow\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900 text-lg\">\n                              {exhibitor.companyName}\n                            </h3>\n                            <p className=\"text-sm text-gray-500\">{exhibitor.sector}</p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge \n                              variant={getCategoryColor(exhibitor.category) as any}\n                              size=\"sm\"\n                            >\n                              {getCategoryLabel(exhibitor.category)}\n                            </Badge>\n                            {exhibitor.verified && (\n                              <Verified className=\"h-4 w-4 text-blue-500\" />\n                            )}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                          {exhibitor.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Users className=\"h-4 w-4\" />\n                              <span>{exhibitor.miniSite.views} vues</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <MapPin className=\"h-4 w-4\" />\n                              <span>{exhibitor.products.length} produits</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-3\">\n                            <Link to={`/exhibitors/${exhibitor.id}`}>\n                              <Button variant=\"outline\" size=\"sm\">\n                                Voir le Profil\n                              </Button>\n                            </Link>\n                            {exhibitor.website && (\n                              <a\n                                href={exhibitor.website}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                              >\n                                <ExternalLink className=\"h-4 w-4\" />\n                              </a>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\NetworkingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1525,1528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1525,1528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1685,1688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1685,1688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadAIInsights' and 'searchParams'. Either include them or remove the dependency array.","line":81,"column":6,"nodeType":"ArrayExpression","endLine":81,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, user, fetchProfiles, generateRecommendations, loadAIInsights, searchParams]","fix":{"range":[2189,2252],"text":"[isAuthenticated, user, fetchProfiles, generateRecommendations, loadAIInsights, searchParams]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3525,3528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3525,3528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4376,4379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4376,4379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12521,12524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12521,12524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { \n  Users, \n  MessageCircle, \n  Calendar, \n  Brain, \n  Globe, \n  Search,\n  Filter,\n  Star,\n  Building2,\n  MapPin,\n  Zap,\n  Target,\n  Heart,\n  Eye,\n  User,\n  Award,\n  TrendingUp,\n  Network,\n  Handshake,\n  Clock,\n  CheckCircle,\n  Plus,\n  \n  BarChart3\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { useNetworkingStore } from '../store/networkingStore';\nimport useAuthStore from '../store/authStore';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const NetworkingPage: React.FC = () => {\n  const {\n    profiles,\n    recommendations,\n    searchResults,\n    favorites,\n    connections,\n    \n    sentRequests,\n    isLoading,\n    searchFilters,\n    fetchProfiles,\n    generateRecommendations,\n    searchProfiles,\n    sendConnectionRequest,\n    addToFavorites,\n    removeFromFavorites,\n    getAIInsights\n  } = useNetworkingStore();\n\n  const { user, isAuthenticated } = useAuthStore();\n  const [searchParams] = useSearchParams();\n  const [activeTab, setActiveTab] = useState<'recommendations' | 'search' | 'connections' | 'insights'>('recommendations');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [aiInsights, setAiInsights] = useState<any>(null);\n  const [showAppointmentModal, setShowAppointmentModal] = useState(false);\n  const [selectedExhibitorForRDV, setSelectedExhibitorForRDV] = useState<any>(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>('');\n  const [appointmentMessage, setAppointmentMessage] = useState('');\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      fetchProfiles();\n      generateRecommendations(user.id);\n      loadAIInsights();\n      \n      // V├⌐rifier si on vient pour prendre un RDV\n      const action = searchParams.get('action');\n      if (action === 'book_appointment') {\n        setActiveTab('recommendations');\n      }\n    }\n  }, [isAuthenticated, user, fetchProfiles, generateRecommendations]);\n\n  const loadAIInsights = async () => {\n    if (user) {\n      const insights = await getAIInsights(user.id);\n      setAiInsights(insights);\n    }\n  };\n\n  const handleSearch = async () => {\n    const criteria = {\n      keywords: searchTerm,\n      sectors: searchFilters.sectors,\n      regions: searchFilters.regions,\n      companySize: searchFilters.companySize,\n      objectives: searchFilters.objectives\n    };\n  await searchProfiles(criteria);\n  toast.success(`Recherche effectu├⌐e (${searchResults.length} r├⌐sultats)`);\n  };\n\n  const handleConnect = async (userId: string, userName: string) => {\n  await sendConnectionRequest(userId, 'Je souhaiterais me connecter avec vous sur SIPORTS 2026.');\n  toast.success(`Demande de connexion envoy├⌐e ├á ${userName}`);\n  };\n\n  const handleMessage = (userName: string, userCompany: string) => {\n  toast.success(`Messagerie ouverte avec ${userName} (${userCompany})`);\n  };\n\n  const handleScheduleMeeting = (userName: string, userCompany: string) => {\n  toast.success(`Planification RDV avec ${userName} (${userCompany})`);\n  };\n\n  const handleViewProfile = (userName: string, userCompany: string) => {\n    toast.success(`Profil d├⌐taill├⌐ affich├⌐ pour ${userName} ΓÇö ${userCompany}`);\n  };\n\n  const handleBookAppointment = (profile: any) => {\n    if (!isAuthenticated) {\n      toast.error('Connexion requise pour prendre rendez-vous');\n      window.location.href = '/login';\n      return;\n    }\n    \n    setSelectedExhibitorForRDV(profile);\n    setShowAppointmentModal(true);\n  };\n\n  const handleConfirmAppointment = () => {\n    if (!selectedTimeSlot || !selectedExhibitorForRDV) {\n      toast.error('Veuillez s├⌐lectionner un cr├⌐neau horaire');\n      return;\n    }\n    \n    const appointmentData = {\n      exhibitor: `${selectedExhibitorForRDV.profile.firstName} ${selectedExhibitorForRDV.profile.lastName}`,\n      company: selectedExhibitorForRDV.profile.company,\n      timeSlot: selectedTimeSlot,\n      message: appointmentMessage,\n      visitor: `${user?.profile.firstName} ${user?.profile.lastName}`,\n      visitorCompany: user?.profile.company,\n      passType: (user?.profile as any)?.passType || 'basic',\n      confirmationId: `RDV-${Date.now()}`\n    };\n\n    toast.success(`Demande de RDV envoy├⌐e ├á ${appointmentData.exhibitor} ΓÇö ${appointmentData.timeSlot}`);\n    \n    setShowAppointmentModal(false);\n    setSelectedExhibitorForRDV(null);\n    setSelectedTimeSlot('');\n    setAppointmentMessage('');\n  };\n\n  const handleFavorite = (userId: string, userName: string, isFavorite: boolean) => {\n    if (isFavorite) {\n      removeFromFavorites(userId);\n      toast.success(`Retir├⌐ des favoris : ${userName}`);\n    } else {\n      addToFavorites(userId);\n      toast.success(`Ajout├⌐ aux favoris : ${userName}`);\n    }\n  };\n\n  const getCompatibilityColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-blue-600';\n    if (score >= 40) return 'text-yellow-600';\n    return 'text-gray-600';\n  };\n\n  const getCompatibilityLabel = (score: number) => {\n    if (score >= 80) return 'Excellent';\n    if (score >= 60) return 'Bon';\n    if (score >= 40) return 'Moyen';\n    return 'Faible';\n  };\n\n  const getUserTypeIcon = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return Building2;\n      case 'partner': return Award;\n      case 'visitor': return Users;\n      case 'admin': return Star;\n      default: return User;\n    }\n  };\n\n  const getUserTypeLabel = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return 'Exposant';\n      case 'partner': return 'Partenaire';\n      case 'visitor': return 'Visiteur';\n      case 'admin': return 'Administrateur';\n      default: return type;\n    }\n  };\n\n  const getUserTypeColor = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return 'bg-blue-100 text-blue-800';\n      case 'partner': return 'bg-purple-100 text-purple-800';\n      case 'visitor': return 'bg-green-100 text-green-800';\n      case 'admin': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl px-4\">\n          {/* Description du R├⌐seautage */}\n          <div className=\"mb-8\">\n            <div className=\"bg-blue-100 p-6 rounded-full w-24 h-24 mx-auto mb-6\">\n              <Network className=\"h-12 w-12 text-blue-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              R├⌐seautage Intelligent SIPORTS\n            </h2>\n            <p className=\"text-gray-600 mb-6 leading-relaxed\">\n              Notre plateforme de r├⌐seautage utilise l'intelligence artificielle pour vous connecter \n              avec les professionnels les plus pertinents selon vos objectifs et votre secteur d'activit├⌐.\n            </p>\n            \n            {/* Fonctionnalit├⌐s Cl├⌐s */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <div className=\"bg-purple-100 p-2 rounded-lg w-10 h-10 mx-auto mb-3\">\n                  <Brain className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">IA de Matching</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Recommandations personnalis├⌐es bas├⌐es sur vos objectifs\n                </p>\n              </div>\n              \n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <div className=\"bg-green-100 p-2 rounded-lg w-10 h-10 mx-auto mb-3\">\n                  <MessageCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Chat Assist├⌐</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Messagerie avec chatbot IA pour faciliter les ├⌐changes\n                </p>\n              </div>\n              \n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <div className=\"bg-blue-100 p-2 rounded-lg w-10 h-10 mx-auto mb-3\">\n                  <Calendar className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">RDV Intelligents</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Planification automatique avec suggestions optimales\n                </p>\n              </div>\n              \n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <div className=\"bg-orange-100 p-2 rounded-lg w-10 h-10 mx-auto mb-3\">\n                  <Globe className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">R├⌐seau Global</h3>\n                <p className=\"text-sm text-gray-600\">\n                  6000+ professionnels de 40 pays connect├⌐s\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Connexion Requise */}\n          <div className=\"bg-blue-100 p-6 rounded-full w-24 h-24 mx-auto mb-6\">\n            <Network className=\"h-12 w-12 text-blue-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-gray-900 mb-4\">\n            Connexion Requise\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            Connectez-vous maintenant pour acc├⌐der ├á toutes ces fonctionnalit├⌐s \n            et commencer ├á d├⌐velopper votre r├⌐seau professionnel.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link to=\"/login\">\n              <Button size=\"lg\">\n                <User className=\"h-4 w-4 mr-2\" />\n                Se Connecter\n              </Button>\n            </Link>\n            <Link to=\"/register\">\n              <Button variant=\"outline\" size=\"lg\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Cr├⌐er un Compte\n              </Button>\n            </Link>\n          </div>\n          \n          {/* Statistiques R├⌐seautage */}\n          <div className=\"mt-8 pt-6 border-t border-gray-200\">\n            <div className=\"grid grid-cols-3 gap-6 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">6,000+</div>\n                <div className=\"text-sm text-gray-600\">Professionnels</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">40</div>\n                <div className=\"text-sm text-gray-600\">Pays</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-purple-600\">95%</div>\n                <div className=\"text-sm text-gray-600\">Satisfaction</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-8\"\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              R├⌐seautage Intelligent SIPORTS\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Connectez-vous avec les professionnels les plus pertinents gr├óce ├á notre \n              intelligence artificielle de matching\n            </p>\n          </motion.div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex justify-center\">\n            <nav className=\"flex space-x-8\">\n              {[\n                { id: 'recommendations', label: 'Recommandations IA', icon: Brain },\n                { id: 'search', label: 'Recherche Avanc├⌐e', icon: Search },\n                { id: 'connections', label: 'Mes Connexions', icon: Users },\n                { id: 'insights', label: 'Insights IA', icon: TrendingUp }\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? 'bg-blue-100 text-blue-700'\n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                  }`}\n                >\n                  <tab.icon className=\"h-5 w-5\" />\n                  <span>{tab.label}</span>\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Recommandations IA */}\n        {activeTab === 'recommendations' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-8\"\n          >\n            {/* AI Banner */}\n            <Card className=\"bg-gradient-to-r from-purple-600 to-indigo-600 text-white\">\n              <div className=\"p-8 text-center\">\n                <div className=\"bg-white bg-opacity-20 p-4 rounded-full w-16 h-16 mx-auto mb-4\">\n                  <Brain className=\"h-8 w-8 text-white\" />\n                </div>\n                <h2 className=\"text-2xl font-bold mb-4\">\n                  Intelligence Artificielle de Matching\n                </h2>\n                <p className=\"text-purple-100 mb-6 max-w-2xl mx-auto\">\n                  Notre IA analyse vos objectifs, secteur d'activit├⌐ et pr├⌐f├⌐rences pour vous \n                  recommander les contacts les plus pertinents pour votre r├⌐ussite ├á SIPORTS 2026.\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-white bg-opacity-10 p-4 rounded-lg\">\n                    <div className=\"text-2xl font-bold mb-1\">{recommendations.length}</div>\n                    <div className=\"text-purple-100 text-sm\">Recommandations</div>\n                  </div>\n                  <div className=\"bg-white bg-opacity-10 p-4 rounded-lg\">\n                    <div className=\"text-2xl font-bold mb-1\">92%</div>\n                    <div className=\"text-purple-100 text-sm\">Pr├⌐cision IA</div>\n                  </div>\n                  <div className=\"bg-white bg-opacity-10 p-4 rounded-lg\">\n                    <div className=\"text-2xl font-bold mb-1\">{connections.length}</div>\n                    <div className=\"text-purple-100 text-sm\">Connexions</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Recommandations */}\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3, 4, 5, 6].map(i => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"bg-white rounded-lg p-6 h-80\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : recommendations.length === 0 ? (\n              <Card className=\"text-center p-12\">\n                <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  G├⌐n├⌐ration des recommandations...\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Notre IA analyse votre profil pour trouver les meilleurs contacts\n                </p>\n                <Button \n                  onClick={() => {\n                    if (user) {\n                      generateRecommendations(user.id);\n                      toast.success('IA activ├⌐e, recommandations g├⌐n├⌐r├⌐es !');\n                    }\n                  }}\n                >\n                  <Zap className=\"h-4 w-4 mr-2\" />\n                  G├⌐n├⌐rer les Recommandations\n                </Button>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {recommendations.map((recommendation, index) => {\n                  const profile = recommendation.user;\n                  const UserIcon = getUserTypeIcon(profile.type);\n                  const isFavorite = favorites.includes(profile.id);\n                  \n                  const isPending = sentRequests.includes(profile.id);\n                  \n                  return (\n                    <motion.div\n                      key={profile.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <Card hover className=\"h-full\">\n                        <div className=\"p-6\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center\">\n                                {profile.profile.avatar ? (\n                                  <img\n                                    src={profile.profile.avatar}\n                                    alt={profile.name}\n                                    className=\"h-12 w-12 rounded-full object-cover\"\n                                  />\n                                ) : (\n                                  <User className=\"h-6 w-6 text-gray-600\" />\n                                )}\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-gray-900\">\n                                  {profile.profile.firstName} {profile.profile.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">{profile.profile.position}</p>\n                                <p className=\"text-sm text-gray-500\">{profile.profile.company}</p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col items-end space-y-2\">\n                                          <div className={`text-right ${getCompatibilityColor(recommendation.score)}`}>\n                                            <div className=\"text-2xl font-bold\">{recommendation.score}%</div>\n                                            <div className=\"text-xs\">{getCompatibilityLabel(recommendation.score)}</div>\n                                          </div>\n                              <Badge \n                                className={getUserTypeColor(profile.type)}\n                                size=\"sm\"\n                              >\n                                <UserIcon className=\"h-3 w-3 mr-1\" />\n                                {getUserTypeLabel(profile.type)}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Bio */}\n                          <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                            {profile.profile.bio}\n                          </p>\n\n                          {/* Raisons du Match */}\n                          <div className=\"mb-4\">\n                            <h4 className=\"font-medium text-gray-900 mb-2 text-sm\">\n                              Pourquoi ce contact :\n                            </h4>\n                            <div className=\"space-y-1\">\n                              {recommendation.reasons.slice(0, 3).map((reason, idx) => (\n                                <div key={idx} className=\"flex items-center space-x-2\">\n                                  <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full\"></div>\n                                  <span className=\"text-xs text-gray-600\">{reason}</span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n\n                          {/* Informations */}\n                          <div className=\"flex items-center justify-between text-xs text-gray-500 mb-4\">\n                            <div className=\"flex items-center space-x-1\">\n                              <MapPin className=\"h-3 w-3\" />\n                              <span>{profile.profile.country}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Building2 className=\"h-3 w-3\" />\n                              <span>{profile.profile.companySize}</span>\n                            </div>\n                            {recommendation.mutualConnections > 0 && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Users className=\"h-3 w-3\" />\n                                <span>{recommendation.mutualConnections} connexions communes</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Actions */}\n                          <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                            {connections.includes(profile.id) ? (\n                              <Button size=\"sm\" variant=\"outline\" disabled>\n                                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                Connect├⌐\n                              </Button>\n                            ) : isPending ? (\n                              <Button size=\"sm\" variant=\"outline\" disabled>\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                En attente\n                              </Button>\n                            ) : (\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleConnect(profile.id, `${profile.profile.firstName} ${profile.profile.lastName}`)}\n                              >\n                                <Handshake className=\"h-3 w-3 mr-1\" />\n                                Connecter\n                              </Button>\n                            )}\n                              \n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleBookAppointment(profile)}\n                            >\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              RDV\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleMessage(`${profile.profile.firstName} ${profile.profile.lastName}`, profile.profile.company || '')}\n                            >\n                              <MessageCircle className=\"h-3 w-3 mr-1\" />\n                              Message\n                            </Button>\n                          </div>\n\n                          <div className=\"grid grid-cols-3 gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleScheduleMeeting(`${profile.profile.firstName} ${profile.profile.lastName}`, profile.profile.company || '')}\n                            >\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              RDV\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleFavorite(profile.id, `${profile.profile.firstName} ${profile.profile.lastName}`, isFavorite)}\n                            >\n                              <Heart className={`h-3 w-3 ${isFavorite ? 'fill-current text-red-500' : ''}`} />\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleViewProfile(`${profile.profile.firstName} ${profile.profile.lastName}`, profile.profile.company || '')}\n                            >\n                              <Eye className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            )}\n          </motion.div>\n        )}\n\n        {/* Recherche Avanc├⌐e */}\n        {activeTab === 'search' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            {/* Filtres de Recherche */}\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Recherche Avanc├⌐e de Contacts\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Mots-cl├⌐s\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      placeholder=\"Technologies, secteurs...\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Secteur\n                    </label>\n                    <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                      <option value=\"\">Tous les secteurs</option>\n                      <option value=\"port-operations\">Op├⌐rations Portuaires</option>\n                      <option value=\"technology\">Technologie</option>\n                      <option value=\"logistics\">Logistique</option>\n                      <option value=\"consulting\">Consulting</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      R├⌐gion\n                    </label>\n                    <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                      <option value=\"\">Toutes les r├⌐gions</option>\n                      <option value=\"europe\">Europe</option>\n                      <option value=\"africa\">Afrique</option>\n                      <option value=\"asia\">Asie</option>\n                      <option value=\"americas\">Am├⌐riques</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"flex items-end\">\n                    <Button onClick={handleSearch} className=\"w-full\">\n                      <Search className=\"h-4 w-4 mr-2\" />\n                      Rechercher\n                    </Button>\n                  </div>\n                </div>\n\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"mb-4\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filtres Avanc├⌐s\n                </Button>\n\n                {showFilters && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    className=\"border-t border-gray-200 pt-4\"\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Taille d'entreprise\n                        </label>\n                        <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                          <option value=\"\">Toutes tailles</option>\n                          <option value=\"startup\">Startup (1-50)</option>\n                          <option value=\"sme\">PME (50-250)</option>\n                          <option value=\"large\">Grande (250+)</option>\n                        </select>\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Objectifs\n                        </label>\n                        <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                          <option value=\"\">Tous objectifs</option>\n                          <option value=\"partnership\">Partenariats</option>\n                          <option value=\"technology\">Transfert technologique</option>\n                          <option value=\"investment\">Investissement</option>\n                        </select>\n                      </div>\n                      \n                      <div className=\"flex items-end\">\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          onClick={() => {\n                            setSearchTerm('');\n                            setShowFilters(false);\n                            toast.success('Filtres r├⌐initialis├⌐s ΓÇö pr├¬t pour une nouvelle recherche !');\n                          }}\n                        >\n                          R├⌐initialiser\n                        </Button>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n            </Card>\n\n            {/* R├⌐sultats de Recherche */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(searchResults.length > 0 ? searchResults : profiles.slice(0, 6)).map((profile, index) => {\n                const UserIcon = getUserTypeIcon(profile.type);\n                const isFavorite = favorites.includes(profile.id);\n                \n                return (\n                  <motion.div\n                    key={profile.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Card hover>\n                      <div className=\"p-6\">\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <div className=\"h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                            {profile.profile.avatar ? (\n                              <img\n                                src={profile.profile.avatar}\n                                alt={profile.name}\n                                className=\"h-10 w-10 rounded-full object-cover\"\n                              />\n                            ) : (\n                              <User className=\"h-5 w-5 text-gray-600\" />\n                            )}\n                          </div>\n                          <div>\n                            <h3 className=\"font-medium text-gray-900\">\n                              {profile.profile.firstName} {profile.profile.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">{profile.profile.company}</p>\n                          </div>\n                        </div>\n                        \n                            <Badge className={getUserTypeColor(profile.type) + ' mb-3'} size=\"sm\">\n                          <UserIcon className=\"h-3 w-3 mr-1\" />\n                          {getUserTypeLabel(profile.type)}\n                        </Badge>\n                        \n                        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">\n                          {profile.profile.bio}\n                        </p>\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handleConnect(profile.id, `${profile.profile.firstName} ${profile.profile.lastName}`)}\n                          >\n                            <Handshake className=\"h-3 w-3 mr-1\" />\n                            Connecter\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleFavorite(profile.id, `${profile.profile.firstName} ${profile.profile.lastName}`, isFavorite)}\n                          >\n                            <Heart className={`h-3 w-3 ${isFavorite ? 'fill-current text-red-500' : ''}`} />\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </motion.div>\n        )}\n\n        {/* Mes Connexions */}\n        {activeTab === 'connections' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <Card>\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Mes Connexions ({connections.length})\n                  </h3>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => {\n                      toast.success('Statistiques ΓÇö Total: 24, Exposants: 12, Partenaires: 8, Visiteurs: 4 (+15% ce mois)');\n                    }}\n                  >\n                    <BarChart3 className=\"h-4 w-4 mr-2\" />\n                    Statistiques\n                  </Button>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {profiles.filter(p => connections.includes(p.id)).map((profile, index) => {\n                    const UserIcon = getUserTypeIcon(profile.type);\n                    \n                    return (\n                      <motion.div\n                        key={profile.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                      >\n                        <Card hover>\n                          <div className=\"p-6\">\n                            <div className=\"flex items-center space-x-3 mb-4\">\n                              <div className=\"h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                                {profile.profile.avatar ? (\n                                  <img\n                                    src={profile.profile.avatar}\n                                    alt={profile.name}\n                                    className=\"h-10 w-10 rounded-full object-cover\"\n                                  />\n                                ) : (\n                                  <User className=\"h-5 w-5 text-gray-600\" />\n                                )}\n                              </div>\n                              <div>\n                                <h3 className=\"font-medium text-gray-900\">\n                                  {profile.profile.firstName} {profile.profile.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">{profile.profile.company}</p>\n                              </div>\n                            </div>\n                            \n                            <Badge className={getUserTypeColor(profile.type) + ' mb-3'} size=\"sm\">\n                              <UserIcon className=\"h-3 w-3 mr-1\" />\n                              {getUserTypeLabel(profile.type)}\n                            </Badge>\n                            \n                            <div className=\"flex space-x-2\">\n                              <Button \n                                size=\"sm\" \n                                className=\"flex-1\"\n                                onClick={() => handleMessage(`${profile.profile.firstName} ${profile.profile.lastName}`, profile.profile.company || '')}\n                              >\n                                <MessageCircle className=\"h-3 w-3 mr-1\" />\n                                Message\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => handleScheduleMeeting(`${profile.profile.firstName} ${profile.profile.lastName}`, profile.profile.company || '')}\n                              >\n                                <Calendar className=\"h-3 w-3 mr-1\" />\n                                RDV\n                              </Button>\n                            </div>\n                          </div>\n                        </Card>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n\n                {connections.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                      Aucune connexion pour le moment\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Commencez par explorer les recommandations IA\n                    </p>\n                    <Button \n                      onClick={() => setActiveTab('recommendations')}\n                    >\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      Voir les Recommandations\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </motion.div>\n        )}\n\n        {/* Insights IA */}\n        {activeTab === 'insights' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Insights Intelligence Artificielle\n                </h3>\n                \n                {aiInsights ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                        <h4 className=\"font-medium text-blue-900\">Tendances R├⌐seau</h4>\n                      </div>\n                      <p className=\"text-blue-700 text-sm\">\n                        Votre r├⌐seau s'est ├⌐largi de 23% ce mois-ci avec une forte croissance \n                        dans le secteur technologique.\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Target className=\"h-5 w-5 text-green-600\" />\n                        <h4 className=\"font-medium text-green-900\">Opportunit├⌐s</h4>\n                      </div>\n                      <p className=\"text-green-700 text-sm\">\n                        5 nouvelles opportunit├⌐s de partenariat d├⌐tect├⌐es dans votre secteur \n                        d'activit├⌐ cette semaine.\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-purple-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Brain className=\"h-5 w-5 text-purple-600\" />\n                        <h4 className=\"font-medium text-purple-900\">Recommandations</h4>\n                      </div>\n                      <p className=\"text-purple-700 text-sm\">\n                        L'IA sugg├¿re de vous connecter avec 3 nouveaux profils hautement \n                        compatibles avec vos objectifs.\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                      G├⌐n├⌐ration des insights...\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      L'IA analyse vos donn├⌐es pour g├⌐n├⌐rer des insights personnalis├⌐s\n                    </p>\n                    <Button onClick={loadAIInsights}>\n                      <Zap className=\"h-4 w-4 mr-2\" />\n                      G├⌐n├⌐rer les Insights\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </motion.div>\n        )}\n      </div>\n\n      {/* Modal de Prise de RDV */}\n      {showAppointmentModal && selectedExhibitorForRDV && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Demande de Rendez-vous\n            </h3>\n            \n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-600 mb-2\">\n                <strong>Exposant:</strong> {selectedExhibitorForRDV.profile.firstName} {selectedExhibitorForRDV.profile.lastName}\n              </p>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                <strong>Soci├⌐t├⌐:</strong> {selectedExhibitorForRDV.profile.company}\n              </p>\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Cr├⌐neau souhait├⌐\n              </label>\n              <select \n                value={selectedTimeSlot}\n                onChange={(e) => setSelectedTimeSlot(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">S├⌐lectionnez un cr├⌐neau</option>\n                <option value=\"Mardi 10h-10h30\">Mardi 10h-10h30</option>\n                <option value=\"Mardi 14h-14h30\">Mardi 14h-14h30</option>\n                <option value=\"Mercredi 9h-9h30\">Mercredi 9h-9h30</option>\n                <option value=\"Mercredi 15h-15h30\">Mercredi 15h-15h30</option>\n                <option value=\"Jeudi 11h-11h30\">Jeudi 11h-11h30</option>\n                <option value=\"Jeudi 16h-16h30\">Jeudi 16h-16h30</option>\n              </select>\n            </div>\n\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Message (optionnel)\n              </label>\n              <textarea\n                value={appointmentMessage}\n                onChange={(e) => setAppointmentMessage(e.target.value)}\n                placeholder=\"Pr├⌐cisez l'objet de votre demande de rendez-vous...\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <Button \n                onClick={handleConfirmAppointment}\n                className=\"flex-1\"\n              >\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Envoyer la Demande\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  setShowAppointmentModal(false);\n                  setSelectedExhibitorForRDV(null);\n                  setSelectedTimeSlot('');\n                  setAppointmentMessage('');\n                }}\n              >\n                Annuler\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6\">\n        <Button\n          size=\"lg\"\n          className=\"rounded-full shadow-lg\"\n          onClick={() => {\n            toast.success(\"Mes connexions ΓÇö 24 actives, 5 conversations, 3 RDV programm├⌐s\");\n          }}\n          title=\"Voir mes connexions\"\n        >\n          <Users className=\"h-5 w-5\" />\n        </Button>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\NewsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedArticle' is assigned a value but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedArticle' is assigned a value but never used.","line":42,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { \n  Search, \n  Filter, \n  Calendar, \n  Clock, \n  User,\n  Eye,\n  ExternalLink,\n  Star,\n  Tag,\n  TrendingUp,\n  Globe,\n  RefreshCw,\n  BookOpen,\n  Share2\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Badge } from '../components/ui/Badge';\nimport { Button } from '../components/ui/Button';\nimport { useNewsStore } from '../store/newsStore';\nimport { motion } from 'framer-motion';\n\nexport const NewsPage: React.FC = () => {\n  const {\n    articles,\n    featuredArticles,\n    categories,\n    isLoading,\n    selectedCategory,\n    searchTerm,\n    fetchNews,\n    fetchFromOfficialSite,\n    setCategory,\n    setSearchTerm,\n    getFilteredArticles\n  } = useNewsStore();\n\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedArticle, setSelectedArticle] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchNews();\n  }, [fetchNews]);\n\n  const filteredArticles = getFilteredArticles();\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }).format(date);\n  };\n\n  const formatReadTime = (minutes: number) => {\n    return `${minutes} min de lecture`;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      '├ëv├⌐nement': 'bg-blue-100 text-blue-800',\n      'Innovation': 'bg-purple-100 text-purple-800',\n      'Partenariat': 'bg-green-100 text-green-800',\n      'Durabilit├⌐': 'bg-emerald-100 text-emerald-800',\n      'Formation': 'bg-orange-100 text-orange-800',\n      'Commerce': 'bg-indigo-100 text-indigo-800'\n    };\n    return colors[category] || 'bg-gray-100 text-gray-800';\n  };\n\n  const handleRefreshFromOfficialSite = async () => {\n    await fetchFromOfficialSite();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-8\"\n          >\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Actualit├⌐s Portuaires SIPORTS\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Restez inform├⌐ des derni├¿res nouvelles du secteur portuaire et des actualit├⌐s SIPORTS 2026\n            </p>\n            \n            {/* Lien vers site officiel */}\n            <div className=\"mt-4 flex items-center justify-center space-x-2\">\n              <Globe className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-sm text-gray-600\">Source officielle :</span>\n              <a \n                href=\"https://siportevent.com/actualite-portuaire/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n              >\n                siportevent.com/actualite-portuaire\n                <ExternalLink className=\"h-3 w-3 inline ml-1\" />\n              </a>\n            </div>\n          </motion.div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Rechercher dans les actualit├⌐s...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filtres\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={handleRefreshFromOfficialSite}\n                disabled={isLoading}\n                title=\"Synchroniser avec le site officiel SIPORTS\"\n              >\n                {isLoading ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                )}\n                Actualiser\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters */}\n          {showFilters && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              className=\"mt-4 p-4 bg-gray-50 rounded-lg\"\n            >\n              <div className=\"flex flex-wrap gap-2\">\n                <button\n                  onClick={() => setCategory('')}\n                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                    selectedCategory === '' \n                      ? 'bg-blue-100 text-blue-700' \n                      : 'bg-white text-gray-600 hover:bg-gray-100'\n                  }`}\n                >\n                  Toutes les cat├⌐gories\n                </button>\n                {categories.map((category) => (\n                  <button\n                    key={category}\n                    onClick={() => setCategory(category)}\n                    className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                      selectedCategory === category \n                        ? 'bg-blue-100 text-blue-700' \n                        : 'bg-white text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    {category}\n                  </button>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Featured Articles */}\n        {featuredArticles.length > 0 && !selectedCategory && !searchTerm && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n              ├Ç la Une\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {featuredArticles.slice(0, 2).map((article, index) => (\n                <motion.div\n                  key={article.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card hover className=\"h-full overflow-hidden\">\n                    <div className=\"relative\">\n                      <img\n                        src={article.image}\n                        alt={article.title}\n                        className=\"w-full h-64 object-cover\"\n                      />\n                      <div className=\"absolute top-4 left-4\">\n                        <Star className=\"h-5 w-5 text-yellow-500 fill-current\" />\n                      </div>\n                      <div className=\"absolute top-4 right-4\">\n                        <Badge className={getCategoryColor(article.category)} size=\"sm\">\n                          {article.category}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-6\">\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-3\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(article.publishedAt)}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span>{formatReadTime(article.readTime)}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Eye className=\"h-4 w-4\" />\n                          <span>{article.views.toLocaleString()}</span>\n                        </div>\n                      </div>\n                      \n                      <h3 className=\"text-xl font-bold text-gray-900 mb-3 line-clamp-2\">\n                        {article.title}\n                      </h3>\n                      \n                      <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                        {article.excerpt}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-sm text-gray-600\">{article.author}</span>\n                        </div>\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\">\n                            <BookOpen className=\"h-4 w-4 mr-2\" />\n                            <Link to={`/news/${article.id}`} className=\"flex items-center\">\n                              Lire l'article\n                            </Link>\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              const shareData = {\n                                title: article.title,\n                                text: article.excerpt,\n                                url: window.location.href + '#article-' + article.id\n                              };\n                              \n                              if (navigator.share) {\n                                navigator.share(shareData);\n                              } else {\n                                navigator.clipboard.writeText(shareData.url);\n                                toast.success('Lien copi├⌐ dans le presse-papiers !');\n                              }\n                            }}\n                            title=\"Partager cet article\"\n                          >\n                            <Share2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* All Articles */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              {selectedCategory || searchTerm ? 'R├⌐sultats' : 'Toutes les Actualit├⌐s'} \n              ({filteredArticles.length})\n            </h2>\n            \n            {(selectedCategory || searchTerm) && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  setCategory('');\n                  setSearchTerm('');\n                }}\n              >\n                R├⌐initialiser les filtres\n              </Button>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3, 4, 5, 6].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-white rounded-lg overflow-hidden\">\n                    <div className=\"h-48 bg-gray-200\"></div>\n                    <div className=\"p-6\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-4 w-2/3\"></div>\n                      <div className=\"h-20 bg-gray-200 rounded\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredArticles.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4\">\n                <Search className=\"h-12 w-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Aucune actualit├⌐ trouv├⌐e\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Essayez de modifier vos crit├¿res de recherche\n              </p>\n              <Button onClick={() => {\n                setCategory('');\n                setSearchTerm('');\n              }}>\n                Voir toutes les actualit├⌐s\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredArticles.map((article, index) => (\n                <motion.div\n                  key={article.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.05 }}\n                >\n                  <Card hover className=\"h-full overflow-hidden\">\n                    <div className=\"relative\">\n                      <img\n                        src={article.image}\n                        alt={article.title}\n                        className=\"w-full h-48 object-cover\"\n                      />\n                      <div className=\"absolute top-4 right-4\">\n                        <Badge className={getCategoryColor(article.category)} size=\"sm\">\n                          {article.category}\n                        </Badge>\n                      </div>\n                      {article.featured && (\n                        <div className=\"absolute top-4 left-4\">\n                          <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"p-6\">\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-3\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(article.publishedAt)}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span>{formatReadTime(article.readTime)}</span>\n                        </div>\n                      </div>\n                      \n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-3 line-clamp-2\">\n                        {article.title}\n                      </h3>\n                      \n                      <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                        {article.excerpt}\n                      </p>\n                      \n                      {/* Tags */}\n                      <div className=\"flex flex-wrap gap-1 mb-4\">\n                        {article.tags.slice(0, 3).map((tag, idx) => (\n                          <span\n                            key={idx}\n                            className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-600\"\n                          >\n                            <Tag className=\"h-3 w-3 mr-1\" />\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-sm text-gray-600\">{article.author}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                          <Eye className=\"h-4 w-4\" />\n                          <span>{article.views.toLocaleString()}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" className=\"flex-1\">\n                            <BookOpen className=\"h-4 w-4 mr-2\" />\n                            <Link to={`/news/${article.id}`} className=\"flex items-center\">\n                              Lire l'article\n                            </Link>\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Share2 className=\"h-4 w-4\" />\n                          </Button>\n                          {article.sourceUrl && (\n                            <a\n                              href={article.sourceUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Newsletter Subscription */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          className=\"mt-16\"\n        >\n          <Card className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\n            <div className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\">\n                Restez inform├⌐ des actualit├⌐s SIPORTS\n              </h3>\n              <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n                Recevez les derni├¿res nouvelles du secteur portuaire et les actualit├⌐s \n                exclusives de SIPORTS 2026 directement dans votre bo├«te mail\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n                <input\n                  type=\"email\"\n                  placeholder=\"votre@email.com\"\n                  className=\"flex-1 px-4 py-3 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-white\"\n                />\n                <Button \n                  size=\"lg\" \n                  className=\"bg-white text-blue-600 hover:bg-blue-50\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    const emailInput = e.currentTarget.parentElement?.querySelector('input[type=\"email\"]') as HTMLInputElement;\n                    const email = emailInput?.value;\n                    \n                    if (!email) {\n                      toast.error('Veuillez saisir votre adresse email');\n                      return;\n                    }\n                    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n                      toast.error('Veuillez saisir une adresse email valide');\n                      return;\n                    }\n                    toast.success(`Inscription newsletter r├⌐ussie !\\nEmail: ${email}`);\n                    emailInput.value = '';\n                  }}\n                >\n                  S'abonner\n                </Button>\n              </div>\n              \n              <p className=\"text-xs text-blue-200 mt-4\">\n                Newsletter hebdomadaire ΓÇó D├⌐sabonnement facile ΓÇó Donn├⌐es prot├⌐g├⌐es\n              </p>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Trending Topics */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          className=\"mt-12\"\n        >\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2 text-orange-500\" />\n                Sujets Tendance\n              </h3>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {[\n                  'Digitalisation portuaire',\n                  'Ports durables',\n                  'Intelligence artificielle',\n                  'Automatisation',\n                  'Blockchain maritime',\n                  '├ënergies renouvelables',\n                  'Formation maritime',\n                  'Partenariats internationaux'\n                ].map((topic, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setSearchTerm(topic)}\n                    className=\"px-3 py-2 bg-gray-100 hover:bg-blue-100 text-gray-700 hover:text-blue-700 rounded-lg text-sm font-medium transition-colors\"\n                  >\n                    #{topic}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Stats */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          className=\"mt-12\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                <BookOpen className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {articles.length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Articles Publi├⌐s</div>\n            </Card>\n\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-green-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                <Eye className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {articles.reduce((sum, article) => sum + article.views, 0).toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Vues Totales</div>\n            </Card>\n\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-purple-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                <Tag className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {categories.length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Cat├⌐gories</div>\n            </Card>\n\n            <Card className=\"text-center p-6\">\n              <div className=\"bg-orange-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                <Globe className=\"h-6 w-6 text-orange-600\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {articles.filter(a => a.source === 'siports').length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Sources Officielles</div>\n            </Card>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\PartnerDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Video' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":29,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4926,4929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4926,4929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6467,6470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6467,6470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":338,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10980,10983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10980,10983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":754,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":754,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29736,29739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29736,29739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":789,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":789,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31524,31527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31524,31527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  ExternalLink,\n  MapPin,\n  Users,\n  Calendar,\n  MessageCircle,\n  Download,\n  Share2,\n  Star,\n  Award,\n  Clock,\n  Phone,\n  Mail,\n  Globe,\n  Building2,\n  Eye,\n  Heart,\n  Target,\n  TrendingUp,\n  CheckCircle,\n  Crown,\n  Handshake,\n  BarChart3,\n  FileText,\n  Video,\n  Image as ImageIcon,\n  Zap\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { motion } from 'framer-motion';\n\ninterface Partner {\n  id: string;\n  name: string;\n  type: 'platinum' | 'gold' | 'silver' | 'bronze' | 'institutional';\n  category: string;\n  description: string;\n  logo: string;\n  website?: string;\n  country: string;\n  sector: string;\n  verified: boolean;\n  featured: boolean;\n  sponsorshipLevel: string;\n  contributions: string[];\n  establishedYear: number;\n  employees: string;\n  projects: Array<{\n    id: string;\n    name: string;\n    description: string;\n    status: 'active' | 'completed' | 'planned';\n    startDate: Date;\n    endDate?: Date;\n    budget: string;\n    impact: string;\n    image: string;\n    technologies: string[];\n    team: string[];\n    kpis: {\n      progress: number;\n      satisfaction: number;\n      roi: number;\n    };\n    timeline: Array<{\n      phase: string;\n      date: Date;\n      status: 'completed' | 'current' | 'upcoming';\n      description: string;\n    }>;\n    partners: string[];\n    documents: Array<{\n      name: string;\n      type: string;\n      url: string;\n    }>;\n    gallery: string[];\n  }>;\n}\n\nconst mockPartnerData: Partner = {\n  id: '2',\n  name: 'Autorit├⌐ Portuaire de Casablanca',\n  type: 'platinum',\n  category: 'Partenaire Platine',\n  description: 'Premier port du Maroc et partenaire strat├⌐gique majeur, leader dans la modernisation portuaire africaine avec plus de 100 ans d\\'expertise.',\n  logo: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n  website: 'https://www.portcasablanca.ma',\n  country: 'Maroc',\n  sector: 'Autorit├⌐ Portuaire',\n  verified: true,\n  featured: true,\n  sponsorshipLevel: 'Platine',\n  contributions: ['Financement principal', 'Expertise technique', 'R├⌐seau international'],\n  establishedYear: 1907,\n  employees: '2500+',\n  projects: [\n    {\n      id: 'project-1',\n      name: 'Modernisation Terminal Conteneurs',\n      description: 'Projet de modernisation compl├¿te du terminal conteneurs avec automatisation des ├⌐quipements et digitalisation des processus.',\n      status: 'active',\n      startDate: new Date('2023-06-01'),\n      endDate: new Date('2025-12-31'),\n      budget: '450MΓé¼',\n      impact: 'Augmentation de 40% de la capacit├⌐ de traitement',\n      image: 'https://images.pexels.com/photos/906982/pexels-photo-906982.jpeg?auto=compress&cs=tinysrgb&w=800',\n      technologies: ['IoT Sensors', 'AI Analytics', 'Automated Cranes', 'Blockchain Tracking'],\n      team: ['Dr. Ahmed El Mansouri', 'Sarah Johnson', 'Mohamed Alami', 'Lisa Chen'],\n      kpis: {\n        progress: 75,\n        satisfaction: 94,\n        roi: 285\n      },\n      timeline: [\n        {\n          phase: 'Phase 1: ├ëtudes et Conception',\n          date: new Date('2023-06-01'),\n          status: 'completed',\n          description: '├ëtudes de faisabilit├⌐ et conception d├⌐taill├⌐e'\n        },\n        {\n          phase: 'Phase 2: Infrastructure',\n          date: new Date('2024-01-15'),\n          status: 'completed',\n          description: 'Construction des nouvelles infrastructures'\n        },\n        {\n          phase: 'Phase 3: ├ëquipements',\n          date: new Date('2024-08-01'),\n          status: 'current',\n          description: 'Installation des ├⌐quipements automatis├⌐s'\n        },\n        {\n          phase: 'Phase 4: Tests et Formation',\n          date: new Date('2025-06-01'),\n          status: 'upcoming',\n          description: 'Tests syst├¿me et formation des ├⌐quipes'\n        }\n      ],\n      partners: ['Maersk Line', 'Port of Rotterdam', 'Siemens'],\n      documents: [\n        { name: 'Rapport d\\'avancement Q4 2024', type: 'PDF', url: '#' },\n        { name: 'Pr├⌐sentation technique', type: 'PowerPoint', url: '#' },\n        { name: 'Vid├⌐o de d├⌐monstration', type: 'MP4', url: '#' }\n      ],\n      gallery: [\n        'https://images.pexels.com/photos/906982/pexels-photo-906982.jpeg?auto=compress&cs=tinysrgb&w=400',\n        'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400',\n        'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400'\n      ]\n    }\n  ]\n};\n\nexport const PartnerDetailPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [partner, setPartner] = useState<Partner | null>(null);\n  const [selectedProject, setSelectedProject] = useState<any>(null);\n  const [showProjectModal, setShowProjectModal] = useState(false);\n  const [activeTab, setActiveTab] = useState<'overview' | 'projects' | 'impact' | 'contact'>('overview');\n\n  useEffect(() => {\n    // Simulation de chargement des donn├⌐es du partenaire\n    setTimeout(() => {\n      setPartner(mockPartnerData);\n    }, 500);\n  }, [id]);\n\n  if (!partner) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Chargement du partenaire...\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'institutional': return Crown;\n      case 'platinum': return Award;\n      case 'gold': return Star;\n      case 'silver': return Building2;\n      case 'bronze': return Handshake;\n      default: return Building2;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'institutional': return 'bg-purple-100 text-purple-600';\n      case 'platinum': return 'bg-gray-100 text-gray-800';\n      case 'gold': return 'bg-yellow-100 text-yellow-600';\n      case 'silver': return 'bg-gray-100 text-gray-600';\n      case 'bronze': return 'bg-orange-100 text-orange-600';\n      default: return 'bg-blue-100 text-blue-600';\n    }\n  };\n\n  const handleViewProjectDetails = (project: any) => {\n    setSelectedProject(project);\n    setShowProjectModal(true);\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }).format(date);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'active': return 'bg-blue-100 text-blue-800';\n      case 'planned': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'completed': return 'Termin├⌐';\n      case 'active': return 'En cours';\n      case 'planned': return 'Planifi├⌐';\n      default: return status;\n    }\n  };\n\n  const TypeIcon = getTypeIcon(partner.type);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/partners\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour aux partenaires\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"flex items-start space-x-6\"\n          >\n            <img\n              src={partner.logo}\n              alt={partner.name}\n              className=\"h-24 w-24 rounded-xl object-cover border-2 border-gray-200\"\n            />\n            \n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  {partner.name}\n                </h1>\n                {partner.verified && (\n                  <CheckCircle className=\"h-6 w-6 text-blue-500\" />\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-4 mb-4\">\n                <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTypeColor(partner.type)}`}>\n                  <TypeIcon className=\"h-4 w-4 mr-2\" />\n                  {partner.category}\n                </div>\n                <Badge variant=\"info\" size=\"sm\">\n                  {partner.sector}\n                </Badge>\n                <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{partner.country}</span>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-600 mb-6 max-w-3xl\">\n                {partner.description}\n              </p>\n              \n              <div className=\"flex items-center space-x-4\">\n                {partner.website && (\n                  <a\n                    href={partner.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700\"\n                  >\n                    <Globe className=\"h-4 w-4\" />\n                    <span>Site officiel</span>\n                    <ExternalLink className=\"h-3 w-3\" />\n                  </a>\n                )}\n                \n                <Button variant=\"outline\" size=\"sm\">\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Contacter\n                </Button>\n                \n                <Button variant=\"outline\" size=\"sm\">\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Partager\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation Tabs */}\n        <div className=\"mb-8\">\n          <nav className=\"flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Vue d\\'ensemble', icon: Eye },\n              { id: 'projects', label: 'Projets', icon: Target },\n              { id: 'impact', label: 'Impact & ROI', icon: TrendingUp },\n              { id: 'contact', label: 'Contact', icon: MessageCircle }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n                  activeTab === tab.id\n                    ? 'bg-blue-100 text-blue-700'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                }`}\n              >\n                <tab.icon className=\"h-5 w-5\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        {activeTab === 'overview' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-8\"\n          >\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card className=\"text-center p-6\">\n                <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                  <Calendar className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {new Date().getFullYear() - partner.establishedYear}+\n                </div>\n                <div className=\"text-sm text-gray-600\">Ann├⌐es d'exp├⌐rience</div>\n              </Card>\n\n              <Card className=\"text-center p-6\">\n                <div className=\"bg-green-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                  <Users className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {partner.employees}\n                </div>\n                <div className=\"text-sm text-gray-600\">Employ├⌐s</div>\n              </Card>\n\n              <Card className=\"text-center p-6\">\n                <div className=\"bg-purple-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                  <Award className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {partner.projects.length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Projets actifs</div>\n              </Card>\n\n              <Card className=\"text-center p-6\">\n                <div className=\"bg-orange-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n                  <TrendingUp className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  285%\n                </div>\n                <div className=\"text-sm text-gray-600\">ROI Partenariat</div>\n              </Card>\n            </div>\n\n            {/* Contributions */}\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Contributions au Salon SIPORTS 2026\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {partner.contributions.map((contribution, index) => (\n                    <div key={index} className=\"flex items-center space-x-3 p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"bg-blue-100 p-2 rounded-lg\">\n                        <Handshake className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                      <span className=\"font-medium text-gray-900\">{contribution}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n\n        {activeTab === 'projects' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {partner.projects.map((project, index) => (\n                <motion.div\n                  key={project.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card hover className=\"h-full\">\n                    <img\n                      src={project.image}\n                      alt={project.name}\n                      className=\"w-full h-48 object-cover rounded-t-lg\"\n                    />\n                    <div className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <Badge className={getStatusColor(project.status)} size=\"sm\">\n                          {getStatusLabel(project.status)}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          {formatDate(project.startDate)}\n                        </span>\n                      </div>\n                      \n                      <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                        {project.name}\n                      </h3>\n                      \n                      <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                        {project.description}\n                      </p>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-blue-600\">\n                            {project.kpis.progress}%\n                          </div>\n                          <div className=\"text-xs text-gray-600\">Avancement</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-green-600\">\n                            {project.kpis.satisfaction}%\n                          </div>\n                          <div className=\"text-xs text-gray-600\">Satisfaction</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-purple-600\">\n                            {project.kpis.roi}%\n                          </div>\n                          <div className=\"text-xs text-gray-600\">ROI</div>\n                        </div>\n                      </div>\n                      \n                      <Button \n                        className=\"w-full\"\n                        onClick={() => handleViewProjectDetails(project)}\n                      >\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        Voir les d├⌐tails\n                      </Button>\n                    </div>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n\n        {activeTab === 'impact' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Impact du Partenariat SIPORTS 2026\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-6 bg-green-50 rounded-lg\">\n                    <div className=\"text-3xl font-bold text-green-600 mb-2\">285%</div>\n                    <div className=\"text-sm text-green-700\">ROI Global</div>\n                  </div>\n                  \n                  <div className=\"text-center p-6 bg-blue-50 rounded-lg\">\n                    <div className=\"text-3xl font-bold text-blue-600 mb-2\">3.2MΓé¼</div>\n                    <div className=\"text-sm text-blue-700\">Valeur G├⌐n├⌐r├⌐e</div>\n                  </div>\n                  \n                  <div className=\"text-center p-6 bg-purple-50 rounded-lg\">\n                    <div className=\"text-3xl font-bold text-purple-600 mb-2\">94%</div>\n                    <div className=\"text-sm text-purple-700\">Satisfaction</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n\n        {activeTab === 'contact' && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                  Informations de Contact\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Building2 className=\"h-5 w-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">{partner.name}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <MapPin className=\"h-5 w-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">Casablanca, {partner.country}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <Phone className=\"h-5 w-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">+212 522 123 456</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <Mail className=\"h-5 w-5 text-gray-400\" />\n                      <span className=\"text-gray-700\">contact@portcasablanca.ma</span>\n                    </div>\n                    \n                    {partner.website && (\n                      <div className=\"flex items-center space-x-3\">\n                        <Globe className=\"h-5 w-5 text-gray-400\" />\n                        <a href={partner.website} className=\"text-blue-600 hover:text-blue-700\">\n                          {partner.website}\n                        </a>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">Contact SIPORTS</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <div className=\"h-10 w-10 bg-blue-600 rounded-full flex items-center justify-center\">\n                            <Users className=\"h-5 w-5 text-white\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">Ahmed El Mansouri</p>\n                            <p className=\"text-sm text-gray-600\">Directeur Partenariats</p>\n                          </div>\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          <p>≡ƒôº ahmed.mansouri@portcasablanca.ma</p>\n                          <p>≡ƒô▒ +212 6 12 34 56 78</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n      </div>\n\n      {/* Modal D├⌐tails Projet */}\n      {showProjectModal && selectedProject && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            {/* Header Modal */}\n            <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 rounded-t-2xl\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold\">{selectedProject.name}</h2>\n                  <p className=\"text-blue-100\">{partner.name}</p>\n                </div>\n                <button\n                  onClick={() => setShowProjectModal(false)}\n                  className=\"p-2 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors\"\n                >\n                  <ArrowLeft className=\"h-6 w-6\" />\n                </button>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <Badge className={getStatusColor(selectedProject.status)} size=\"sm\">\n                  {getStatusLabel(selectedProject.status)}\n                </Badge>\n                <span className=\"text-blue-100 text-sm\">\n                  Budget: {selectedProject.budget}\n                </span>\n                <span className=\"text-blue-100 text-sm\">\n                  Impact: {selectedProject.impact}\n                </span>\n              </div>\n            </div>\n\n            {/* Contenu Modal */}\n            <div className=\"p-6\">\n              {/* Image Principale */}\n              <div className=\"mb-6\">\n                <img\n                  src={selectedProject.image}\n                  alt={selectedProject.name}\n                  className=\"w-full h-64 object-cover rounded-xl\"\n                />\n              </div>\n\n              {/* Description */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                  Description du Projet\n                </h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  {selectedProject.description}\n                </p>\n              </div>\n\n              {/* D├⌐tails Techniques */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">D├⌐tails Techniques</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Statut:</span>\n                      <Badge className={getStatusColor(selectedProject.status)} size=\"sm\">\n                        {getStatusLabel(selectedProject.status)}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">D├⌐but:</span>\n                      <span className=\"font-medium\">{formatDate(selectedProject.startDate)}</span>\n                    </div>\n                    {selectedProject.endDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Fin pr├⌐vue:</span>\n                        <span className=\"font-medium\">{formatDate(selectedProject.endDate)}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Budget:</span>\n                      <span className=\"font-bold text-green-600\">{selectedProject.budget}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">├ëquipe:</span>\n                      <span className=\"font-medium\">\n                        {selectedProject.status === 'completed' ? '45 experts' : \n                         selectedProject.status === 'active' ? '32 experts' : '15 experts'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">KPIs du Projet</h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-600\">Avancement</span>\n                        <span className=\"font-medium\">{selectedProject.kpis.progress}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full transition-all duration-500\"\n                          style={{ width: `${selectedProject.kpis.progress}%` }}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-600\">Satisfaction</span>\n                        <span className=\"font-medium\">{selectedProject.kpis.satisfaction}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-600 h-2 rounded-full transition-all duration-500\"\n                          style={{ width: `${selectedProject.kpis.satisfaction}%` }}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-600\">ROI</span>\n                        <span className=\"font-medium\">{selectedProject.kpis.roi}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-purple-600 h-2 rounded-full transition-all duration-500\"\n                          style={{ width: `${Math.min(selectedProject.kpis.roi, 100)}%` }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Technologies Utilis├⌐es */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Technologies Utilis├⌐es</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedProject.technologies.map((tech: string, index: number) => (\n                    <Badge key={index} variant=\"info\" size=\"sm\">\n                      {tech}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Chronologie du Projet */}\n              <div className=\"mb-8\">\n                <h4 className=\"font-semibold text-gray-900 mb-4\">Chronologie du Projet</h4>\n                <div className=\"space-y-4\">\n                  {selectedProject.timeline.map((phase: any, index: number) => (\n                    <div key={index} className=\"flex items-start space-x-4\">\n                      <div className={`w-4 h-4 rounded-full mt-1 ${\n                        phase.status === 'completed' ? 'bg-green-500' :\n                        phase.status === 'current' ? 'bg-blue-500' : 'bg-gray-300'\n                      }`} />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h5 className=\"font-medium text-gray-900\">{phase.phase}</h5>\n                          <span className=\"text-sm text-gray-500\">{formatDate(phase.date)}</span>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{phase.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Partenaires du Projet */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Partenaires du Projet</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedProject.partners.map((partnerName: string, index: number) => (\n                    <Badge key={index} variant=\"success\" size=\"sm\">\n                      <Handshake className=\"h-3 w-3 mr-1\" />\n                      {partnerName}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Documents et Ressources */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Documents & Ressources</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                  {selectedProject.documents.map((doc: any, index: number) => (\n                    <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\">\n                      <FileText className=\"h-5 w-5 text-blue-600\" />\n                      <div>\n                        <p className=\"font-medium text-gray-900 text-sm\">{doc.name}</p>\n                        <p className=\"text-xs text-gray-500\">{doc.type}</p>\n                      </div>\n                      <Download className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Galerie Photos */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Galerie du Projet</h4>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {selectedProject.gallery.map((image: string, index: number) => (\n                    <img\n                      key={index}\n                      src={image}\n                      alt={`Projet ${index + 1}`}\n                      className=\"w-full h-24 object-cover rounded-lg cursor-pointer hover:scale-105 transition-transform\"\n                    />\n                  ))}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex space-x-4\">\n                <Button className=\"flex-1\">\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Contacter l'├ëquipe Projet\n                </Button>\n                <Button variant=\"outline\">\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Partager\n                </Button>\n                <Button variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Rapport Complet\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\PartnersPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageCircle' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":168,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":168,"endColumn":17,"fix":{"range":[5698,6167],"text":"const filtered = partners.filter(partner => {\n      const matchesSearch = partner.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           partner.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = !selectedType || partner.type === selectedType;\n      const matchesCountry = !selectedCountry || partner.country === selectedCountry;\n      \n      return matchesSearch && matchesType && matchesCountry;\n    });"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Search, \n  Filter, \n  Grid, \n  List, \n  MapPin, \n  Users, \n  ExternalLink,\n  Star,\n  Verified,\n  Award,\n  Globe,\n  Building2,\n  Crown,\n  Handshake,\n  MessageCircle\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Badge } from '../components/ui/Badge';\nimport { Button } from '../components/ui/Button';\nimport { motion } from 'framer-motion';\n\ninterface Partner {\n  id: string;\n  name: string;\n  type: 'platinum' | 'gold' | 'silver' | 'bronze' | 'institutional';\n  category: string;\n  description: string;\n  logo: string;\n  website?: string;\n  country: string;\n  sector: string;\n  verified: boolean;\n  featured: boolean;\n  sponsorshipLevel: string;\n  contributions: string[];\n  establishedYear: number;\n  employees: string;\n}\n\nconst mockPartners: Partner[] = [\n  {\n    id: '1',\n    name: 'Minist├¿re de l\\'├ëquipement et de l\\'Eau',\n    type: 'institutional',\n    category: 'Organisateur Principal',\n    description: 'Minist├¿re organisateur du salon SIPORTS 2026, promoteur du d├⌐veloppement portuaire au Maroc et de la coop├⌐ration internationale.',\n    logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.equipement.gov.ma',\n    country: 'Maroc',\n    sector: 'Gouvernement',\n    verified: true,\n    featured: true,\n    sponsorshipLevel: 'Organisateur',\n    contributions: ['Organisation g├⌐n├⌐rale', 'Coordination internationale', 'Promotion du salon'],\n    establishedYear: 1956,\n    employees: '10000+'\n  },\n  {\n    id: '2',\n    name: 'Autorit├⌐ Portuaire de Casablanca',\n    type: 'platinum',\n    category: 'Partenaire Platine',\n    description: 'Premier port du Maroc et partenaire strat├⌐gique majeur, leader dans la modernisation portuaire africaine.',\n    logo: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.portcasablanca.ma',\n    country: 'Maroc',\n    sector: 'Autorit├⌐ Portuaire',\n    verified: true,\n    featured: true,\n    sponsorshipLevel: 'Platine',\n    contributions: ['Financement principal', 'Expertise technique', 'R├⌐seau international'],\n    establishedYear: 1907,\n    employees: '2500+'\n  },\n  {\n    id: '3',\n    name: 'Maersk Line',\n    type: 'gold',\n    category: 'Partenaire Or',\n    description: 'Leader mondial du transport maritime et de la logistique, partenaire privil├⌐gi├⌐ pour le d├⌐veloppement des corridors maritimes.',\n    logo: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.maersk.com',\n    country: 'Danemark',\n    sector: 'Transport Maritime',\n    verified: true,\n    featured: true,\n    sponsorshipLevel: 'Or',\n    contributions: ['Conf├⌐rences techniques', 'Networking premium', 'Innovation showcase'],\n    establishedYear: 1904,\n    employees: '100000+'\n  },\n  {\n    id: '4',\n    name: 'Port Authority of Rotterdam',\n    type: 'gold',\n    category: 'Partenaire Or',\n    description: 'Plus grand port d\\'Europe, pionnier de l\\'innovation portuaire et de la digitalisation des op├⌐rations.',\n    logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.portofrotterdam.com',\n    country: 'Pays-Bas',\n    sector: 'Autorit├⌐ Portuaire',\n    verified: true,\n    featured: false,\n    sponsorshipLevel: 'Or',\n    contributions: ['Expertise digitale', 'Best practices', 'Formations techniques'],\n    establishedYear: 1872,\n    employees: '1200+'\n  },\n  {\n    id: '5',\n    name: 'CMA CGM Group',\n    type: 'silver',\n    category: 'Partenaire Argent',\n    description: 'Groupe fran├ºais leader mondial du transport maritime et de la logistique, acteur majeur des ├⌐changes internationaux.',\n    logo: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.cma-cgm.com',\n    country: 'France',\n    sector: 'Transport Maritime',\n    verified: true,\n    featured: false,\n    sponsorshipLevel: 'Argent',\n    contributions: ['Solutions logistiques', 'R├⌐seau global', 'Innovation verte'],\n    establishedYear: 1978,\n    employees: '155000+'\n  },\n  {\n    id: '6',\n    name: 'Universit├⌐ Hassan II Casablanca',\n    type: 'bronze',\n    category: 'Partenaire Acad├⌐mique',\n    description: 'Institution acad├⌐mique de r├⌐f├⌐rence au Maroc, sp├⌐cialis├⌐e dans la formation maritime et portuaire.',\n    logo: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://www.univh2c.ma',\n    country: 'Maroc',\n    sector: '├ëducation',\n    verified: true,\n    featured: false,\n    sponsorshipLevel: 'Bronze',\n    contributions: ['Formation professionnelle', 'Recherche appliqu├⌐e', '├ëtudiants stagiaires'],\n    establishedYear: 1975,\n    employees: '5000+'\n  }\n];\n\nexport const PartnersPage: React.FC = () => {\n  const [partners, setPartners] = useState<Partner[]>([]);\n  const [filteredPartners, setFilteredPartners] = useState<Partner[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState('');\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulate API call\n    setTimeout(() => {\n      setPartners(mockPartners);\n      setFilteredPartners(mockPartners);\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    let filtered = partners.filter(partner => {\n      const matchesSearch = partner.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           partner.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = !selectedType || partner.type === selectedType;\n      const matchesCountry = !selectedCountry || partner.country === selectedCountry;\n      \n      return matchesSearch && matchesType && matchesCountry;\n    });\n\n    setFilteredPartners(filtered);\n  }, [partners, searchTerm, selectedType, selectedCountry]);\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'institutional': return Crown;\n      case 'platinum': return Award;\n      case 'gold': return Star;\n      case 'silver': return Building2;\n      case 'bronze': return Handshake;\n      default: return Building2;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'institutional': return 'bg-purple-100 text-purple-600';\n      case 'platinum': return 'bg-gray-100 text-gray-800';\n      case 'gold': return 'bg-yellow-100 text-yellow-600';\n      case 'silver': return 'bg-gray-100 text-gray-600';\n      case 'bronze': return 'bg-orange-100 text-orange-600';\n      default: return 'bg-blue-100 text-blue-600';\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'institutional': return 'Institutionnel';\n      case 'platinum': return 'Platine';\n      case 'gold': return 'Or';\n      case 'silver': return 'Argent';\n      case 'bronze': return 'Bronze';\n      default: return type;\n    }\n  };\n\n  const partnerTypes = [\n    { value: '', label: 'Tous les types' },\n    { value: 'institutional', label: 'Institutionnel' },\n    { value: 'platinum', label: 'Platine' },\n    { value: 'gold', label: 'Or' },\n    { value: 'silver', label: 'Argent' },\n    { value: 'bronze', label: 'Bronze' }\n  ];\n\n  const countries = [...new Set(partners.map(p => p.country))];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center mb-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n            >\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                Nos Partenaires SIPORTS 2026\n              </h1>\n              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n                D├⌐couvrez les organisations qui soutiennent et participent au d├⌐veloppement \n                du plus grand salon portuaire international\n              </p>\n            </motion.div>\n          </div>\n\n          {/* Search and Controls */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Rechercher un partenaire...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filtres\n              </Button>\n              \n              <div className=\"flex border border-gray-300 rounded-lg\">\n                <button\n                  onClick={() => setViewMode('grid')}\n                  className={`p-2 ${viewMode === 'grid' ? 'bg-blue-50 text-blue-600' : 'text-gray-400'}`}\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </button>\n                <button\n                  onClick={() => setViewMode('list')}\n                  className={`p-2 ${viewMode === 'list' ? 'bg-blue-50 text-blue-600' : 'text-gray-400'}`}\n                >\n                  <List className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Filters */}\n          {showFilters && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              className=\"mt-6 p-4 bg-gray-50 rounded-lg\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Type de partenaire\n                  </label>\n                  <select\n                    value={selectedType}\n                    onChange={(e) => setSelectedType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {partnerTypes.map((type) => (\n                      <option key={type.value} value={type.value}>\n                        {type.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Pays\n                  </label>\n                  <select\n                    value={selectedCountry}\n                    onChange={(e) => setSelectedCountry(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Tous les pays</option>\n                    {countries.map((country) => (\n                      <option key={country} value={country}>\n                        {country}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <div className=\"p-6 text-center\">\n              <Crown className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">1</div>\n              <div className=\"text-sm text-gray-600\">Organisateur</div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-6 text-center\">\n              <Award className=\"h-8 w-8 text-gray-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">1</div>\n              <div className=\"text-sm text-gray-600\">Partenaire Platine</div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-6 text-center\">\n              <Star className=\"h-8 w-8 text-yellow-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">2</div>\n              <div className=\"text-sm text-gray-600\">Partenaires Or</div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-6 text-center\">\n              <Handshake className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">6</div>\n              <div className=\"text-sm text-gray-600\">Total Partenaires</div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Partners List */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map(i => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-white rounded-lg p-6 h-80\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : filteredPartners.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4\">\n              <Search className=\"h-12 w-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              Aucun partenaire trouv├⌐\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Essayez de modifier vos crit├¿res de recherche\n            </p>\n            <Button onClick={() => {\n              setSearchTerm('');\n              setSelectedType('');\n              setSelectedCountry('');\n            }}>\n              R├⌐initialiser les filtres\n            </Button>\n          </div>\n        ) : (\n          <div className={viewMode === 'grid' \n            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n            : 'space-y-6'\n          }>\n            {filteredPartners.map((partner, index) => {\n              const TypeIcon = getTypeIcon(partner.type);\n              \n              return (\n                <motion.div\n                  key={partner.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                >\n                  <Card hover className={viewMode === 'list' ? 'flex items-center p-6' : 'h-full'}>\n                    {viewMode === 'grid' ? (\n                      <div className=\"flex flex-col h-full\">\n                        {/* Header */}\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <img\n                              src={partner.logo}\n                              alt={partner.name}\n                              className=\"h-12 w-12 rounded-lg object-cover\"\n                            />\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900 text-lg\">\n                                {partner.name}\n                              </h3>\n                              <p className=\"text-sm text-gray-500\">{partner.sector}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            {partner.featured && (\n                              <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                            )}\n                            {partner.verified && (\n                              <Verified className=\"h-4 w-4 text-blue-500\" />\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Type Badge */}\n                        <div className=\"mb-4\">\n                          <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTypeColor(partner.type)}`}>\n                            <TypeIcon className=\"h-4 w-4 mr-2\" />\n                            {getTypeLabel(partner.type)}\n                          </div>\n                        </div>\n\n                        {/* Description */}\n                        <p className=\"text-gray-600 text-sm mb-6 flex-grow line-clamp-3\">\n                          {partner.description}\n                        </p>\n\n                        {/* Contributions */}\n                        <div className=\"mb-6\">\n                          <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n                            Contributions :\n                          </h4>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {partner.contributions.slice(0, 3).map((contribution, idx) => (\n                              <Badge key={idx} variant=\"info\" size=\"sm\">\n                                {contribution}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Stats */}\n                        <div className=\"flex items-center justify-between text-sm text-gray-500 mb-6\">\n                          <div className=\"flex items-center space-x-1\">\n                            <MapPin className=\"h-4 w-4\" />\n                            <span>{partner.country}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Users className=\"h-4 w-4\" />\n                            <span>{partner.employees}</span>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex space-x-3\">\n                          <Link to={`/partners/${partner.id}`}>\n                            <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                              En savoir plus\n                            </Button>\n                          </Link>\n                          {partner.website && (\n                            <a\n                              href={partner.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-6 w-full\">\n                        <img\n                          src={partner.logo}\n                          alt={partner.name}\n                          className=\"h-16 w-16 rounded-lg object-cover flex-shrink-0\"\n                        />\n                        \n                        <div className=\"flex-grow\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900 text-lg\">\n                                {partner.name}\n                              </h3>\n                              <p className=\"text-sm text-gray-500\">{partner.sector}</p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(partner.type)}`}>\n                                <TypeIcon className=\"h-3 w-3 mr-1\" />\n                                {getTypeLabel(partner.type)}\n                              </div>\n                              {partner.verified && (\n                                <Verified className=\"h-4 w-4 text-blue-500\" />\n                              )}\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                            {partner.description}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                              <div className=\"flex items-center space-x-1\">\n                                <MapPin className=\"h-4 w-4\" />\n                                <span>{partner.country}</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Users className=\"h-4 w-4\" />\n                                <span>{partner.employees}</span>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-3\">\n                              <Link to={`/partners/${partner.id}`}>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  En savoir plus\n                                </Button>\n                              </Link>\n                              {partner.website && (\n                                <a\n                                  href={partner.website}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n                                >\n                                  <ExternalLink className=\"h-4 w-4\" />\n                                </a>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\pages\\UserManagementPage.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":144,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":144,"endColumn":17,"fix":{"range":[3999,4531],"text":"const filtered = users.filter(user => {\n      const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           user.company.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = !selectedType || user.type === selectedType;\n      const matchesStatus = !selectedStatus || user.status === selectedStatus;\n      \n      return matchesSearch && matchesType && matchesStatus;\n    });"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":252,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":656,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":656,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25240,25243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25240,25243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { SupabaseService } from '../services/supabaseService';\nimport { toast } from 'react-hot-toast';\nimport { Link } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  Users,\n  Building2,\n  Crown,\n  Eye,\n  Search,\n  Filter,\n  Trash2,\n  UserCheck,\n  UserX,\n  MapPin,\n  Calendar,\n  Shield,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Plus,\n  Download\n} from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { Button } from '../components/ui/Button';\nimport { Badge } from '../components/ui/Badge';\nimport { motion } from 'framer-motion';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  type: 'exhibitor' | 'partner' | 'visitor' | 'admin';\n  company: string;\n  country: string;\n  status: 'active' | 'pending' | 'suspended' | 'rejected';\n  registrationDate: Date;\n  lastActivity: Date;\n  verified: boolean;\n}\n\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    name: 'Sarah Johnson',\n    email: 'sarah.johnson@portsolutions.com',\n    type: 'exhibitor',\n    company: 'Port Solutions Inc.',\n    country: 'Netherlands',\n    status: 'active',\n    registrationDate: new Date('2024-01-15'),\n    lastActivity: new Date(Date.now() - 3600000),\n    verified: true\n  },\n  {\n    id: '2',\n    name: 'Ahmed El Mansouri',\n    email: 'ahmed@portcasablanca.ma',\n    type: 'partner',\n    company: 'Autorit├⌐ Portuaire Casablanca',\n    country: 'Morocco',\n    status: 'active',\n    registrationDate: new Date('2024-01-10'),\n    lastActivity: new Date(Date.now() - 7200000),\n    verified: true\n  },\n  {\n    id: '3',\n    name: 'Marie Dubois',\n    email: 'marie.dubois@maritime-consulting.fr',\n    type: 'visitor',\n    company: 'Maritime Consulting France',\n    country: 'France',\n    status: 'pending',\n    registrationDate: new Date('2024-01-20'),\n    lastActivity: new Date(Date.now() - 14400000),\n    verified: false\n  },\n  {\n    id: '4',\n    name: 'Dr. Maria Santos',\n    email: 'maria.santos@maritimeuni.es',\n    type: 'visitor',\n    company: 'Maritime University Barcelona',\n    country: 'Spain',\n    status: 'active',\n    registrationDate: new Date('2024-01-18'),\n    lastActivity: new Date(Date.now() - 1800000),\n    verified: true\n  },\n  {\n    id: '5',\n    name: 'John Smith',\n    email: 'john.smith@techport.com',\n    type: 'exhibitor',\n    company: 'TechPort Solutions',\n    country: 'United Kingdom',\n    status: 'suspended',\n    registrationDate: new Date('2024-01-12'),\n    lastActivity: new Date(Date.now() - 86400000),\n    verified: true\n  }\n];\n\nexport const UserManagementPage: React.FC = () => {\n  const [users, setUsers] = useState<User[]>(mockUsers);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>(mockUsers);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [viewUser, setViewUser] = useState<User | null>(null);\n\n  // Handler pour l'export CSV\n  const handleExport = () => {\n    // Export CSV simple (mock)\n    const csv = [\n      ['Nom', 'Email', 'Type', 'Entreprise', 'Pays', 'Statut'],\n      ...filteredUsers.map(u => [u.name, u.email, u.type, u.company, u.country, u.status])\n    ].map(row => row.join(';')).join('\\n');\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'utilisateurs.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Handler pour ouvrir le modal de cr├⌐ation\n  const handleCreateUser = () => {\n    setShowCreateModal(true);\n  };\n\n  // Handler pour voir le d├⌐tail utilisateur\n  const handleViewUser = (user: User) => {\n    setViewUser(user);\n  };\n  useEffect(() => {\n    let filtered = users.filter(user => {\n      const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           user.company.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = !selectedType || user.type === selectedType;\n      const matchesStatus = !selectedStatus || user.status === selectedStatus;\n      \n      return matchesSearch && matchesType && matchesStatus;\n    });\n\n    setFilteredUsers(filtered);\n  }, [users, searchTerm, selectedType, selectedStatus]);\n\n  const getUserTypeIcon = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return Building2;\n      case 'partner': return Crown;\n      case 'visitor': return Users;\n      case 'admin': return Shield;\n      default: return Users;\n    }\n  };\n\n  const getUserTypeLabel = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return 'Exposant';\n      case 'partner': return 'Partenaire';\n      case 'visitor': return 'Visiteur';\n      case 'admin': return 'Administrateur';\n      default: return type;\n    }\n  };\n\n  const getUserTypeColor = (type: string) => {\n    switch (type) {\n      case 'exhibitor': return 'bg-blue-100 text-blue-800';\n      case 'partner': return 'bg-purple-100 text-purple-800';\n      case 'visitor': return 'bg-green-100 text-green-800';\n      case 'admin': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'pending': return 'warning';\n      case 'suspended': return 'error';\n      case 'rejected': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Actif';\n      case 'pending': return 'En attente';\n      case 'suspended': return 'Suspendu';\n      case 'rejected': return 'Rejet├⌐';\n      default: return status;\n    }\n  };\n\n  const handleUserAction = async (userId: string, action: 'activate' | 'suspend' | 'delete') => {\n    setIsLoading(true);\n    try {\n      if (action === 'delete') {\n        await SupabaseService.deleteUser(userId);\n        setUsers(prev => prev.filter(u => u.id !== userId));\n        toast.success('Utilisateur supprim├⌐ avec succ├¿s');\n      } else {\n        const newStatus = action === 'activate' ? 'active' : 'suspended';\n        await SupabaseService.updateUser(userId, { status: newStatus });\n        setUsers(prev => prev.map(u => u.id === userId ? { ...u, status: newStatus } : u));\n        toast.success(`Utilisateur ${action === 'activate' ? 'activ├⌐' : 'suspendu'} avec succ├¿s`);\n      }\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      toast.error('Erreur lors de l\\'action');\n    }\n  };\n\n  const handleBulkAction = async (action: 'activate' | 'suspend' | 'delete') => {\n    if (selectedUsers.length === 0) {\n      toast.error('Veuillez s├⌐lectionner au moins un utilisateur');\n      return;\n    }\n\n    const confirmMessage = `├ètes-vous s├╗r de vouloir ${\n      action === 'activate' ? 'activer' : \n      action === 'suspend' ? 'suspendre' : 'supprimer'\n    } ${selectedUsers.length} utilisateur(s) ?`;\n\n    if (window.confirm(confirmMessage)) {\n      setIsLoading(true);\n      try {\n        if (action === 'delete') {\n          await Promise.all(selectedUsers.map(id => SupabaseService.deleteUser(id)));\n          setUsers(prev => prev.filter(u => !selectedUsers.includes(u.id)));\n        } else {\n          const newStatus = action === 'activate' ? 'active' : 'suspended';\n          await Promise.all(selectedUsers.map(id => SupabaseService.updateUser(id, { status: newStatus })));\n          setUsers(prev => prev.map(u => selectedUsers.includes(u.id) ? { ...u, status: newStatus } : u));\n        }\n        setSelectedUsers([]);\n        setIsLoading(false);\n        toast.success(`Action appliqu├⌐e ├á ${selectedUsers.length} utilisateur(s)`);\n      } catch (error) {\n        setIsLoading(false);\n        toast.error('Erreur lors de l\\'action group├⌐e');\n      }\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    }).format(date);\n  };\n\n  const getLastActivityText = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffHours < 1) return '├Ç l\\'instant';\n    if (diffHours < 24) return `Il y a ${diffHours}h`;\n    if (diffDays < 7) return `Il y a ${diffDays}j`;\n    return formatDate(date);\n  };\n\n  const userStats = {\n    total: users.length,\n    active: users.filter(u => u.status === 'active').length,\n    pending: users.filter(u => u.status === 'pending').length,\n    suspended: users.filter(u => u.status === 'suspended').length,\n    exhibitors: users.filter(u => u.type === 'exhibitor').length,\n    partners: users.filter(u => u.type === 'partner').length,\n    visitors: users.filter(u => u.type === 'visitor').length,\n    admins: users.filter(u => u.type === 'admin').length\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour au Tableau de Bord Admin\n              </Button>\n            </Link>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-blue-600 p-3 rounded-lg\">\n                <Users className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  Gestion des Utilisateurs\n                </h1>\n                <p className=\"text-gray-600\">\n                  Administrez les comptes utilisateurs de la plateforme SIPORTS\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n                <span className=\"text-blue-800 font-medium\">Gestion Utilisateurs</span>\n                <Badge variant=\"info\" size=\"sm\">{userStats.total} utilisateurs</Badge>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Statistiques Utilisateurs */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Users className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.total}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Utilisateurs</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-green-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.active}\n            </div>\n            <div className=\"text-sm text-gray-600\">Comptes Actifs</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-yellow-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Clock className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.pending}\n            </div>\n            <div className=\"text-sm text-gray-600\">En Attente</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-red-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.suspended}\n            </div>\n            <div className=\"text-sm text-gray-600\">Suspendus</div>\n          </Card>\n        </div>\n\n        {/* R├⌐partition par Type */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-blue-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Building2 className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.exhibitors}\n            </div>\n            <div className=\"text-sm text-gray-600\">Exposants</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-purple-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Crown className=\"h-6 w-6 text-purple-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.partners}\n            </div>\n            <div className=\"text-sm text-gray-600\">Partenaires</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-green-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Users className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.visitors}\n            </div>\n            <div className=\"text-sm text-gray-600\">Visiteurs</div>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <div className=\"bg-red-100 p-3 rounded-lg w-12 h-12 mx-auto mb-3\">\n              <Shield className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n              {userStats.admins}\n            </div>\n            <div className=\"text-sm text-gray-600\">Administrateurs</div>\n          </Card>\n        </div>\n\n        {/* Filtres et Actions */}\n        <Card className=\"mb-6\">\n          <div className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              {/* Recherche */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Rechercher par nom, email ou entreprise...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              \n              {/* Actions */}\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filtres\n                </Button>\n                \n                <Button variant=\"outline\" onClick={handleExport}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Exporter\n                </Button>\n                \n                <Button onClick={handleCreateUser}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Nouvel Utilisateur\n                </Button>\n              </div>\n            </div>\n\n            {/* Filtres Avanc├⌐s */}\n            {showFilters && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                className=\"mt-4 pt-4 border-t border-gray-200\"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Type d'utilisateur\n                    </label>\n                    <select\n                      value={selectedType}\n                      onChange={(e) => setSelectedType(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">Tous les types</option>\n                      <option value=\"exhibitor\">Exposants</option>\n                      <option value=\"partner\">Partenaires</option>\n                      <option value=\"visitor\">Visiteurs</option>\n                      <option value=\"admin\">Administrateurs</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Statut\n                    </label>\n                    <select\n                      value={selectedStatus}\n                      onChange={(e) => setSelectedStatus(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">Tous les statuts</option>\n                      <option value=\"active\">Actifs</option>\n                      <option value=\"pending\">En attente</option>\n                      <option value=\"suspended\">Suspendus</option>\n                      <option value=\"rejected\">Rejet├⌐s</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"flex items-end\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSearchTerm('');\n                        setSelectedType('');\n                        setSelectedStatus('');\n                      }}\n                      className=\"w-full\"\n                    >\n                      R├⌐initialiser\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Actions Group├⌐es */}\n            {selectedUsers.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"mt-4 pt-4 border-t border-gray-200\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">\n                    {selectedUsers.length} utilisateur(s) s├⌐lectionn├⌐(s)\n                  </span>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleBulkAction('activate')}\n                      disabled={isLoading}\n                    >\n                      <UserCheck className=\"h-4 w-4 mr-1\" />\n                      Activer\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleBulkAction('suspend')}\n                      disabled={isLoading}\n                    >\n                      <UserX className=\"h-4 w-4 mr-1\" />\n                      Suspendre\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleBulkAction('delete')}\n                      disabled={isLoading}\n                      className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Supprimer\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </Card>\n\n        {/* Liste des Utilisateurs */}\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedUsers.length === filteredUsers.length && filteredUsers.length > 0}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedUsers(filteredUsers.map(u => u.id));\n                        } else {\n                          setSelectedUsers([]);\n                        }\n                      }}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Utilisateur\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Statut\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Inscription\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Derni├¿re Activit├⌐\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredUsers.map((user, index) => {\n                  const UserIcon = getUserTypeIcon(user.type);\n                  \n                  return (\n                    <motion.tr\n                      key={user.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className=\"hover:bg-gray-50\"\n                    >\n                      <td className=\"px-6 py-4\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedUsers.includes(user.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedUsers([...selectedUsers, user.id]);\n                            } else {\n                              setSelectedUsers(selectedUsers.filter(id => id !== user.id));\n                            }\n                          }}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                        />\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <Users className=\"h-5 w-5 text-gray-600\" />\n                          </div>\n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-medium text-gray-900\">{user.name}</span>\n                              {user.verified && (\n                                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                              )}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">{user.email}</div>\n                            <div className=\"text-sm text-gray-500\">{user.company}</div>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getUserTypeColor(user.type)}`}>\n                          <UserIcon className=\"h-3 w-3 mr-1\" />\n                          {getUserTypeLabel(user.type)}\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <Badge \n                          variant={getStatusColor(user.status) as any}\n                          size=\"sm\"\n                        >\n                          {getStatusLabel(user.status)}\n                        </Badge>\n                      </td>\n                      \n                      <td className=\"px-6 py-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(user.registrationDate)}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1 mt-1\">\n                          <MapPin className=\"h-4 w-4\" />\n                          <span>{user.country}</span>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4 text-sm text-gray-600\">\n                        {getLastActivityText(user.lastActivity)}\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewUser(user)}>\n                            <Eye className=\"h-3 w-3 mr-1\" />\n                            Voir\n                          </Button>\n                          \n                          {user.status === 'pending' && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => handleUserAction(user.id, 'activate')}\n                              disabled={isLoading}\n                            >\n                              <UserCheck className=\"h-3 w-3 mr-1\" />\n                              Activer\n                            </Button>\n                          )}\n                          \n                          {user.status === 'active' && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleUserAction(user.id, 'suspend')}\n                              disabled={isLoading}\n                            >\n                              <UserX className=\"h-3 w-3 mr-1\" />\n                              Suspendre\n                            </Button>\n                          )}\n                          \n                          {user.status === 'suspended' && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => handleUserAction(user.id, 'activate')}\n                              disabled={isLoading}\n                            >\n                              <UserCheck className=\"h-3 w-3 mr-1\" />\n                              R├⌐activer\n                            </Button>\n                          )}\n                          \n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleUserAction(user.id, 'delete')}\n                            disabled={isLoading}\n                            className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </motion.tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          {filteredUsers.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Aucun utilisateur trouv├⌐\n              </h3>\n              <p className=\"text-gray-600\">\n                Essayez de modifier vos crit├¿res de recherche\n              </p>\n            </div>\n          )}\n        </Card>\n      </div>\n      {/* Modal Cr├⌐ation Utilisateur (mock) */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-lg p-8 w-full max-w-md\">\n            <h2 className=\"text-xl font-bold mb-4\">Cr├⌐er un nouvel utilisateur</h2>\n            <p className=\"mb-4\">(Formulaire ├á impl├⌐menter)</p>\n            <Button onClick={() => setShowCreateModal(false)}>Fermer</Button>\n          </div>\n        </div>\n      )}\n\n      {/* Modal Voir Utilisateur (mock) */}\n      {viewUser && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-lg p-8 w-full max-w-md\">\n            <h2 className=\"text-xl font-bold mb-4\">D├⌐tail utilisateur</h2>\n            <div className=\"mb-2\"><b>Nom :</b> {viewUser.name}</div>\n            <div className=\"mb-2\"><b>Email :</b> {viewUser.email}</div>\n            <div className=\"mb-2\"><b>Type :</b> {getUserTypeLabel(viewUser.type)}</div>\n            <div className=\"mb-2\"><b>Entreprise :</b> {viewUser.company}</div>\n            <div className=\"mb-2\"><b>Pays :</b> {viewUser.country}</div>\n            <div className=\"mb-2\"><b>Statut :</b> {getStatusLabel(viewUser.status)}</div>\n            <Button onClick={() => setViewUser(null)}>Fermer</Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\services\\googleAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[973,976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[973,976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[995,998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[995,998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2455,2458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2455,2458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  GoogleAuthProvider, \n  signInWithPopup, \n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  User as FirebaseUser\n} from 'firebase/auth';\nimport { User } from '../types';\n\n// Configuration Firebase (remplacez par vos vraies cl├⌐s)\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || '',\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || '',\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || '',\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || '',\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || '',\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || ''\n};\n\n// V├⌐rifier si Firebase est configur├⌐\nconst isFirebaseConfigured = firebaseConfig.apiKey && \n                             firebaseConfig.authDomain && \n                             firebaseConfig.projectId;\n\n// Initialiser Firebase seulement si configur├⌐\nlet app: any = null;\nlet auth: any = null;\nlet googleProvider: GoogleAuthProvider | null = null;\n\nif (isFirebaseConfigured) {\n  app = initializeApp(firebaseConfig);\n  auth = getAuth(app);\n  googleProvider = new GoogleAuthProvider();\n  \n  // Configuration du provider Google\n  googleProvider.addScope('email');\n  googleProvider.addScope('profile');\n  googleProvider.setCustomParameters({\n    prompt: 'select_account'\n  });\n}\n\n\nexport class GoogleAuthService {\n  \n  /**\n   * Connexion avec Google\n   */\n  static async signInWithGoogle(): Promise<User> {\n    if (!isFirebaseConfigured || !auth || !googleProvider) {\n      throw new Error('Firebase n\\'est pas configur├⌐. Veuillez configurer vos cl├⌐s Firebase dans le fichier .env');\n    }\n    \n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const firebaseUser = result.user;\n      \n      // R├⌐cup├⌐rer les informations utilisateur depuis Google\n      const googleUser = await this.mapFirebaseUserToSiportsUser(firebaseUser);\n      \n      // V├⌐rifier si l'utilisateur existe d├⌐j├á dans notre base\n      const existingUser = await this.checkExistingUser(googleUser.email);\n      \n      if (existingUser) {\n        // Utilisateur existant - mise ├á jour des infos Google\n        return await this.updateUserWithGoogleInfo(existingUser, firebaseUser);\n      } else {\n        // Nouvel utilisateur - cr├⌐ation automatique\n        return await this.createUserFromGoogle(firebaseUser);\n      }\n      \n    } catch (error: any) {\n      console.error('Erreur connexion Google:', error);\n      \n      // Gestion des erreurs sp├⌐cifiques\n      if (error.code === 'auth/popup-closed-by-user') {\n        throw new Error('Connexion annul├⌐e par l\\'utilisateur');\n      } else if (error.code === 'auth/popup-blocked') {\n        throw new Error('Popup bloqu├⌐e par le navigateur. Veuillez autoriser les popups.');\n      } else if (error.code === 'auth/network-request-failed') {\n        throw new Error('Erreur r├⌐seau. V├⌐rifiez votre connexion internet.');\n      } else {\n        throw new Error('Erreur lors de la connexion Google. Veuillez r├⌐essayer.');\n      }\n    }\n  }\n\n  /**\n   * D├⌐connexion\n   */\n  static async signOut(): Promise<void> {\n    if (!auth) {\n      throw new Error('Firebase n\\'est pas configur├⌐');\n    }\n    \n    try {\n      await firebaseSignOut(auth);\n    } catch (error) {\n      console.error('Erreur d├⌐connexion:', error);\n      throw new Error('Erreur lors de la d├⌐connexion');\n    }\n  }\n\n  /**\n   * ├ëcouter les changements d'├⌐tat d'authentification\n   */\n  static onAuthStateChanged(callback: (user: FirebaseUser | null) => void) {\n    if (!auth) {\n      callback(null);\n      return () => {};\n    }\n    \n    return onAuthStateChanged(auth, callback);\n  }\n\n  /**\n   * Mapper un utilisateur Firebase vers un utilisateur SIPORTS\n   */\n  private static async mapFirebaseUserToSiportsUser(firebaseUser: FirebaseUser): Promise<User> {\n    const displayName = firebaseUser.displayName || '';\n    const nameParts = displayName.split(' ');\n    const firstName = nameParts[0] || '';\n    const lastName = nameParts.slice(1).join(' ') || '';\n\n    return {\n      id: firebaseUser.uid,\n      email: firebaseUser.email || '',\n      name: displayName,\n      type: 'visitor', // Par d├⌐faut, les nouveaux utilisateurs Google sont des visiteurs\n      profile: {\n        firstName,\n        lastName,\n        avatar: firebaseUser.photoURL || undefined,\n        company: '', // ├Ç remplir par l'utilisateur\n        position: '', // ├Ç remplir par l'utilisateur\n        country: '', // ├Ç d├⌐terminer via g├⌐olocalisation ou ├á remplir\n        phone: firebaseUser.phoneNumber || undefined,\n        bio: '',\n        interests: [],\n        objectives: []\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n  }\n\n  /**\n   * V├⌐rifier si un utilisateur existe d├⌐j├á\n   */\n  private static async checkExistingUser(email: string): Promise<User | null> {\n    try {\n      // Simulation d'appel API pour v├⌐rifier l'utilisateur existant\n      // En production, remplacez par un vrai appel API\n      const response = await fetch(`/api/users/check?email=${encodeURIComponent(email)}`);\n      \n      if (response.ok) {\n        const userData = await response.json();\n        return userData.user || null;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Erreur v├⌐rification utilisateur:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Mettre ├á jour un utilisateur existant avec les infos Google\n   */\n  private static async updateUserWithGoogleInfo(existingUser: User, firebaseUser: FirebaseUser): Promise<User> {\n    const updatedUser: User = {\n      ...existingUser,\n      profile: {\n        ...existingUser.profile,\n        avatar: firebaseUser.photoURL || existingUser.profile.avatar,\n        // Mettre ├á jour le nom si pas encore renseign├⌐\n        firstName: existingUser.profile.firstName || firebaseUser.displayName?.split(' ')[0] || '',\n        lastName: existingUser.profile.lastName || firebaseUser.displayName?.split(' ').slice(1).join(' ') || ''\n      },\n      updatedAt: new Date()\n    };\n\n    // Simulation de sauvegarde en base\n    // En production, remplacez par un vrai appel API\n    try {\n      await fetch(`/api/users/${existingUser.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedUser)\n      });\n    } catch (error) {\n      console.error('Erreur mise ├á jour utilisateur:', error);\n    }\n\n    return updatedUser;\n  }\n\n  /**\n   * Cr├⌐er un nouvel utilisateur depuis Google\n   */\n  private static async createUserFromGoogle(firebaseUser: FirebaseUser): Promise<User> {\n    const newUser = await this.mapFirebaseUserToSiportsUser(firebaseUser);\n\n    // Simulation de cr├⌐ation en base\n    // En production, remplacez par un vrai appel API\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newUser)\n      });\n\n      if (response.ok) {\n        const createdUser = await response.json();\n        return createdUser.user;\n      }\n    } catch (error) {\n      console.error('Erreur cr├⌐ation utilisateur:', error);\n    }\n\n    return newUser;\n  }\n\n  /**\n   * Obtenir l'utilisateur actuellement connect├⌐\n   */\n  static getCurrentUser(): FirebaseUser | null {\n    if (!auth) return null;\n    return auth.currentUser;\n  }\n\n  /**\n   * V├⌐rifier si l'utilisateur est connect├⌐\n   */\n  static isAuthenticated(): boolean {\n    if (!auth) return false;\n    return !!auth.currentUser;\n  }\n\n  /**\n   * Obtenir le token d'authentification\n   */\n  static async getAuthToken(): Promise<string | null> {\n    if (!auth) return null;\n    const user = auth.currentUser;\n    if (user) {\n      return await user.getIdToken();\n    }\n    return null;\n  }\n\n  /**\n   * Rafra├«chir le token d'authentification\n   */\n  static async refreshToken(): Promise<string | null> {\n    if (!auth) return null;\n    const user = auth.currentUser;\n    if (user) {\n      return await user.getIdToken(true);\n    }\n    return null;\n  }\n}\n\nexport default GoogleAuthService;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\services\\supabaseService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6033,6036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6033,6036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6478,6481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6478,6481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6492,6495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6492,6495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8812,8815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8812,8815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13766,13769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13766,13769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":468,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14091,14094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14091,14094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":510,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15434,15437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15434,15437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":524,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15786,15789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15786,15789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":540,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16224,16227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16224,16227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":562,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16826,16829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16826,16829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":577,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":577,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17255,17258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17255,17258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":620,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":620,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18495,18498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18495,18498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../lib/supabase';\nimport { isSupabaseReady } from '../lib/supabase';\nimport { User, Exhibitor, Product, Appointment, Event, ChatMessage } from '../types';\n\nexport class SupabaseService {\n  static async deleteUser(id: string): Promise<void> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { error } = await safeSupabase\n      .from('users')\n      .delete()\n      .eq('id', id);\n    if (error) throw error;\n  }\n  \n  private static checkSupabaseConnection() {\n    return isSupabaseReady() && supabase;\n  }\n  \n  // ==================== USERS ====================\n  \n  static async createUser(userData: Partial<User>): Promise<User> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('users')\n      .insert([{\n        email: userData.email,\n        name: userData.name,\n        type: userData.type || 'visitor',\n        profile: userData.profile || {}\n      }])\n      .select()\n      .single();\n    if (error) throw error;\n    return this.mapUserFromDB(data);\n  }\n\n  static async getUserById(id: string): Promise<User | null> {\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null; // Not found\n      throw error;\n    }\n    \n    return this.mapUserFromDB(data);\n  }\n\n  static async getUserByEmail(email: string): Promise<User | null> {\n    if (!this.checkSupabaseConnection()) {\n      return null;\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null; // Not found\n      throw error;\n    }\n    \n    return this.mapUserFromDB(data);\n  }\n\n  static async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('users')\n      .update({\n        name: updates.name,\n        type: updates.type,\n        profile: updates.profile\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return this.mapUserFromDB(data);\n  }\n\n  // ==================== EXHIBITORS ====================\n  \n  static async getExhibitors(): Promise<Exhibitor[]> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('exhibitors')\n      .select(`*, user:users(*), products(*), mini_site:mini_sites(*)`);\n    if (error) throw error;\n    return (data || []).map(this.mapExhibitorFromDB);\n  }\n\n  static async getExhibitorById(id: string): Promise<Exhibitor | null> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('exhibitors')\n      .select(`\n        *,\n        user:users(*),\n        products(*),\n        mini_site:mini_sites(*)\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null;\n      throw error;\n    }\n    \n    return this.mapExhibitorFromDB(data);\n  }\n\n  static async createExhibitor(exhibitorData: Partial<Exhibitor>): Promise<Exhibitor> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('exhibitors')\n      .insert([{\n        user_id: exhibitorData.userId,\n        company_name: exhibitorData.companyName,\n        category: exhibitorData.category,\n        sector: exhibitorData.sector,\n        description: exhibitorData.description,\n        logo_url: exhibitorData.logo,\n        website: exhibitorData.website,\n        contact_info: exhibitorData.contactInfo || {}\n      }])\n      .select(`\n        *,\n        user:users(*),\n        products(*),\n        mini_site:mini_sites(*)\n      `)\n      .single();\n\n    if (error) throw error;\n    return this.mapExhibitorFromDB(data);\n  }\n\n  static async updateExhibitor(id: string, updates: Partial<Exhibitor>): Promise<Exhibitor> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('exhibitors')\n      .update({\n        company_name: updates.companyName,\n        category: updates.category,\n        sector: updates.sector,\n        description: updates.description,\n        logo_url: updates.logo,\n        website: updates.website,\n        verified: updates.verified,\n        featured: updates.featured,\n        contact_info: updates.contactInfo\n      })\n      .eq('id', id)\n      .select(`\n        *,\n        user:users(*),\n        products(*),\n        mini_site:mini_sites(*)\n      `)\n      .single();\n\n    if (error) throw error;\n    return this.mapExhibitorFromDB(data);\n  }\n\n  // ==================== MOCK DATA ====================\n  \n\n  // ==================== MINI SITES ====================\n  \n  static async getMiniSite(exhibitorId: string): Promise<any> {\n    if (!this.checkSupabaseConnection()) {\n      return null;\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('mini_sites')\n      .select('*')\n      .eq('exhibitor_id', exhibitorId)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null;\n      throw error;\n    }\n    \n    return data;\n  }\n\n  static async updateMiniSite(exhibitorId: string, siteData: any): Promise<any> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    \n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('mini_sites')\n      .upsert({\n        exhibitor_id: exhibitorId,\n        theme: siteData.theme,\n        custom_colors: siteData.customColors,\n        sections: siteData.sections,\n        published: siteData.published\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  static async incrementMiniSiteViews(exhibitorId: string): Promise<void> {\n    if (!this.checkSupabaseConnection()) {\n      return;\n    }\n    \n    const safeSupabase = supabase!;\n    // Incr├⌐mentation manuelle (lecture + update)\n    const { data, error: fetchError } = await safeSupabase\n      .from('mini_sites')\n      .select('views')\n      .eq('exhibitor_id', exhibitorId)\n      .single();\n    if (fetchError) throw fetchError;\n    const currentViews = data?.views || 0;\n    const { error } = await safeSupabase\n      .from('mini_sites')\n      .update({ \n        views: currentViews + 1,\n        last_updated: new Date().toISOString()\n      })\n      .eq('exhibitor_id', exhibitorId);\n\n    if (error) throw error;\n  }\n\n  // ==================== PRODUCTS ====================\n  \n  static async getProductsByExhibitor(exhibitorId: string): Promise<Product[]> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('products')\n      .select('*')\n      .eq('exhibitor_id', exhibitorId)\n      .order('featured', { ascending: false })\n      .order('name');\n    if (error) throw error;\n    return (data || []).map(this.mapProductFromDB);\n  }\n\n  static async createProduct(productData: Partial<Product>): Promise<Product> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('products')\n      .insert([{\n        exhibitor_id: (productData as any).exhibitorId, // Cast temporaire, ├á corriger dans le type Product\n        name: productData.name,\n        description: productData.description,\n        category: productData.category,\n        images: productData.images || [],\n        specifications: productData.specifications,\n        price: productData.price,\n        featured: productData.featured || false\n      }])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return this.mapProductFromDB(data);\n  }\n\n  static async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('products')\n      .update({\n        name: updates.name,\n        description: updates.description,\n        category: updates.category,\n        images: updates.images,\n        specifications: updates.specifications,\n        price: updates.price,\n        featured: updates.featured\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return this.mapProductFromDB(data);\n  }\n\n  static async deleteProduct(id: string): Promise<void> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { error } = await safeSupabase\n      .from('products')\n      .delete()\n      .eq('id', id);\n    if (error) throw error;\n  }\n\n  // ==================== APPOINTMENTS ====================\n  \n  static async getAppointmentsByUser(userId: string): Promise<Appointment[]> {\n    if (!this.checkSupabaseConnection()) {\n      return [];\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('appointments')\n      .select(`\n        *,\n        exhibitor:exhibitors(*),\n        visitor:users(*),\n        time_slot:time_slots(*)\n      `)\n      .or(`visitor_id.eq.${userId},exhibitor_id.in.(select id from exhibitors where user_id = '${userId}')`)\n      .order('created_at', { ascending: false });\n    if (error) throw error;\n    return data.map(this.mapAppointmentFromDB);\n  }\n\n  static async createAppointment(appointmentData: Partial<Appointment>): Promise<Appointment> {\n    if (!this.checkSupabaseConnection()) {\n      throw new Error('Supabase non configur├⌐. Veuillez configurer vos variables d\\'environnement Supabase.');\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('appointments')\n      .insert([{\n        exhibitor_id: appointmentData.exhibitorId,\n        visitor_id: appointmentData.visitorId,\n        time_slot_id: appointmentData.timeSlotId,\n        message: appointmentData.message,\n        meeting_type: appointmentData.meetingType || 'in-person'\n      }])\n      .select(`\n        *,\n        exhibitor:exhibitors(*),\n        visitor:users(*),\n        time_slot:time_slots(*)\n      `)\n      .single();\n    if (error) throw error;\n    return this.mapAppointmentFromDB(data);\n  }\n\n  static async updateAppointmentStatus(id: string, status: string): Promise<void> {\n    if (!this.checkSupabaseConnection()) {\n      return;\n    }\n    const safeSupabase = supabase!;\n    const { error } = await safeSupabase\n      .from('appointments')\n      .update({ status })\n      .eq('id', id);\n    if (error) throw error;\n  }\n\n  // ==================== EVENTS ====================\n  \n  static async getEvents(): Promise<Event[]> {\n    if (!this.checkSupabaseConnection()) {\n      return [];\n    }\n    const safeSupabase = supabase!;\n    const { data, error } = await safeSupabase\n      .from('events')\n      .select('*')\n      .order('featured', { ascending: false })\n      .order('event_date');\n    if (error) throw error;\n    return data.map(this.mapEventFromDB);\n  }\n\n  // TODO: Impl├⌐menter l'inscription ├á un ├⌐v├⌐nement\n  // static async registerForEvent(eventId: string, userId: string): Promise<void> {\n  //   if (!this.checkSupabaseConnection()) {\n  //     return;\n  //   }\n  //   // Fonction ├á impl├⌐menter correctement\n  //   return;\n  // }\n\n  static async incrementArticleViews(id: string): Promise<void> {\n    if (!this.checkSupabaseConnection()) {\n      return;\n    }\n    const safeSupabase = supabase!;\n    // Incr├⌐mentation manuelle (lecture + update)\n    const { data, error: fetchError } = await safeSupabase\n      .from('news_articles')\n      .select('views')\n      .eq('id', id)\n      .single();\n    if (fetchError) throw fetchError;\n    const currentViews = data?.views || 0;\n    const { error } = await safeSupabase\n      .from('news_articles')\n      .update({ views: currentViews + 1 })\n      .eq('id', id);\n    if (error) throw error;\n  }\n\n  // ==================== MAPPING FUNCTIONS ====================\n  \n  private static mapUserFromDB(data: any): User {\n    return {\n      id: data.id,\n      email: data.email,\n      name: data.name,\n      type: data.type,\n      profile: data.profile,\n      status: data.status || 'active',\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at)\n    };\n  }\n\n  private static mapExhibitorFromDB(data: any): Exhibitor {\n    return {\n      id: data.id,\n      userId: data.user_id,\n      companyName: data.company_name,\n      category: data.category,\n      sector: data.sector,\n      description: data.description,\n      logo: data.logo_url,\n      website: data.website,\n      verified: data.verified,\n      featured: data.featured,\n      contactInfo: data.contact_info,\n      products: data.products?.map(this.mapProductFromDB) || [],\n      availability: [], // ├Ç impl├⌐menter avec time_slots\n      miniSite: data.mini_site ? {\n        id: data.mini_site.id,\n        exhibitorId: data.mini_site.exhibitor_id,\n        theme: data.mini_site.theme,\n        customColors: data.mini_site.custom_colors,\n        sections: data.mini_site.sections,\n        published: data.mini_site.published,\n        views: data.mini_site.views,\n        lastUpdated: new Date(data.mini_site.last_updated)\n      } : {\n        id: '',\n        exhibitorId: data.id,\n        theme: 'modern',\n        customColors: { primary: '#1e40af', secondary: '#3b82f6', accent: '#60a5fa' },\n        sections: [],\n        published: false,\n        views: 0,\n        lastUpdated: new Date()\n      },\n      certifications: [],\n      establishedYear: undefined,\n      employeeCount: undefined,\n      revenue: undefined,\n      markets: []\n    };\n  }\n\n  private static mapProductFromDB(data: any): Product {\n    return {\n      id: data.id,\n      name: data.name,\n      description: data.description,\n      category: data.category,\n      images: data.images || [],\n      specifications: data.specifications,\n      price: data.price,\n      featured: data.featured,\n      technicalSpecs: []\n    };\n  }\n\n  private static mapAppointmentFromDB(data: any): Appointment {\n    return {\n      id: data.id,\n      exhibitorId: data.exhibitor_id,\n      visitorId: data.visitor_id,\n      timeSlotId: data.time_slot_id,\n      status: data.status,\n      message: data.message,\n      notes: data.notes,\n      rating: data.rating,\n      createdAt: new Date(data.created_at),\n      meetingType: data.meeting_type,\n      meetingLink: data.meeting_link\n    };\n  }\n\n  private static mapEventFromDB(data: any): Event {\n    return {\n      id: data.id,\n      title: data.title,\n      description: data.description,\n      type: data.type,\n      date: new Date(data.event_date),\n      startTime: data.start_time,\n      endTime: data.end_time,\n      capacity: data.capacity,\n      registered: data.registered,\n      speakers: [], // ├Ç impl├⌐menter avec une table speakers\n      category: data.category,\n      virtual: data.virtual,\n      featured: data.featured,\n      location: data.location,\n      meetingLink: data.meeting_link,\n      tags: data.tags || []\n    };\n  }\n\n\n  private static mapMessageFromDB(data: any): ChatMessage {\n    return {\n      id: data.id,\n      senderId: data.sender_id,\n      receiverId: '', // ├Ç d├⌐terminer depuis la conversation\n      content: data.content,\n      type: data.type,\n      timestamp: new Date(data.timestamp),\n      read: data.read,\n      attachments: data.attachments\n    };\n  }\n\n  // ==================== ANALYTICS ====================\n  \n  static async getAnalytics(exhibitorId: string): Promise<any> {\n    if (!this.checkSupabaseConnection()) {\n      return {\n        miniSiteViews: 0,\n        appointments: 0,\n        products: 0,\n        profileViews: 0,\n        connections: 0,\n        messages: 0\n      };\n    }\n    const safeSupabase = supabase!;\n    // R├⌐cup├⌐rer les vues du mini-site\n    const { data: miniSite } = await safeSupabase\n      .from('mini_sites')\n      .select('views')\n      .eq('exhibitor_id', exhibitorId)\n      .single();\n\n    // Compter les rendez-vous\n    const { count: appointmentsCount } = await safeSupabase\n      .from('appointments')\n      .select('*', { count: 'exact', head: true })\n      .eq('exhibitor_id', exhibitorId);\n\n    // Compter les produits\n    const { count: productsCount } = await safeSupabase\n      .from('products')\n      .select('*', { count: 'exact', head: true })\n      .eq('exhibitor_id', exhibitorId);\n\n    return {\n      miniSiteViews: miniSite?.views || 0,\n      appointments: appointmentsCount || 0,\n      products: productsCount || 0,\n      profileViews: miniSite?.views || 0,\n      connections: 0, // ├Ç impl├⌐menter\n      messages: 0 // ├Ç impl├⌐menter\n    };\n  }\n\n  // ==================== SEARCH ====================\n  \n  static async searchExhibitors(query: string, filters: any = {}): Promise<Exhibitor[]> {\n    if (!this.checkSupabaseConnection()) {\n      return [];\n    }\n    const safeSupabase = supabase!;\n    let queryBuilder = safeSupabase\n      .from('exhibitors')\n      .select(`\n        *,\n        user:users(*),\n        products(*),\n        mini_site:mini_sites(*)\n      `)\n      .eq('verified', true);\n\n    if (query) {\n      queryBuilder = queryBuilder.or(`company_name.ilike.%${query}%,description.ilike.%${query}%,sector.ilike.%${query}%`);\n    }\n\n    if (filters.category) {\n      queryBuilder = queryBuilder.eq('category', filters.category);\n    }\n\n    if (filters.sector) {\n      queryBuilder = queryBuilder.ilike('sector', `%${filters.sector}%`);\n    }\n\n    const { data, error } = await queryBuilder\n      .order('featured', { ascending: false })\n      .order('company_name');\n\n    if (error) throw error;\n    return data.map(this.mapExhibitorFromDB);\n  }\n\n  // ==================== REAL-TIME SUBSCRIPTIONS ====================\n  \n  static subscribeToMessages(conversationId: string, callback: (message: ChatMessage) => void) {\n    if (!this.checkSupabaseConnection()) {\n      return null;\n    }\n    const safeSupabase = supabase!;\n    return safeSupabase\n      .channel(`messages:${conversationId}`)\n      .on('postgres_changes', \n        { \n          event: 'INSERT', \n          schema: 'public', \n          table: 'messages',\n          filter: `conversation_id=eq.${conversationId}`\n        }, \n        (payload) => {\n          callback(this.mapMessageFromDB(payload.new));\n        }\n      )\n      .subscribe();\n  }\n\n  static subscribeToAppointments(userId: string, callback: (appointment: Appointment) => void) {\n    if (!this.checkSupabaseConnection()) {\n      return null;\n    }\n    const safeSupabase = supabase!;\n    return safeSupabase\n      .channel(`appointments:${userId}`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'appointments'\n        }, \n        (payload) => {\n          if (payload.new) {\n            callback(this.mapAppointmentFromDB(payload.new));\n          }\n        }\n      )\n      .subscribe();\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\appointmentStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":92,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exhibitorId' is defined but never used.","line":97,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { Appointment, TimeSlot } from '../types';\n\ninterface AppointmentState {\n  appointments: Appointment[];\n  timeSlots: TimeSlot[];\n  isLoading: boolean;\n  \n  // Actions\n  fetchAppointments: () => Promise<void>;\n  fetchTimeSlots: (exhibitorId: string) => Promise<void>;\n  bookAppointment: (timeSlotId: string, message?: string) => Promise<void>;\n  cancelAppointment: (appointmentId: string) => Promise<void>;\n  updateAppointmentStatus: (appointmentId: string, status: Appointment['status']) => Promise<void>;\n  createTimeSlot: (slot: Omit<TimeSlot, 'id'>) => Promise<void>;\n  updateTimeSlot: (slotId: string, updates: Partial<TimeSlot>) => Promise<void>;\n  deleteTimeSlot: (slotId: string) => Promise<void>;\n}\n\nconst mockTimeSlots: TimeSlot[] = [\n  {\n    id: '1',\n    date: new Date('2026-02-05'),\n    startTime: '09:00',\n    endTime: '09:30',\n    duration: 30,\n    type: 'in-person',\n    maxBookings: 1,\n    currentBookings: 0,\n    available: true,\n    location: 'Stand A-12'\n  },\n  {\n    id: '2',\n    date: new Date('2026-02-05'),\n    startTime: '10:00',\n    endTime: '10:30',\n    duration: 30,\n    type: 'virtual',\n    maxBookings: 1,\n    currentBookings: 1,\n    available: false\n  },\n  {\n    id: '3',\n    date: new Date('2026-02-05'),\n    startTime: '14:00',\n    endTime: '14:45',\n    duration: 45,\n    type: 'hybrid',\n    maxBookings: 2,\n    currentBookings: 1,\n    available: true,\n    location: 'Salle de r├⌐union B-5'\n  }\n];\n\nconst mockAppointments: Appointment[] = [\n  {\n    id: '1',\n    exhibitorId: '1',\n    visitorId: 'user1',\n    timeSlotId: '2',\n    status: 'confirmed',\n    message: 'Int├⌐ress├⌐ par vos solutions de gestion portuaire',\n    createdAt: new Date(Date.now() - 86400000),\n    meetingType: 'virtual',\n    meetingLink: 'https://meet.google.com/abc-defg-hij'\n  },\n  {\n    id: '2',\n    exhibitorId: '2',\n    visitorId: 'user1',\n    timeSlotId: '3',\n    status: 'pending',\n    message: 'Souhait de discuter de partenariat technologique',\n    createdAt: new Date(Date.now() - 3600000),\n    meetingType: 'hybrid'\n  }\n];\n\nexport const useAppointmentStore = create<AppointmentState>((set, get) => ({\n  appointments: [],\n  timeSlots: [],\n  isLoading: false,\n\n  fetchAppointments: async () => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      set({ appointments: mockAppointments, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  fetchTimeSlots: async (exhibitorId) => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      set({ timeSlots: mockTimeSlots, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  bookAppointment: async (timeSlotId, message) => {\n    const { appointments, timeSlots } = get();\n    \n    const newAppointment: Appointment = {\n      id: Date.now().toString(),\n      exhibitorId: '1',\n      visitorId: 'user1',\n      timeSlotId,\n      status: 'pending',\n      message,\n      createdAt: new Date(),\n      meetingType: 'in-person'\n    };\n\n    // Update time slot availability\n    const updatedTimeSlots = timeSlots.map(slot =>\n      slot.id === timeSlotId\n        ? { ...slot, currentBookings: slot.currentBookings + 1, available: slot.currentBookings + 1 < slot.maxBookings }\n        : slot\n    );\n\n    set({ \n      appointments: [newAppointment, ...appointments],\n      timeSlots: updatedTimeSlots\n    });\n  },\n\n  cancelAppointment: async (appointmentId) => {\n    const { appointments, timeSlots } = get();\n    const appointment = appointments.find(a => a.id === appointmentId);\n    \n    if (appointment) {\n      // Update appointment status\n      const updatedAppointments = appointments.map(a =>\n        a.id === appointmentId ? { ...a, status: 'cancelled' as const } : a\n      );\n\n      // Free up the time slot\n      const updatedTimeSlots = timeSlots.map(slot =>\n        slot.id === appointment.timeSlotId\n          ? { ...slot, currentBookings: Math.max(0, slot.currentBookings - 1), available: true }\n          : slot\n      );\n\n      set({ \n        appointments: updatedAppointments,\n        timeSlots: updatedTimeSlots\n      });\n    }\n  },\n\n  updateAppointmentStatus: async (appointmentId, status) => {\n    const { appointments } = get();\n    const updatedAppointments = appointments.map(a =>\n      a.id === appointmentId ? { ...a, status } : a\n    );\n    set({ appointments: updatedAppointments });\n  },\n\n  createTimeSlot: async (slot) => {\n    const { timeSlots } = get();\n    const newSlot: TimeSlot = {\n      ...slot,\n      id: Date.now().toString()\n    };\n    \n    // Simulation d'appel API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Mise ├á jour du store\n    set({ timeSlots: [newSlot, ...timeSlots] });\n    \n    // Synchronisation avec le mini-site\n    await syncWithMiniSite(newSlot);\n    \n    // Notification aux visiteurs int├⌐ress├⌐s\n    await notifyInterestedVisitors(newSlot);\n  },\n\n  syncWithMiniSite: async (slot: TimeSlot) => {\n    try {\n      // Simulation de mise ├á jour du mini-site\n      const miniSiteData = {\n        exhibitorId: 'exhibitor-1',\n        availabilityUpdated: true,\n        newSlotAdded: {\n          date: slot.date.toLocaleDateString('fr-FR'),\n          time: `${slot.startTime} - ${slot.endTime}`,\n          type: slot.type,\n          location: slot.location\n        },\n        totalAvailableSlots: get().timeSlots.filter(s => s.available).length,\n        lastSync: new Date().toISOString()\n      };\n      \n      console.log('Mini-site synchronis├⌐:', miniSiteData);\n      \n      // En production, appel API pour mettre ├á jour le mini-site\n      // await fetch(`/api/exhibitors/${exhibitorId}/minisite/availability`, {\n      //   method: 'PUT',\n      //   body: JSON.stringify(miniSiteData)\n      // });\n      \n    } catch (error) {\n      console.error('Erreur synchronisation mini-site:', error);\n    }\n  },\n  \n  notifyInterestedVisitors: async (slot: TimeSlot) => {\n    try {\n      // Simulation de notification aux visiteurs\n      const notificationData = {\n        exhibitorName: 'Port Solutions Inc.',\n        newSlot: {\n          date: slot.date.toLocaleDateString('fr-FR'),\n          time: `${slot.startTime} - ${slot.endTime}`,\n          type: slot.type\n        },\n        notifiedVisitors: 23,\n        interestedProfiles: [\n          'Marie Dubois - Maritime Consulting',\n          'Jean Martin - Port Authority',\n          'Sarah Johnson - Tech Solutions'\n        ]\n      };\n      \n      console.log('Visiteurs notifi├⌐s:', notificationData);\n      \n      // En production, envoi de notifications push/email\n      // await fetch('/api/notifications/new-slot', {\n      //   method: 'POST',\n      //   body: JSON.stringify(notificationData)\n      // });\n      \n    } catch (error) {\n      console.error('Erreur notifications visiteurs:', error);\n    }\n  },\n  updateTimeSlot: async (slotId, updates) => {\n    const { timeSlots } = get();\n    const updatedTimeSlots = timeSlots.map(slot =>\n      slot.id === slotId ? { ...slot, ...updates } : slot\n    );\n    set({ timeSlots: updatedTimeSlots });\n  },\n\n  deleteTimeSlot: async (slotId) => {\n    const { timeSlots } = get();\n    const updatedTimeSlots = timeSlots.filter(slot => slot.id !== slotId);\n    set({ timeSlots: updatedTimeSlots });\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\authStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3808,3811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3808,3811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5295,5298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5295,5298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { SupabaseService } from '../services/supabaseService';\nimport GoogleAuthService from '../services/googleAuth';\nimport { User } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  isGoogleLoading: boolean;\n  \n  // Actions\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  loginWithGoogle: () => Promise<void>;\n  logout: () => void;\n  setUser: (user: User) => void;\n  updateProfile: (profileData: any) => Promise<void>;\n}\n\n// Mock users pour la d├⌐monstration\nconst mockUsers: User[] = [\n  {\n    id: 'admin-1',\n    email: 'admin@siports.com',\n    name: 'Admin SIPORTS',\n    type: 'admin',\n    profile: {\n      firstName: 'Admin',\n      lastName: 'SIPORTS',\n      company: 'SIPORTS Organization',\n      position: 'Administrateur',\n      country: 'Morocco',\n      bio: 'Administrateur de la plateforme SIPORTS 2026',\n      interests: [],\n      objectives: []\n    },\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date()\n  },\n  {\n    id: 'exhibitor-1',\n    email: 'exposant@siports.com',\n    name: 'Sarah Johnson',\n    type: 'exhibitor',\n    profile: {\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      company: 'Port Solutions Inc.',\n      position: 'CEO',\n      country: 'Netherlands',\n      bio: 'Expert en solutions portuaires',\n      interests: ['Port Operations', 'Digital Transformation'],\n      objectives: ['Showcase innovations', 'Find partners']\n    },\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date()\n  },\n  {\n    id: 'partner-1',\n    email: 'partenaire@siports.com',\n    name: 'Ahmed El Mansouri',\n    type: 'partner',\n    profile: {\n      firstName: 'Ahmed',\n      lastName: 'El Mansouri',\n      company: 'Autorit├⌐ Portuaire Casablanca',\n      position: 'Directeur Technique',\n      country: 'Morocco',\n      bio: 'Directeur technique avec expertise portuaire',\n      interests: ['Infrastructure', 'Sustainability'],\n      objectives: ['International cooperation', 'Technology adoption']\n    },\n    createdAt: new Date('2024-01-10'),\n    updatedAt: new Date()\n  },\n  {\n    id: 'visitor-1',\n    email: 'visiteur@siports.com',\n    name: 'Marie Dubois',\n    type: 'visitor',\n    profile: {\n      firstName: 'Marie',\n      lastName: 'Dubois',\n      company: 'Maritime Consulting France',\n      position: 'Consultante Senior',\n      country: 'France',\n      bio: 'Consultante en solutions maritimes',\n      interests: ['Consulting', 'Innovation'],\n      objectives: ['Find suppliers', 'Technology scouting']\n    },\n    createdAt: new Date('2024-01-20'),\n    updatedAt: new Date()\n  }\n];\n\nconst useAuthStore = create<AuthState>((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  isGoogleLoading: false,\n  \n  login: async (email: string, password: string) => {\n    set({ isLoading: true });\n    \n    try {\n      // Pour la d├⌐mo, v├⌐rifier les comptes de test\n      const mockUser = mockUsers.find(u => u.email === email);\n      \n      if (mockUser && password === 'demo123') {\n        set({ \n          user: mockUser, \n          token: 'mock-token', \n          isAuthenticated: true,\n          isLoading: false \n        });\n        return;\n      }\n      \n      // Essayer de r├⌐cup├⌐rer l'utilisateur depuis Supabase\n      const user = await SupabaseService.getUserByEmail(email);\n      \n      if (user) {\n        set({ \n          user, \n          token: 'supabase-token', \n          isAuthenticated: true,\n          isLoading: false \n        });\n      } else {\n        throw new Error('Email ou mot de passe incorrect');\n      }\n    } catch (error) {\n      set({ isLoading: false });\n      throw error;\n    }\n  },\n\n  register: async (userData: any) => {\n    set({ isLoading: true });\n    \n    try {\n      const newUser = await SupabaseService.createUser({\n        email: userData.email,\n        name: `${userData.firstName} ${userData.lastName}`,\n        type: userData.accountType || 'visitor',\n        profile: {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          company: userData.companyName,\n          position: userData.position,\n          country: userData.country,\n          phone: userData.phone,\n          linkedin: userData.linkedin,\n          website: userData.website,\n          bio: userData.description,\n          interests: [],\n          objectives: userData.objectives || []\n        }\n      });\n      \n      set({ isLoading: false });\n      \n      // Ne pas connecter automatiquement, laisser l'utilisateur se connecter\n      return newUser;\n    } catch (error) {\n      set({ isLoading: false });\n      throw error;\n    }\n  },\n\n  loginWithGoogle: async () => {\n    set({ isGoogleLoading: true });\n    \n    try {\n      const user = await GoogleAuthService.signInWithGoogle();\n      set({ \n        user, \n        token: 'google-token', \n        isAuthenticated: true,\n        isGoogleLoading: false \n      });\n    } catch (error) {\n      set({ isGoogleLoading: false });\n      throw error;\n    }\n  },\n  \n  logout: () => set({ \n    user: null,\n    token: null,\n    isAuthenticated: false\n  }),\n  \n  setUser: (user) => set({ \n    user\n  }),\n\n  updateProfile: async (profileData: any) => {\n    const { user } = get();\n    if (!user) throw new Error('Utilisateur non connect├⌐');\n    \n    set({ isLoading: true });\n    \n    try {\n      const updatedUser = await SupabaseService.updateUser(user.id, {\n        ...user,\n        profile: { ...user.profile, ...profileData }\n      });\n      \n      set({ user: updatedUser, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n      throw error;\n    }\n  }\n}));\n\nexport { useAuthStore };\nexport default useAuthStore;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\chatStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":141,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { ChatMessage, ChatConversation, ChatBot } from '../types';\n\ninterface ChatState {\n  conversations: ChatConversation[];\n  activeConversation: string | null;\n  messages: Record<string, ChatMessage[]>;\n  isLoading: boolean;\n  chatBot: ChatBot;\n  onlineUsers: string[];\n  \n  // Actions\n  fetchConversations: () => Promise<void>;\n  setActiveConversation: (conversationId: string) => void;\n  sendMessage: (conversationId: string, content: string, type?: 'text' | 'file') => Promise<void>;\n  markAsRead: (conversationId: string) => void;\n  startConversation: (userId: string) => Promise<string>;\n  sendBotMessage: (message: string) => Promise<void>;\n  setOnlineUsers: (users: string[]) => void;\n}\n\nconst mockChatBot: ChatBot = {\n  id: 'siports-bot',\n  name: 'Assistant SIPORTS',\n  avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100',\n  status: 'online',\n  capabilities: [\n    'Aide ├á la navigation',\n    'Recommandations de contacts',\n    'Informations sur les exposants',\n    'Planification de rendez-vous',\n    'Support technique'\n  ]\n};\n\nconst mockConversations: ChatConversation[] = [\n  {\n    id: '1',\n    participants: ['user1', 'user2'],\n    lastMessage: {\n      id: '1',\n      senderId: 'user2',\n      receiverId: 'user1',\n      content: 'Bonjour, je suis int├⌐ress├⌐ par vos solutions portuaires.',\n      type: 'text',\n      timestamp: new Date(Date.now() - 3600000),\n      read: false\n    },\n    unreadCount: 1,\n    createdAt: new Date(Date.now() - 86400000),\n    updatedAt: new Date(Date.now() - 3600000)\n  },\n  {\n    id: '2',\n    participants: ['user1', 'siports-bot'],\n    lastMessage: {\n      id: '2',\n      senderId: 'siports-bot',\n      receiverId: 'user1',\n      content: 'Comment puis-je vous aider aujourd\\'hui ?',\n      type: 'text',\n      timestamp: new Date(Date.now() - 7200000),\n      read: true\n    },\n    unreadCount: 0,\n    createdAt: new Date(Date.now() - 172800000),\n    updatedAt: new Date(Date.now() - 7200000)\n  }\n];\n\nconst mockMessages: Record<string, ChatMessage[]> = {\n  '1': [\n    {\n      id: '1',\n      senderId: 'user2',\n      receiverId: 'user1',\n      content: 'Bonjour, je suis int├⌐ress├⌐ par vos solutions portuaires.',\n      type: 'text',\n      timestamp: new Date(Date.now() - 3600000),\n      read: false\n    },\n    {\n      id: '2',\n      senderId: 'user1',\n      receiverId: 'user2',\n      content: 'Bonjour ! Je serais ravi de vous pr├⌐senter nos solutions. Souhaitez-vous planifier un rendez-vous ?',\n      type: 'text',\n      timestamp: new Date(Date.now() - 3000000),\n      read: true\n    }\n  ],\n  '2': [\n    {\n      id: '3',\n      senderId: 'siports-bot',\n      receiverId: 'user1',\n      content: 'Bonjour ! Je suis l\\'assistant SIPORTS. Comment puis-je vous aider aujourd\\'hui ?',\n      type: 'text',\n      timestamp: new Date(Date.now() - 7200000),\n      read: true\n    },\n    {\n      id: '4',\n      senderId: 'user1',\n      receiverId: 'siports-bot',\n      content: 'Je cherche des exposants sp├⌐cialis├⌐s dans les grues portuaires.',\n      type: 'text',\n      timestamp: new Date(Date.now() - 7000000),\n      read: true\n    },\n    {\n      id: '5',\n      senderId: 'siports-bot',\n      receiverId: 'user1',\n      content: 'Parfait ! J\\'ai trouv├⌐ 3 exposants sp├⌐cialis├⌐s dans les ├⌐quipements de manutention portuaire. Souhaitez-vous que je vous les pr├⌐sente ?',\n      type: 'text',\n      timestamp: new Date(Date.now() - 6900000),\n      read: true\n    }\n  ]\n};\n\nexport const useChatStore = create<ChatState>((set, get) => ({\n  conversations: [],\n  activeConversation: null,\n  messages: {},\n  isLoading: false,\n  chatBot: mockChatBot,\n  onlineUsers: ['user2', 'siports-bot'],\n\n  fetchConversations: async () => {\n    set({ isLoading: true });\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      set({ \n        conversations: mockConversations,\n        messages: mockMessages,\n        isLoading: false \n      });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  setActiveConversation: (conversationId) => {\n    set({ activeConversation: conversationId });\n    // Mark messages as read\n    get().markAsRead(conversationId);\n  },\n\n  sendMessage: async (conversationId, content, type = 'text') => {\n    const { messages, conversations } = get();\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      senderId: 'user1', // Current user\n      receiverId: conversationId === '2' ? 'siports-bot' : 'user2',\n      content,\n      type,\n      timestamp: new Date(),\n      read: false\n    };\n\n    // Add message to conversation\n    const updatedMessages = {\n      ...messages,\n      [conversationId]: [...(messages[conversationId] || []), newMessage]\n    };\n\n    // Update conversation last message\n    const updatedConversations = conversations.map(conv => \n      conv.id === conversationId \n        ? { ...conv, lastMessage: newMessage, updatedAt: new Date() }\n        : conv\n    );\n\n    set({ \n      messages: updatedMessages,\n      conversations: updatedConversations\n    });\n\n    // Simulate bot response if talking to bot\n    if (conversationId === '2') {\n      setTimeout(() => {\n        get().sendBotMessage('Merci pour votre message. Je traite votre demande...');\n      }, 1000);\n    }\n  },\n\n  markAsRead: (conversationId) => {\n    const { conversations } = get();\n    const updatedConversations = conversations.map(conv =>\n      conv.id === conversationId\n        ? { ...conv, unreadCount: 0 }\n        : conv\n    );\n    set({ conversations: updatedConversations });\n  },\n\n  startConversation: async (userId) => {\n    const newConversationId = Date.now().toString();\n    const newConversation: ChatConversation = {\n      id: newConversationId,\n      participants: ['user1', userId],\n      unreadCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    const { conversations } = get();\n    set({ \n      conversations: [newConversation, ...conversations],\n      activeConversation: newConversationId\n    });\n\n    return newConversationId;\n  },\n\n  sendBotMessage: async (message) => {\n    const { messages, conversations, activeConversation } = get();\n    if (!activeConversation) return;\n\n    const botMessage: ChatMessage = {\n      id: Date.now().toString(),\n      senderId: 'siports-bot',\n      receiverId: 'user1',\n      content: message,\n      type: 'text',\n      timestamp: new Date(),\n      read: false\n    };\n\n    const updatedMessages = {\n      ...messages,\n      [activeConversation]: [...(messages[activeConversation] || []), botMessage]\n    };\n\n    const updatedConversations = conversations.map(conv => \n      conv.id === activeConversation \n        ? { ...conv, lastMessage: botMessage, updatedAt: new Date(), unreadCount: conv.unreadCount + 1 }\n        : conv\n    );\n\n    set({ \n      messages: updatedMessages,\n      conversations: updatedConversations\n    });\n  },\n\n  setOnlineUsers: (users) => {\n    set({ onlineUsers: users });\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\chatbotStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\dashboardStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":80,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { Dashboard, DashboardStats, Activity } from '../types';\n\ninterface DashboardState {\n  dashboard: Dashboard | null;\n  isLoading: boolean;\n  \n  // Actions\n  fetchDashboard: () => Promise<void>;\n  updateStats: (stats: Partial<DashboardStats>) => void;\n}\n\nconst mockStats: DashboardStats = {\n  profileViews: 1247,\n  connections: 24,\n  appointments: 8,\n  messages: 15,\n  catalogDownloads: 89,\n  miniSiteViews: 2156\n};\n\nconst mockActivities: Activity[] = [\n  {\n    id: '1',\n    type: 'profile_view',\n    description: 'Sarah Johnson a consult├⌐ votre profil',\n    timestamp: new Date(Date.now() - 3600000),\n    userId: 'user2',\n    userName: 'Sarah Johnson'\n  },\n  {\n    id: '2',\n    type: 'message',\n    description: 'Nouveau message de Ahmed El Mansouri',\n    timestamp: new Date(Date.now() - 7200000),\n    userId: 'user3',\n    userName: 'Ahmed El Mansouri'\n  },\n  {\n    id: '3',\n    type: 'appointment',\n    description: 'Rendez-vous confirm├⌐ avec Maritime Tech Solutions',\n    timestamp: new Date(Date.now() - 10800000),\n    userId: 'user4',\n    userName: 'Maritime Tech Solutions'\n  },\n  {\n    id: '4',\n    type: 'download',\n    description: 'Votre catalogue a ├⌐t├⌐ t├⌐l├⌐charg├⌐ 5 fois aujourd\\'hui',\n    timestamp: new Date(Date.now() - 14400000)\n  },\n  {\n    id: '5',\n    type: 'connection',\n    description: 'Nouvelle connexion avec Dr. Maria Santos',\n    timestamp: new Date(Date.now() - 18000000),\n    userId: 'user5',\n    userName: 'Dr. Maria Santos'\n  }\n];\n\nexport const useDashboardStore = create<DashboardState>((set, get) => ({\n  dashboard: null,\n  isLoading: false,\n\n  fetchDashboard: async () => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const dashboard: Dashboard = {\n        stats: mockStats,\n        recentActivity: mockActivities,\n        upcomingEvents: [], // Will be populated from eventStore\n        recommendations: [] // Will be populated from networkingStore\n      };\n\n      set({ dashboard, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  updateStats: (newStats) => {\n    const { dashboard } = get();\n    if (dashboard) {\n      set({\n        dashboard: {\n          ...dashboard,\n          stats: { ...dashboard.stats, ...newStats }\n        }\n      });\n    }\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\eventStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":144,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { Event, Speaker } from '../types';\n\ninterface EventState {\n  events: Event[];\n  featuredEvents: Event[];\n  registeredEvents: string[];\n  isLoading: boolean;\n  \n  // Actions\n  fetchEvents: () => Promise<void>;\n  registerForEvent: (eventId: string) => Promise<void>;\n  unregisterFromEvent: (eventId: string) => Promise<void>;\n  getEventsByCategory: (category: string) => Event[];\n  getUpcomingEvents: () => Event[];\n}\n\nconst mockSpeakers: Speaker[] = [\n  {\n    id: '1',\n    name: 'Dr. Sarah Johnson',\n    title: 'Directrice Innovation',\n    company: 'Global Port Solutions',\n    bio: 'Experte en digitalisation portuaire avec plus de 15 ans d\\'exp├⌐rience',\n    avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100',\n    linkedin: 'https://linkedin.com/in/sarahjohnson',\n    expertise: ['Digital Transformation', 'Port Operations', 'IoT']\n  },\n  {\n    id: '2',\n    name: 'Ahmed El Mansouri',\n    title: 'Directeur Technique',\n    company: 'Autorit├⌐ Portuaire de Casablanca',\n    bio: 'Sp├⌐cialiste en infrastructure portuaire et d├⌐veloppement durable',\n    avatar: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=100',\n    expertise: ['Infrastructure', 'Sustainability', 'Port Management']\n  }\n];\n\nconst mockEvents: Event[] = [\n  {\n    id: '1',\n    title: 'Digitalisation des Ports : Enjeux et Opportunit├⌐s',\n    description: 'Table ronde sur les technologies ├⌐mergentes dans le secteur portuaire et leur impact sur l\\'efficacit├⌐ op├⌐rationnelle.',\n    type: 'roundtable',\n    date: new Date('2026-02-05T14:00:00'),\n    startTime: '14:00',\n    endTime: '15:30',\n    capacity: 50,\n    registered: 32,\n    speakers: [mockSpeakers[0]],\n    category: 'Digital Transformation',\n    virtual: false,\n    featured: true,\n    location: 'Salle de conf├⌐rence A',\n    tags: ['digitalisation', 'innovation', 'technologie']\n  },\n  {\n    id: '2',\n    title: 'Speed Networking : Op├⌐rateurs Portuaires',\n    description: 'Session de r├⌐seautage rapide d├⌐di├⌐e aux op├⌐rateurs et gestionnaires de terminaux portuaires.',\n    type: 'networking',\n    date: new Date('2026-02-06T10:30:00'),\n    startTime: '10:30',\n    endTime: '12:00',\n    capacity: 80,\n    registered: 65,\n    speakers: [],\n    category: 'Networking',\n    virtual: false,\n    featured: true,\n    location: 'Espace networking B',\n    tags: ['networking', 'op├⌐rateurs', 'partenariats']\n  },\n  {\n    id: '3',\n    title: 'Ports Durables : Transition ├ënerg├⌐tique',\n    description: 'Webinaire sur les strat├⌐gies de transition ├⌐nerg├⌐tique dans les ports et les solutions innovantes.',\n    type: 'webinar',\n    date: new Date('2026-02-07T16:00:00'),\n    startTime: '16:00',\n    endTime: '17:00',\n    capacity: 200,\n    registered: 145,\n    speakers: [mockSpeakers[1]],\n    category: 'Sustainability',\n    virtual: true,\n    featured: false,\n    meetingLink: 'https://meet.google.com/sustainability-ports',\n    tags: ['durabilit├⌐', '├⌐nergie', 'environnement']\n  },\n  {\n    id: '4',\n    title: 'Atelier : Gestion des Donn├⌐es Portuaires',\n    description: 'Atelier pratique sur l\\'utilisation des donn├⌐es pour optimiser les op├⌐rations portuaires.',\n    type: 'workshop',\n    date: new Date('2026-02-06T09:00:00'),\n    startTime: '09:00',\n    endTime: '11:00',\n    capacity: 25,\n    registered: 18,\n    speakers: [mockSpeakers[0]],\n    category: 'Data Management',\n    virtual: false,\n    featured: false,\n    location: 'Salle d\\'atelier C',\n    tags: ['donn├⌐es', 'analytics', 'optimisation']\n  },\n  {\n    id: '5',\n    title: 'Conf├⌐rence : L\\'Avenir du Transport Maritime',\n    description: 'Conf├⌐rence magistrale sur les tendances futures du transport maritime et l\\'impact sur les ports.',\n    type: 'conference',\n    date: new Date('2026-02-05T09:00:00'),\n    startTime: '09:00',\n    endTime: '10:00',\n    capacity: 300,\n    registered: 280,\n    speakers: [mockSpeakers[0], mockSpeakers[1]],\n    category: 'Maritime Transport',\n    virtual: false,\n    featured: true,\n    location: 'Auditorium principal',\n    tags: ['transport', 'maritime', 'avenir']\n  }\n];\n\nexport const useEventStore = create<EventState>((set, get) => ({\n  events: [],\n  featuredEvents: [],\n  registeredEvents: [],\n  isLoading: false,\n\n  fetchEvents: async () => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const featuredEvents = mockEvents.filter(event => event.featured);\n      set({ \n        events: mockEvents,\n        featuredEvents,\n        isLoading: false \n      });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  registerForEvent: async (eventId) => {\n    const { registeredEvents, events } = get();\n    if (!registeredEvents.includes(eventId)) {\n      const updatedEvents = events.map(event =>\n        event.id === eventId\n          ? { ...event, registered: event.registered + 1 }\n          : event\n      );\n      \n      set({ \n        registeredEvents: [...registeredEvents, eventId],\n        events: updatedEvents\n      });\n    }\n  },\n\n  unregisterFromEvent: async (eventId) => {\n    const { registeredEvents, events } = get();\n    const updatedRegistered = registeredEvents.filter(id => id !== eventId);\n    const updatedEvents = events.map(event =>\n      event.id === eventId\n        ? { ...event, registered: Math.max(0, event.registered - 1) }\n        : event\n    );\n    \n    set({ \n      registeredEvents: updatedRegistered,\n      events: updatedEvents\n    });\n  },\n\n  getEventsByCategory: (category) => {\n    const { events } = get();\n    return events.filter(event => event.category === category);\n  },\n\n  getUpcomingEvents: () => {\n    const { events } = get();\n    const now = new Date();\n    return events\n      .filter(event => event.date > now)\n      .sort((a, b) => a.date.getTime() - b.date.getTime())\n      .slice(0, 5);\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\exhibitorStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Product' is defined but never used.","line":2,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":184,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":21},{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":209,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":209,"endColumn":17,"fix":{"range":[6251,6805],"text":"const filtered = exhibitors.filter(exhibitor => {\n      const matchesCategory = !filters.category || exhibitor.category === filters.category;\n      const matchesSector = !filters.sector || exhibitor.sector.toLowerCase().includes(filters.sector.toLowerCase());\n      const matchesSearch = !filters.search || \n        exhibitor.companyName.toLowerCase().includes(filters.search.toLowerCase()) ||\n        exhibitor.description.toLowerCase().includes(filters.search.toLowerCase());\n      \n      return matchesCategory && matchesSector && matchesSearch;\n    });"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { Exhibitor, Product, TimeSlot } from '../types';\nimport { SupabaseService } from '../services/supabaseService';\n\ninterface ExhibitorState {\n  exhibitors: Exhibitor[];\n  filteredExhibitors: Exhibitor[];\n  selectedExhibitor: Exhibitor | null;\n  filters: {\n    category: string;\n    sector: string;\n    country: string;\n    search: string;\n  };\n  isLoading: boolean;\n  fetchExhibitors: () => Promise<void>;\n  setFilters: (filters: Partial<ExhibitorState['filters']>) => void;\n  selectExhibitor: (id: string) => void;\n  updateAvailability: (exhibitorId: string, slots: TimeSlot[]) => void;\n}\n\n// Mock data\nconst mockExhibitors: Exhibitor[] = [\n  {\n    id: '1',\n    userId: '1',\n    companyName: 'Port Solutions Inc.',\n    category: 'port-operations',\n    sector: 'Port Management',\n    description: 'Leading provider of integrated port management solutions, specializing in digital transformation and operational efficiency.',\n    logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://portsolutions.com',\n    products: [\n      {\n        id: '1',\n        name: 'SmartPort Management System',\n        description: 'Comprehensive port management platform with real-time analytics',\n        category: 'Software',\n        images: ['https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=400'],\n        specifications: 'Cloud-based, API integration, Multi-language support',\n        featured: true\n      }\n    ],\n    availability: [],\n    miniSite: {\n      id: '1',\n      exhibitorId: '1',\n      theme: 'modern',\n      customColors: {\n        primary: '#1e40af',\n        secondary: '#3b82f6',\n        accent: '#60a5fa'\n      },\n      sections: [],\n      published: true,\n      views: 1250\n    },\n    verified: true,\n    featured: true\n  },\n  {\n    id: '2',\n    userId: '2',\n    companyName: 'Maritime Tech Solutions',\n    category: 'port-industry',\n    sector: 'Equipment Manufacturing',\n    description: 'Innovative manufacturer of port equipment and automation systems for modern maritime facilities.',\n    logo: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://maritimetech.com',\n    products: [\n      {\n        id: '2',\n        name: 'Automated Crane System',\n        description: 'Next-generation automated container handling cranes',\n        category: 'Equipment',\n        images: ['https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=400'],\n        specifications: 'Load capacity: 65 tons, Reach: 22 containers, Automation level: Level 4',\n        featured: true\n      }\n    ],\n    availability: [],\n    miniSite: {\n      id: '2',\n      exhibitorId: '2',\n      theme: 'industrial',\n      customColors: {\n        primary: '#dc2626',\n        secondary: '#ef4444',\n        accent: '#f87171'\n      },\n      sections: [],\n      published: true,\n      views: 890\n    },\n    verified: true,\n    featured: false\n  },\n  {\n    id: '3',\n    userId: '3',\n    companyName: 'Global Port Authority',\n    category: 'institutional',\n    sector: 'Government',\n    description: 'International organization promoting sustainable port development and maritime cooperation.',\n    logo: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://globalportauthority.org',\n    products: [],\n    availability: [],\n    miniSite: {\n      id: '3',\n      exhibitorId: '3',\n      theme: 'official',\n      customColors: {\n        primary: '#059669',\n        secondary: '#10b981',\n        accent: '#34d399'\n      },\n      sections: [],\n      published: true,\n      views: 2100\n    },\n    verified: true,\n    featured: true\n  }\n  ,\n  {\n    id: '4',\n    userId: '4',\n    companyName: 'EcoPort Technologies',\n    category: 'port-operations',\n    sector: 'Green Technology',\n    description: 'Pionnier des solutions portuaires durables et des technologies vertes pour la transition ├⌐nerg├⌐tique des ports.',\n    logo: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n    website: 'https://ecoport-tech.com',\n    products: [\n      {\n        id: '4',\n        name: 'Green Port Energy System',\n        description: 'Syst├¿me ├⌐nerg├⌐tique durable pour ports avec panneaux solaires et ├⌐oliennes',\n        category: 'Green Technology',\n        images: ['https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400'],\n        specifications: 'Capacit├⌐: 50MW, R├⌐duction CO2: 80%, Autonomie ├⌐nerg├⌐tique: 95%',\n        featured: true\n      }\n    ],\n    availability: [],\n    miniSite: {\n      id: '4',\n      exhibitorId: '4',\n      theme: 'eco',\n      customColors: {\n        primary: '#059669',\n        secondary: '#10b981',\n        accent: '#34d399'\n      },\n      sections: [],\n      published: true,\n      views: 1680\n    },\n    verified: true,\n    featured: true\n  }\n];\n\nexport const useExhibitorStore = create<ExhibitorState>((set, get) => ({\n  exhibitors: [],\n  filteredExhibitors: [],\n  selectedExhibitor: null,\n  filters: {\n    category: '',\n    sector: '',\n    country: '',\n    search: ''\n  },\n  isLoading: false,\n\n  fetchExhibitors: async () => {\n    set({ isLoading: true });\n    try {\n      // Essayer de r├⌐cup├⌐rer les exposants depuis Supabase, sinon utiliser les donn├⌐es mock\n      let exhibitors;\n      try {\n        exhibitors = await SupabaseService.getExhibitors();\n      } catch (error) {\n        console.warn('Supabase non disponible, utilisation des donn├⌐es de d├⌐monstration');\n        exhibitors = mockExhibitors;\n      }\n      \n      set({ \n        exhibitors, \n        filteredExhibitors: exhibitors,\n        isLoading: false \n      });\n    } catch (error) {\n      console.error('Erreur chargement exposants:', error);\n      // En cas d'erreur, utiliser les donn├⌐es mock\n      set({ \n        exhibitors: mockExhibitors, \n        filteredExhibitors: mockExhibitors,\n        isLoading: false \n      });\n    }\n  },\n\n  setFilters: (newFilters) => {\n    const { exhibitors } = get();\n    const filters = { ...get().filters, ...newFilters };\n    \n    let filtered = exhibitors.filter(exhibitor => {\n      const matchesCategory = !filters.category || exhibitor.category === filters.category;\n      const matchesSector = !filters.sector || exhibitor.sector.toLowerCase().includes(filters.sector.toLowerCase());\n      const matchesSearch = !filters.search || \n        exhibitor.companyName.toLowerCase().includes(filters.search.toLowerCase()) ||\n        exhibitor.description.toLowerCase().includes(filters.search.toLowerCase());\n      \n      return matchesCategory && matchesSector && matchesSearch;\n    });\n\n    set({ filters, filteredExhibitors: filtered });\n  },\n\n  selectExhibitor: (id) => {\n    const { exhibitors } = get();\n    const exhibitor = exhibitors.find(e => e.id === id) || null;\n    console.log('Selecting exhibitor with ID:', id, 'Found:', exhibitor);\n    set({ selectedExhibitor: exhibitor });\n  },\n\n  updateAvailability: (exhibitorId, slots) => {\n    const { exhibitors } = get();\n    const updatedExhibitors = exhibitors.map(exhibitor =>\n      exhibitor.id === exhibitorId\n        ? { ...exhibitor, availability: slots }\n        : exhibitor\n    );\n    set({ exhibitors: updatedExhibitors });\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\languageStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\networkingStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NetworkingRecommendation' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1879,1882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1879,1882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1947,1950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1947,1950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":259,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":317,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":343,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":343,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":348,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":348,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'criteria' is defined but never used.","line":378,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":383,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":440,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17360,17363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17360,17363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { User, NetworkingRecommendation } from '../types';\n\ninterface NetworkingProfile extends User {\n  matchingCriteria: {\n    sectors: string[];\n    productTypes: string[];\n    companySize: string[];\n    geographicRegions: string[];\n    collaborationObjectives: string[];\n    thematicInterests: string[];\n  };\n  aiScore: {\n    profileCompleteness: number;\n    engagementLevel: number;\n    matchingPotential: number;\n  };\n  behaviorData: {\n    profileViews: number;\n    messagesExchanged: number;\n    appointmentsScheduled: number;\n    connectionsAccepted: number;\n    lastActivity: Date;\n  };\n}\n\ninterface MatchingResult {\n  user: NetworkingProfile;\n  score: number;\n  reasons: string[];\n  category: string;\n  mutualConnections: number;\n  compatibilityFactors: {\n    sectorAlignment: number;\n    objectiveAlignment: number;\n    geographicRelevance: number;\n    experienceLevel: number;\n    collaborationPotential: number;\n  };\n}\n\ninterface NetworkingState {\n  profiles: NetworkingProfile[];\n  recommendations: MatchingResult[];\n  searchResults: NetworkingProfile[];\n  favorites: string[];\n  connections: string[];\n  pendingRequests: string[];\n  sentRequests: string[];\n  isLoading: boolean;\n  searchFilters: {\n    sectors: string[];\n    regions: string[];\n    companySize: string[];\n    objectives: string[];\n    keywords: string;\n  };\n  \n  // Actions\n  fetchProfiles: () => Promise<void>;\n  generateRecommendations: (userId: string) => Promise<void>;\n  searchProfiles: (criteria: any) => Promise<void>;\n  sendConnectionRequest: (userId: string, message?: string) => Promise<void>;\n  acceptConnectionRequest: (requestId: string) => Promise<void>;\n  rejectConnectionRequest: (requestId: string) => Promise<void>;\n  addToFavorites: (userId: string) => void;\n  removeFromFavorites: (userId: string) => void;\n  updateMatchingCriteria: (criteria: any) => Promise<void>;\n  getAIInsights: (userId: string) => Promise<any>;\n}\n\n// Mock data for networking profiles\nconst mockProfiles: NetworkingProfile[] = [\n  {\n    id: '1',\n    email: 'sarah.johnson@globalports.com',\n    name: 'Sarah Johnson',\n    type: 'exhibitor',\n    profile: {\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n      company: 'Global Port Solutions',\n      position: 'CEO & Founder',\n      country: 'Netherlands',\n      phone: '+31 20 123 4567',\n      linkedin: 'https://linkedin.com/in/sarahjohnson',\n      website: 'https://globalportsolutions.com',\n      bio: 'Experte en transformation digitale portuaire avec 15+ ann├⌐es d\\'exp├⌐rience. Sp├⌐cialis├⌐e dans l\\'optimisation des op├⌐rations portuaires et l\\'impl├⌐mentation de solutions IoT.',\n      interests: ['Digital Transformation', 'Port Operations', 'IoT Solutions', 'Sustainability'],\n      objectives: ['Find technology partners', 'Expand to African markets', 'Showcase innovations'],\n      companyDescription: 'Leader mondial des solutions de gestion portuaire intelligente, sp├⌐cialis├⌐ dans la transformation digitale des infrastructures maritimes.',\n      sectors: ['Port Management', 'Digital Solutions', 'Maritime Technology'],\n      products: ['SmartPort Platform', 'IoT Sensors', 'Analytics Dashboard'],\n      videos: ['https://example.com/demo-video'],\n      images: ['https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg'],\n      participationObjectives: ['Technology partnerships', 'Market expansion', 'Innovation showcase'],\n      thematicInterests: ['Digital Transformation', 'Sustainability', 'Automation'],\n      companySize: '100-500',\n      geographicLocation: 'Europe',\n      collaborationTypes: ['Technology Transfer', 'Joint Ventures', 'Distribution'],\n      expertise: ['Port Digitalization', 'IoT Implementation', 'Data Analytics']\n    },\n    matchingCriteria: {\n      sectors: ['Port Operations', 'Technology', 'Logistics'],\n      productTypes: ['Software', 'IoT', 'Analytics'],\n      companySize: ['50-200', '200-1000'],\n      geographicRegions: ['Europe', 'Africa', 'Middle East'],\n      collaborationObjectives: ['Technology Transfer', 'Market Expansion'],\n      thematicInterests: ['Digital Transformation', 'Sustainability']\n    },\n    aiScore: {\n      profileCompleteness: 95,\n      engagementLevel: 88,\n      matchingPotential: 92\n    },\n    behaviorData: {\n      profileViews: 1247,\n      messagesExchanged: 89,\n      appointmentsScheduled: 23,\n      connectionsAccepted: 45,\n      lastActivity: new Date(Date.now() - 3600000)\n    },\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date()\n  },\n  {\n    id: '2',\n    email: 'ahmed.mansouri@casaport.ma',\n    name: 'Ahmed El Mansouri',\n    type: 'partner',\n    profile: {\n      firstName: 'Ahmed',\n      lastName: 'El Mansouri',\n      avatar: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n      company: 'Autorit├⌐ Portuaire de Casablanca',\n      position: 'Directeur Technique',\n      country: 'Morocco',\n      phone: '+212 522 123 456',\n      linkedin: 'https://linkedin.com/in/ahmedelmansouri',\n      website: 'https://portcasablanca.ma',\n      bio: 'Directeur technique avec 20+ ans d\\'exp├⌐rience dans le d├⌐veloppement d\\'infrastructures portuaires. Expert en modernisation et durabilit├⌐ des ports.',\n      interests: ['Infrastructure Development', 'Sustainability', 'Port Modernization', 'Government Relations'],\n      objectives: ['Infrastructure partnerships', 'Technology adoption', 'International cooperation'],\n      companyDescription: 'Premier port du Maroc et hub strat├⌐gique pour l\\'Afrique de l\\'Ouest, leader en modernisation portuaire et d├⌐veloppement durable.',\n      sectors: ['Port Authority', 'Infrastructure', 'Government'],\n      products: ['Port Services', 'Infrastructure Development', 'Consulting'],\n      videos: [],\n      images: ['https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg'],\n      participationObjectives: ['International cooperation', 'Technology adoption', 'Best practices sharing'],\n      thematicInterests: ['Infrastructure', 'Sustainability', 'Modernization'],\n      companySize: '1000+',\n      geographicLocation: 'Africa',\n      collaborationTypes: ['Public-Private Partnership', 'Technology Transfer', 'Consulting'],\n      expertise: ['Port Infrastructure', 'Project Management', 'Regulatory Affairs']\n    },\n    matchingCriteria: {\n      sectors: ['Infrastructure', 'Technology', 'Consulting'],\n      productTypes: ['Infrastructure', 'Technology Solutions', 'Services'],\n      companySize: ['200-1000', '1000+'],\n      geographicRegions: ['Africa', 'Europe', 'Middle East'],\n      collaborationObjectives: ['Infrastructure Development', 'Technology Transfer'],\n      thematicInterests: ['Infrastructure', 'Sustainability']\n    },\n    aiScore: {\n      profileCompleteness: 88,\n      engagementLevel: 92,\n      matchingPotential: 85\n    },\n    behaviorData: {\n      profileViews: 892,\n      messagesExchanged: 67,\n      appointmentsScheduled: 18,\n      connectionsAccepted: 32,\n      lastActivity: new Date(Date.now() - 7200000)\n    },\n    createdAt: new Date('2024-01-10'),\n    updatedAt: new Date()\n  },\n  {\n    id: '3',\n    email: 'maria.santos@maritimeuni.es',\n    name: 'Dr. Maria Santos',\n    type: 'visitor',\n    profile: {\n      firstName: 'Maria',\n      lastName: 'Santos',\n      avatar: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n      company: 'Maritime University of Barcelona',\n      position: 'Research Director',\n      country: 'Spain',\n      phone: '+34 93 123 4567',\n      linkedin: 'https://linkedin.com/in/mariasantos',\n      website: 'https://maritimeuni.es',\n      bio: 'Directrice de recherche sp├⌐cialis├⌐e en innovation maritime et d├⌐veloppement durable. 12 ans d\\'exp├⌐rience en recherche appliqu├⌐e et partenariats industriels.',\n      interests: ['Maritime Research', 'Innovation', 'Sustainability', 'Academic Partnerships'],\n      objectives: ['Research collaboration', 'Industry partnerships', 'Funding opportunities'],\n      companyDescription: 'Universit├⌐ maritime de r├⌐f├⌐rence en Europe, sp├⌐cialis├⌐e dans la recherche appliqu├⌐e et l\\'innovation pour le secteur portuaire.',\n      sectors: ['Education', 'Research', 'Innovation'],\n      products: ['Research Programs', 'Training Courses', 'Consulting'],\n      videos: [],\n      images: ['https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg'],\n      visitObjectives: ['Research partnerships', 'Technology scouting', 'Student opportunities'],\n      competencies: ['Maritime Research', 'Innovation Management', 'Academic Partnerships'],\n      participationObjectives: ['Research collaboration', 'Industry partnerships', 'Knowledge transfer'],\n      thematicInterests: ['Innovation', 'Sustainability', 'Education'],\n      companySize: '200-500',\n      geographicLocation: 'Europe',\n      collaborationTypes: ['Research Partnership', 'Knowledge Transfer', 'Training'],\n      expertise: ['Maritime Innovation', 'Sustainability Research', 'Technology Transfer']\n    },\n    matchingCriteria: {\n      sectors: ['Research', 'Innovation', 'Technology'],\n      productTypes: ['Research', 'Training', 'Consulting'],\n      companySize: ['50-200', '200-1000'],\n      geographicRegions: ['Europe', 'Global'],\n      collaborationObjectives: ['Research Partnership', 'Knowledge Transfer'],\n      thematicInterests: ['Innovation', 'Sustainability', 'Education']\n    },\n    aiScore: {\n      profileCompleteness: 82,\n      engagementLevel: 76,\n      matchingPotential: 89\n    },\n    behaviorData: {\n      profileViews: 456,\n      messagesExchanged: 34,\n      appointmentsScheduled: 12,\n      connectionsAccepted: 28,\n      lastActivity: new Date(Date.now() - 14400000)\n    },\n    createdAt: new Date('2024-01-08'),\n    updatedAt: new Date()\n  }\n];\n\nexport const useNetworkingStore = create<NetworkingState>((set, get) => ({\n  profiles: [],\n  recommendations: [],\n  searchResults: [],\n  favorites: [],\n  connections: [],\n  pendingRequests: [],\n  sentRequests: [],\n  isLoading: false,\n  searchFilters: {\n    sectors: [],\n    regions: [],\n    companySize: [],\n    objectives: [],\n    keywords: ''\n  },\n\n  fetchProfiles: async () => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      set({ profiles: mockProfiles, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  generateRecommendations: async (userId: string) => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Simulate AI matching algorithm\n      const currentUser = mockProfiles.find(p => p.id === userId);\n      if (!currentUser) return;\n\n      const recommendations: MatchingResult[] = mockProfiles\n        .filter(p => p.id !== userId)\n        .map(profile => {\n          // AI Matching Algorithm Simulation\n          const sectorAlignment = calculateSectorAlignment(currentUser, profile);\n          const objectiveAlignment = calculateObjectiveAlignment(currentUser, profile);\n          const geographicRelevance = calculateGeographicRelevance(currentUser, profile);\n          const experienceLevel = calculateExperienceLevel(profile);\n          const collaborationPotential = calculateCollaborationPotential(currentUser, profile);\n\n          const overallScore = Math.round(\n            (sectorAlignment * 0.3 + \n             objectiveAlignment * 0.25 + \n             geographicRelevance * 0.2 + \n             experienceLevel * 0.1 + \n             collaborationPotential * 0.15) * 100\n          );\n\n          const reasons = generateMatchingReasons(currentUser, profile, {\n            sectorAlignment,\n            objectiveAlignment,\n            geographicRelevance,\n            collaborationPotential\n          });\n\n          return {\n            user: profile,\n            score: overallScore,\n            reasons,\n            category: profile.type,\n            mutualConnections: Math.floor(Math.random() * 5),\n            compatibilityFactors: {\n              sectorAlignment: Math.round(sectorAlignment * 100),\n              objectiveAlignment: Math.round(objectiveAlignment * 100),\n              geographicRelevance: Math.round(geographicRelevance * 100),\n              experienceLevel: Math.round(experienceLevel * 100),\n              collaborationPotential: Math.round(collaborationPotential * 100)\n            }\n          };\n        })\n        .sort((a, b) => b.score - a.score)\n        .slice(0, 10);\n\n      set({ recommendations, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  searchProfiles: async (criteria) => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      const { profiles } = get();\n      const filtered = profiles.filter(profile => {\n        const matchesSector = !criteria.sectors?.length || \n          criteria.sectors.some((s: string) => profile.profile.sectors.includes(s));\n        const matchesRegion = !criteria.regions?.length || \n          criteria.regions.includes(profile.profile.geographicLocation);\n        const matchesSize = !criteria.companySize?.length || \n          criteria.companySize.includes(profile.profile.companySize);\n        const matchesKeywords = !criteria.keywords || \n          profile.profile.bio?.toLowerCase().includes(criteria.keywords.toLowerCase()) ||\n          profile.profile.companyDescription?.toLowerCase().includes(criteria.keywords.toLowerCase());\n\n        return matchesSector && matchesRegion && matchesSize && matchesKeywords;\n      });\n\n      set({ searchResults: filtered, isLoading: false });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  sendConnectionRequest: async (userId, message) => {\n    const { sentRequests } = get();\n    set({ sentRequests: [...sentRequests, userId] });\n  },\n\n  acceptConnectionRequest: async (requestId) => {\n    const { connections, pendingRequests } = get();\n    set({ \n      connections: [...connections, requestId],\n      pendingRequests: pendingRequests.filter(id => id !== requestId)\n    });\n  },\n\n  rejectConnectionRequest: async (requestId) => {\n    const { pendingRequests } = get();\n    set({ pendingRequests: pendingRequests.filter(id => id !== requestId) });\n  },\n\n  addToFavorites: (userId) => {\n    const { favorites } = get();\n    if (!favorites.includes(userId)) {\n      set({ favorites: [...favorites, userId] });\n    }\n  },\n\n  removeFromFavorites: (userId) => {\n    const { favorites } = get();\n    set({ favorites: favorites.filter(id => id !== userId) });\n  },\n\n  updateMatchingCriteria: async (criteria) => {\n    // Update user's matching criteria and regenerate recommendations\n    await get().generateRecommendations('user1');\n  },\n\n  getAIInsights: async (userId) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      profileOptimization: [\n        'Ajoutez plus de mots-cl├⌐s dans votre bio pour am├⌐liorer votre visibilit├⌐',\n        'Compl├⌐tez votre section produits/services pour attirer plus de partenaires'\n      ],\n      networkingTips: [\n        'Les profils avec des objectifs similaires aux v├┤tres ont 3x plus de chances de r├⌐pondre',\n        'Personnalisez vos messages de connexion pour augmenter le taux d\\'acceptation'\n      ],\n      trendingTopics: ['Digital Transformation', 'Green Ports', 'Automation'],\n      bestTimeToConnect: '14h-16h (heure locale)'\n    };\n  }\n}));\n\n// AI Matching Algorithm Helper Functions\nfunction calculateSectorAlignment(user1: NetworkingProfile, user2: NetworkingProfile): number {\n  const sectors1 = user1.profile.sectors || [];\n  const sectors2 = user2.profile.sectors || [];\n  const intersection = sectors1.filter(s => sectors2.includes(s));\n  return intersection.length / Math.max(sectors1.length, sectors2.length, 1);\n}\n\nfunction calculateObjectiveAlignment(user1: NetworkingProfile, user2: NetworkingProfile): number {\n  const objectives1 = user1.profile.participationObjectives || [];\n  const objectives2 = user2.profile.participationObjectives || [];\n  const intersection = objectives1.filter(o => objectives2.includes(o));\n  return intersection.length / Math.max(objectives1.length, objectives2.length, 1);\n}\n\nfunction calculateGeographicRelevance(user1: NetworkingProfile, user2: NetworkingProfile): number {\n  const region1 = user1.profile.geographicLocation;\n  const region2 = user2.profile.geographicLocation;\n  \n  if (region1 === region2) return 1.0;\n  if ((region1 === 'Europe' && region2 === 'Africa') || \n      (region1 === 'Africa' && region2 === 'Europe')) return 0.8;\n  return 0.6;\n}\n\nfunction calculateExperienceLevel(profile: NetworkingProfile): number {\n  const yearsInBusiness = new Date().getFullYear() - new Date(profile.createdAt).getFullYear();\n  return Math.min(yearsInBusiness / 10, 1.0);\n}\n\nfunction calculateCollaborationPotential(user1: NetworkingProfile, user2: NetworkingProfile): number {\n  const types1 = user1.profile.collaborationTypes || [];\n  const types2 = user2.profile.collaborationTypes || [];\n  const intersection = types1.filter(t => types2.includes(t));\n  return intersection.length / Math.max(types1.length, types2.length, 1);\n}\n\nfunction generateMatchingReasons(\n  user1: NetworkingProfile, \n  user2: NetworkingProfile, \n  factors: any\n): string[] {\n  const reasons: string[] = [];\n  \n  if (factors.sectorAlignment > 0.7) {\n    reasons.push('Secteurs d\\'activit├⌐ compl├⌐mentaires');\n  }\n  \n  if (factors.objectiveAlignment > 0.6) {\n    reasons.push('Objectifs de collaboration align├⌐s');\n  }\n  \n  if (factors.geographicRelevance > 0.8) {\n    reasons.push('Proximit├⌐ g├⌐ographique strat├⌐gique');\n  }\n  \n  if (factors.collaborationPotential > 0.5) {\n    reasons.push('Types de partenariat compatibles');\n  }\n\n  const commonInterests = user1.profile.thematicInterests?.filter(\n    interest => user2.profile.thematicInterests?.includes(interest)\n  ) || [];\n  \n  if (commonInterests.length > 0) {\n    reasons.push(`Int├⌐r├¬ts communs: ${commonInterests.slice(0, 2).join(', ')}`);\n  }\n\n  return reasons.slice(0, 4);\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\newsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\store\\visitorStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2496,2499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2496,2499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3582,3585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3582,3585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":449,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":449,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\n\ninterface VisitorProfile {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  company: string;\n  position: string;\n  country: string;\n  phone: string;\n  avatar?: string;\n  passType: 'free' | 'basic' | 'premium' | 'vip';\n  registrationStatus: 'pending' | 'confirmed' | 'cancelled';\n  \n  // Sp├⌐cifique aux visiteurs\n  sectorsOfInterest: string[];\n  visitObjectives: string[];\n  competencies: string[];\n  expertises: string[];\n  \n  // Pr├⌐f├⌐rences\n  thematicInterests: string[];\n  preferredLanguage: string;\n  notificationPreferences: {\n    email: boolean;\n    push: boolean;\n    inApp: boolean;\n  };\n}\n\ninterface Appointment {\n  id: string;\n  title: string;\n  company: string;\n  contactPerson: string;\n  date: Date;\n  time: string;\n  duration: number;\n  location: string;\n  type: 'b2b' | 'conference' | 'workshop' | 'networking';\n  status: 'pending' | 'confirmed' | 'cancelled';\n  description?: string;\n  meetingLink?: string;\n}\n\ninterface Session {\n  id: string;\n  title: string;\n  description: string;\n  date: Date;\n  startTime: string;\n  endTime: string;\n  location: string;\n  speaker: string;\n  category: string;\n  capacity: number;\n  registered: number;\n}\n\ninterface FavoriteExhibitor {\n  id: string;\n  name: string;\n  sector: string;\n  description: string;\n  logo: string;\n  pavilion: string;\n  standNumber: string;\n  website?: string;\n}\n\ninterface Connection {\n  id: string;\n  name: string;\n  company: string;\n  position: string;\n  avatar: string;\n  type: 'exhibitor' | 'visitor' | 'partner';\n  connectedAt: Date;\n  lastInteraction?: Date;\n}\n\ninterface Message {\n  id: string;\n  senderName: string;\n  senderAvatar: string;\n  preview: string;\n  timestamp: Date;\n  read: boolean;\n  type: 'direct' | 'group' | 'system';\n}\n\ninterface Notification {\n  id: string;\n  type: 'appointment' | 'message' | 'system' | 'reminder';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n}\n\ninterface SalonInfo {\n  name: string;\n  dates: {\n    start: Date;\n    end: Date;\n  };\n  location: {\n    venue: string;\n    city: string;\n    country: string;\n    address: string;\n  };\n  hours: {\n    opening: string;\n    closing: string;\n  };\n  stats: {\n    exhibitors: number;\n    visitors: number;\n    conferences: number;\n    countries: number;\n  };\n}\n\ninterface VisitorAgenda {\n  appointments: Appointment[];\n  guaranteedMeetings: {\n    total: number;\n    used: number;\n    remaining: number;\n  };\n  personalEvents: any[];\n}\n\ninterface VisitorState {\n  visitorProfile: VisitorProfile | null;\n  agenda: VisitorAgenda;\n  favoriteExhibitors: FavoriteExhibitor[];\n  registeredSessions: Session[];\n  connections: Connection[];\n  messages: Message[];\n  notifications: Notification[];\n  salonInfo: SalonInfo;\n  isLoading: boolean;\n  \n  // Actions\n  fetchVisitorData: () => Promise<void>;\n  updateProfile: (profileData: Partial<VisitorProfile>) => Promise<void>;\n  addToFavorites: (exhibitorId: string) => Promise<void>;\n  removeFromFavorites: (exhibitorId: string) => Promise<void>;\n  registerForSession: (sessionId: string) => Promise<void>;\n  unregisterFromSession: (sessionId: string) => Promise<void>;\n  sendMeetingRequest: (exhibitorId: string, message: string, preferredDate: Date) => Promise<void>;\n  acceptMeetingRequest: (requestId: string) => Promise<void>;\n  rejectMeetingRequest: (requestId: string) => Promise<void>;\n  sendMessage: (recipientId: string, message: string) => Promise<void>;\n  markNotificationAsRead: (notificationId: string) => void;\n  updateNotificationPreferences: (preferences: any) => Promise<void>;\n}\n\n// Mock data\nconst mockVisitorProfile: VisitorProfile = {\n  id: 'visitor1',\n  firstName: 'Marie',\n  lastName: 'Dubois',\n  email: 'marie.dubois@maritime-consulting.fr',\n  company: 'Maritime Consulting France',\n  position: 'Consultante Senior',\n  country: 'France',\n  phone: '+33 1 23 45 67 89',\n  avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n  passType: 'premium',\n  registrationStatus: 'confirmed',\n  sectorsOfInterest: [\n    'Port Operations',\n    'Digital Transformation',\n    'Sustainability',\n    'Maritime Technology'\n  ],\n  visitObjectives: [\n    'Recherche de fournisseurs',\n    'Veille technologique',\n    'Opportunit├⌐s de partenariat',\n    'Formation continue'\n  ],\n  competencies: [\n    'Gestion de projet portuaire',\n    'Analyse de performance',\n    'Consulting strat├⌐gique',\n    'Transformation digitale'\n  ],\n  expertises: [\n    'Port Management',\n    'Supply Chain',\n    'Digital Strategy',\n    'Process Optimization'\n  ],\n  thematicInterests: [\n    'Technologies maritimes',\n    '├ënergies renouvelables',\n    'Logistique portuaire',\n    'Innovation digitale'\n  ],\n  preferredLanguage: 'fr',\n  notificationPreferences: {\n    email: true,\n    push: true,\n    inApp: true\n  }\n};\n\nconst mockAppointments: Appointment[] = [\n  {\n    id: '1',\n    title: 'Rendez-vous avec Port Solutions Inc.',\n    company: 'Port Solutions Inc.',\n    contactPerson: 'Sarah Johnson',\n    date: new Date('2026-02-05T14:00:00'),\n    time: '14:00',\n    duration: 30,\n    location: 'Stand A-12',\n    type: 'b2b',\n    status: 'confirmed',\n    description: 'Discussion sur les solutions de gestion portuaire'\n  },\n  {\n    id: '2',\n    title: 'Conf├⌐rence: Digitalisation des Ports',\n    company: 'SIPORTS',\n    contactPerson: 'Dr. Ahmed El Mansouri',\n    date: new Date('2026-02-06T10:30:00'),\n    time: '10:30',\n    duration: 90,\n    location: 'Auditorium Principal',\n    type: 'conference',\n    status: 'confirmed',\n    description: 'Table ronde sur les enjeux de la digitalisation'\n  },\n  {\n    id: '3',\n    title: 'Atelier: Ports Durables',\n    company: 'Green Port Initiative',\n    contactPerson: 'Dr. Maria Santos',\n    date: new Date('2026-02-07T09:00:00'),\n    time: '09:00',\n    duration: 120,\n    location: 'Salle Workshop B',\n    type: 'workshop',\n    status: 'pending',\n    description: 'Atelier pratique sur la transition ├⌐nerg├⌐tique'\n  }\n];\n\nconst mockFavoriteExhibitors: FavoriteExhibitor[] = [\n  {\n    id: '1',\n    name: 'Port Solutions Inc.',\n    sector: 'Port Management',\n    description: 'Leading provider of integrated port management solutions',\n    logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n    pavilion: 'Industrie Portuaire',\n    standNumber: 'A-12',\n    website: 'https://portsolutions.com'\n  },\n  {\n    id: '2',\n    name: 'Maritime Tech Solutions',\n    sector: 'Equipment Manufacturing',\n    description: 'Innovative manufacturer of port equipment and automation systems',\n    logo: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=200',\n    pavilion: 'Performance & Exploitation',\n    standNumber: 'B-08',\n    website: 'https://maritimetech.com'\n  },\n  {\n    id: '3',\n    name: 'Green Port Initiative',\n    sector: 'Sustainability',\n    description: 'Promoting sustainable port development worldwide',\n    logo: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=200',\n    pavilion: 'Acad├⌐mique & Formation',\n    standNumber: 'C-15'\n  }\n];\n\nconst mockConnections: Connection[] = [\n  {\n    id: '1',\n    name: 'Sarah Johnson',\n    company: 'Port Solutions Inc.',\n    position: 'CEO',\n    avatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100',\n    type: 'exhibitor',\n    connectedAt: new Date('2024-01-15'),\n    lastInteraction: new Date('2024-01-20')\n  },\n  {\n    id: '2',\n    name: 'Ahmed El Mansouri',\n    company: 'Autorit├⌐ Portuaire Casablanca',\n    position: 'Directeur Technique',\n    avatar: 'https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=100',\n    type: 'partner',\n    connectedAt: new Date('2024-01-18'),\n    lastInteraction: new Date('2024-01-22')\n  }\n];\n\nconst mockMessages: Message[] = [\n  {\n    id: '1',\n    senderName: 'Sarah Johnson',\n    senderAvatar: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=100',\n    preview: 'Merci pour votre int├⌐r├¬t pour nos solutions. Je confirme notre RDV de demain ├á 14h.',\n    timestamp: new Date(Date.now() - 3600000),\n    read: false,\n    type: 'direct'\n  },\n  {\n    id: '2',\n    senderName: 'SIPORTS Organisateurs',\n    senderAvatar: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=100',\n    preview: 'Nouveau: Programme des conf├⌐rences mis ├á jour avec 5 nouvelles sessions.',\n    timestamp: new Date(Date.now() - 7200000),\n    read: true,\n    type: 'system'\n  }\n];\n\nconst mockNotifications: Notification[] = [\n  {\n    id: '1',\n    type: 'reminder',\n    title: 'Rappel de rendez-vous',\n    message: 'Votre rendez-vous avec Port Solutions Inc. commence dans 1 heure',\n    timestamp: new Date(Date.now() - 1800000),\n    read: false,\n    actionUrl: '/appointments/1'\n  },\n  {\n    id: '2',\n    type: 'system',\n    title: 'Nouveau contenu disponible',\n    message: 'Maritime Tech Solutions a publi├⌐ son nouveau catalogue produits',\n    timestamp: new Date(Date.now() - 3600000),\n    read: false,\n    actionUrl: '/exhibitors/2'\n  },\n  {\n    id: '3',\n    type: 'message',\n    title: 'Nouveau message',\n    message: 'Sarah Johnson vous a envoy├⌐ un message',\n    timestamp: new Date(Date.now() - 5400000),\n    read: true,\n    actionUrl: '/messages/1'\n  }\n];\n\nconst mockSalonInfo: SalonInfo = {\n  name: 'SIPORTS 2026',\n  dates: {\n    start: new Date('2026-02-05T09:30:00'),\n    end: new Date('2026-02-07T18:00:00')\n  },\n  location: {\n    venue: 'Mohammed VI Exhibition Center',\n    city: 'El Jadida',\n    country: 'Maroc',\n    address: 'Route de Casablanca, El Jadida 24000, Maroc'\n  },\n  hours: {\n    opening: '09:30',\n    closing: '18:00'\n  },\n  stats: {\n    exhibitors: 330,\n    visitors: 6300,\n    conferences: 40,\n    countries: 42\n  }\n};\n\nconst mockRegisteredSessions: Session[] = [\n  {\n    id: '1',\n    title: 'Digitalisation des Ports : Enjeux et Opportunit├⌐s',\n    description: 'Table ronde sur les technologies ├⌐mergentes dans le secteur portuaire',\n    date: new Date('2026-02-05T14:00:00'),\n    startTime: '14:00',\n    endTime: '15:30',\n    location: 'Salle de conf├⌐rence A',\n    speaker: 'Dr. Sarah Johnson',\n    category: 'Digital Transformation',\n    capacity: 50,\n    registered: 32\n  },\n  {\n    id: '2',\n    title: 'Ports Durables : Transition ├ënerg├⌐tique',\n    description: 'Strat├⌐gies de transition ├⌐nerg├⌐tique dans les ports',\n    date: new Date('2026-02-06T16:00:00'),\n    startTime: '16:00',\n    endTime: '17:00',\n    location: 'Auditorium Principal',\n    speaker: 'Dr. Ahmed El Mansouri',\n    category: 'Sustainability',\n    capacity: 200,\n    registered: 145\n  }\n];\n\nexport const useVisitorStore = create<VisitorState>((set, get) => ({\n  visitorProfile: null,\n  agenda: {\n    appointments: [],\n    guaranteedMeetings: { total: 5, used: 2, remaining: 3 },\n    personalEvents: []\n  },\n  favoriteExhibitors: [],\n  registeredSessions: [],\n  connections: [],\n  messages: [],\n  notifications: [],\n  salonInfo: mockSalonInfo,\n  isLoading: false,\n\n  fetchVisitorData: async () => {\n    set({ isLoading: true });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      set({\n        visitorProfile: mockVisitorProfile,\n        agenda: {\n          appointments: mockAppointments,\n          guaranteedMeetings: { total: 5, used: 2, remaining: 3 },\n          personalEvents: []\n        },\n        favoriteExhibitors: mockFavoriteExhibitors,\n        registeredSessions: mockRegisteredSessions,\n        connections: mockConnections,\n        messages: mockMessages,\n        notifications: mockNotifications,\n        isLoading: false\n      });\n    } catch (error) {\n      set({ isLoading: false });\n    }\n  },\n\n  updateProfile: async (profileData) => {\n    const { visitorProfile } = get();\n    if (visitorProfile) {\n      set({\n        visitorProfile: { ...visitorProfile, ...profileData }\n      });\n    }\n  },\n\n  addToFavorites: async (exhibitorId) => {\n    // Mock implementation - would call API\n    const newFavorite: FavoriteExhibitor = {\n      id: exhibitorId,\n      name: 'Nouvel Exposant',\n      sector: 'Technology',\n      description: 'Description de l\\'exposant',\n      logo: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=200',\n      pavilion: 'Industrie Portuaire',\n      standNumber: 'A-XX'\n    };\n    \n    const { favoriteExhibitors } = get();\n    set({ favoriteExhibitors: [...favoriteExhibitors, newFavorite] });\n  },\n\n  removeFromFavorites: async (exhibitorId) => {\n    const { favoriteExhibitors } = get();\n    set({ \n      favoriteExhibitors: favoriteExhibitors.filter(e => e.id !== exhibitorId) \n    });\n  },\n\n  registerForSession: async (sessionId) => {\n    // Mock implementation\n    console.log('Registering for session:', sessionId);\n  },\n\n  unregisterFromSession: async (sessionId) => {\n    const { registeredSessions } = get();\n    set({ \n      registeredSessions: registeredSessions.filter(s => s.id !== sessionId) \n    });\n  },\n\n  sendMeetingRequest: async (exhibitorId, message, preferredDate) => {\n    // Mock implementation\n    const newAppointment: Appointment = {\n      id: Date.now().toString(),\n      title: 'Nouveau rendez-vous',\n      company: 'Exposant',\n      contactPerson: 'Contact',\n      date: preferredDate,\n      time: '14:00',\n      duration: 30,\n      location: '├Ç d├⌐finir',\n      type: 'b2b',\n      status: 'pending',\n      description: message\n    };\n\n    const { agenda } = get();\n    set({\n      agenda: {\n        ...agenda,\n        appointments: [...agenda.appointments, newAppointment]\n      }\n    });\n  },\n\n  acceptMeetingRequest: async (requestId) => {\n    const { agenda } = get();\n    const updatedAppointments = agenda.appointments.map(app =>\n      app.id === requestId ? { ...app, status: 'confirmed' as const } : app\n    );\n    \n    set({\n      agenda: { ...agenda, appointments: updatedAppointments }\n    });\n  },\n\n  rejectMeetingRequest: async (requestId) => {\n    const { agenda } = get();\n    const updatedAppointments = agenda.appointments.map(app =>\n      app.id === requestId ? { ...app, status: 'cancelled' as const } : app\n    );\n    \n    set({\n      agenda: { ...agenda, appointments: updatedAppointments }\n    });\n  },\n\n  sendMessage: async (recipientId, message) => {\n    // Mock implementation\n    console.log('Sending message to:', recipientId, message);\n  },\n\n  markNotificationAsRead: (notificationId) => {\n    const { notifications } = get();\n    const updatedNotifications = notifications.map(n =>\n      n.id === notificationId ? { ...n, read: true } : n\n    );\n    set({ notifications: updatedNotifications });\n  },\n\n  updateNotificationPreferences: async (preferences) => {\n    const { visitorProfile } = get();\n    if (visitorProfile) {\n      set({\n        visitorProfile: {\n          ...visitorProfile,\n          notificationPreferences: { ...visitorProfile.notificationPreferences, ...preferences }\n        }\n      });\n    }\n  }\n}));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2353,2356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2353,2356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6289,6292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6289,6292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface User {\n  id: string;\n  email: string;\n  name: string;\n  type: 'exhibitor' | 'partner' | 'visitor' | 'admin';\n  profile: UserProfile;\n  status: 'pending' | 'active' | 'suspended' | 'rejected';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface UserProfile {\n  firstName: string;\n  lastName: string;\n  avatar?: string;\n  company?: string;\n  position?: string;\n  country: string;\n  phone?: string;\n  linkedin?: string;\n  website?: string;\n  bio?: string;\n  interests: string[];\n  objectives: string[];\n  companyDescription?: string;\n  sectors: string[];\n  products: string[];\n  videos: string[];\n  images: string[];\n  participationObjectives: string[];\n  thematicInterests: string[];\n  companySize?: string;\n  geographicLocation?: string;\n  collaborationTypes: string[];\n  expertise: string[];\n  visitObjectives?: string[];\n  competencies?: string[];\n}\n\nexport interface Exhibitor {\n  id: string;\n  userId: string;\n  companyName: string;\n  category: ExhibitorCategory;\n  sector: string;\n  description: string;\n  logo?: string;\n  website?: string;\n  products: Product[];\n  availability: TimeSlot[];\n  miniSite: MiniSite;\n  verified: boolean;\n  featured: boolean;\n  contactInfo: ContactInfo;\n  certifications: string[];\n  establishedYear?: number;\n  employeeCount?: string;\n  revenue?: string;\n  markets: string[];\n}\n\nexport interface ContactInfo {\n  email: string;\n  phone: string;\n  address: string;\n  city: string;\n  country: string;\n  zipCode?: string;\n}\n\nexport type ExhibitorCategory = \n  | 'institutional' \n  | 'port-industry' \n  | 'port-operations' \n  | 'academic';\n\nexport interface Product {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  images: string[];\n  specifications?: string;\n  brochure?: string;\n  price?: number;\n  featured: boolean;\n  technicalSpecs: TechnicalSpec[];\n}\n\nexport interface TechnicalSpec {\n  name: string;\n  value: string;\n  unit?: string;\n}\n\nexport interface MiniSite {\n  id: string;\n  exhibitorId: string;\n  theme: string;\n  customColors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n  };\n  sections: MiniSiteSection[];\n  published: boolean;\n  views: number;\n  lastUpdated: Date;\n}\n\nexport interface MiniSiteSection {\n  id: string;\n  type: 'hero' | 'about' | 'products' | 'news' | 'gallery' | 'team' | 'certifications';\n  title: string;\n  content: any;\n  order: number;\n  visible: boolean;\n}\n\nexport interface TimeSlot {\n  id: string;\n  date: Date;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  type: 'in-person' | 'virtual' | 'hybrid';\n  maxBookings: number;\n  currentBookings: number;\n  available: boolean;\n  location?: string;\n}\n\nexport interface Appointment {\n  id: string;\n  exhibitorId: string;\n  visitorId: string;\n  timeSlotId: string;\n  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';\n  message?: string;\n  notes?: string;\n  rating?: number;\n  createdAt: Date;\n  meetingType: 'in-person' | 'virtual' | 'hybrid';\n  meetingLink?: string;\n}\n\nexport interface ChatMessage {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  content: string;\n  type: 'text' | 'file' | 'system';\n  timestamp: Date;\n  read: boolean;\n  translated?: boolean;\n  originalLanguage?: string;\n  attachments?: MessageAttachment[];\n}\n\nexport interface MessageAttachment {\n  id: string;\n  name: string;\n  url: string;\n  type: string;\n  size: number;\n}\n\nexport interface ChatConversation {\n  id: string;\n  participants: string[];\n  lastMessage?: ChatMessage;\n  unreadCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NetworkingRecommendation {\n  id: string;\n  userId: string;\n  recommendedUserId: string;\n  score: number;\n  reasons: string[];\n  category: string;\n  viewed: boolean;\n  contacted: boolean;\n  mutualConnections: number;\n  recommendedUser: User;\n}\n\nexport interface Event {\n  id: string;\n  title: string;\n  description: string;\n  type: 'webinar' | 'roundtable' | 'networking' | 'workshop' | 'conference';\n  date: Date;\n  startTime: string;\n  endTime: string;\n  capacity: number;\n  registered: number;\n  speakers: Speaker[];\n  category: string;\n  virtual: boolean;\n  featured: boolean;\n  location?: string;\n  meetingLink?: string;\n  tags: string[];\n}\n\nexport interface Speaker {\n  id: string;\n  name: string;\n  title: string;\n  company: string;\n  bio: string;\n  avatar?: string;\n  linkedin?: string;\n  expertise: string[];\n}\n\nexport interface NewsArticle {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  publishedAt: Date;\n  category: string;\n  tags: string[];\n  featured: boolean;\n  image?: string;\n  readTime: number;\n}\n\nexport interface Dashboard {\n  stats: DashboardStats;\n  recentActivity: Activity[];\n  upcomingEvents: Event[];\n  recommendations: NetworkingRecommendation[];\n}\n\nexport interface DashboardStats {\n  profileViews: number;\n  connections: number;\n  appointments: number;\n  messages: number;\n  catalogDownloads?: number;\n  miniSiteViews?: number;\n}\n\nexport interface Activity {\n  id: string;\n  type: 'profile_view' | 'message' | 'appointment' | 'connection' | 'download';\n  description: string;\n  timestamp: Date;\n  userId?: string;\n  userName?: string;\n}\n\nexport interface RegistrationData {\n  // Step 1: General Information\n  accountType: 'exhibitor' | 'partner' | 'visitor';\n  companyName: string;\n  sector: string;\n  country: string;\n  website?: string;\n  registrationNumber?: string;\n  \n  // Step 2: Contact Information\n  firstName: string;\n  lastName: string;\n  position: string;\n  email: string;\n  phone: string;\n  linkedin?: string;\n  \n  // Step 3: Detailed Information\n  description: string;\n  products: string[];\n  targetMarkets: string[];\n  employeeCount: string;\n  revenue?: string;\n  certifications: string[];\n  \n  // Step 4: Documents\n  logo?: File;\n  brochure?: File;\n  certificate?: File;\n  catalog?: File;\n  \n  // Step 5: Objectives\n  objectives: string[];\n  partnershipTypes: string[];\n  geographicInterests: string[];\n  budget?: string;\n  availability: string[];\n}\n\nexport interface ChatBot {\n  id: string;\n  name: string;\n  avatar: string;\n  status: 'online' | 'offline';\n  capabilities: string[];\n}\n\nexport interface AIRecommendation {\n  type: 'contact' | 'event' | 'product' | 'content';\n  title: string;\n  description: string;\n  confidence: number;\n  data: any;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\wordpress-plugin\\assets\\admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Admin\\Desktop\\version1\\siport-main\\wordpress-plugin\\assets\\siports.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
