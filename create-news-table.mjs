import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Configuration Supabase manquante dans le fichier .env');
  console.error('V√©rifiez VITE_SUPABASE_URL et VITE_SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Utiliser la cl√© service_role pour les migrations
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function runMigration() {
  console.log('üöÄ Ex√©cution de la migration pour cr√©er la table news...\n');

  try {
    // Lire le fichier SQL de migration
    const migrationPath = path.join(process.cwd(), 'scripts', 'create-news-table.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìÑ Migration SQL charg√©e depuis:', migrationPath);
    console.log('üîß Ex√©cution de la migration...\n');

    // Ex√©cuter la migration SQL
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    });

    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution de la migration:', error.message);

      // Essayer une approche alternative en ex√©cutant les commandes une par une
      console.log('üîÑ Tentative d\'ex√©cution commande par commande...\n');

      const commands = migrationSQL.split(';').filter(cmd => cmd.trim().length > 0);

      for (const command of commands) {
        if (command.trim()) {
          try {
            console.log(`‚ö° Ex√©cution: ${command.trim().substring(0, 50)}...`);
            const { error: cmdError } = await supabase.rpc('exec_sql', {
              sql: command.trim()
            });

            if (cmdError) {
              console.error(`‚ùå Erreur commande: ${cmdError.message}`);
            } else {
              console.log(`‚úÖ Commande ex√©cut√©e avec succ√®s`);
            }
          } catch (cmdErr) {
            console.error(`‚ùå Exception commande: ${cmdErr.message}`);
          }
        }
      }
    } else {
      console.log('‚úÖ Migration ex√©cut√©e avec succ√®s!');
      console.log('üìä R√©sultat:', data);
    }

    // V√©rifier si la table a √©t√© cr√©√©e
    console.log('\nüîç V√©rification de la cr√©ation de la table...');
    const { data: tables, error: checkError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'news');

    if (checkError) {
      console.error('‚ùå Erreur v√©rification table:', checkError.message);
    } else if (tables && tables.length > 0) {
      console.log('‚úÖ Table news cr√©√©e avec succ√®s!');
    } else {
      console.log('‚ö†Ô∏è Table news introuvable - v√©rification manuelle recommand√©e');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    console.error('Stack trace:', error.stack);
  }
}

runMigration();
