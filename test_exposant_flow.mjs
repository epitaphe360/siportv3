#!/usr/bin/env node

/**
 * Script de test du flux complet :
 * 1. Cr√©er un exposant
 * 2. Valider l'exposant (admin)
 * 3. Cr√©er le mini-site automatiquement
 * 4. V√©rifier l'affichage du mini-site
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = 'https://eqjoqgpbxhsfgcovipgu.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVxam9xZ3BieGhzZmdjb3ZpcGd1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzM2MjI0NywiZXhwIjoyMDcyOTM4MjQ3fQ.HzgGnbbTyF-c_jAawvXNDXfHpqtZR4mN6UIx-X3GdVo';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Donn√©es de test
const testExhibitor = {
  email: `test-exposant-${Date.now()}@example.com`,
  password: 'TestPassword123!',
  companyName: 'Test Company Solutions',
  sector: 'Technology',
  category: 'port-industry',
  description: 'Une entreprise de test pour valider le flux complet',
  website: 'https://example.com'
};

let createdUserId = null;
let createdExhibitorId = null;

console.log('üöÄ D√©but du test du flux complet...\n');

// √âtape 1 : Cr√©er un exposant
async function step1_createExhibitor() {
  console.log('üìù √âTAPE 1 : Cr√©ation de l\'exposant...');
  
  try {
    // Cr√©er l'utilisateur
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testExhibitor.email,
      password: testExhibitor.password,
      email_confirm: true
    });

    if (authError) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', authError);
      return false;
    }

    createdUserId = authData.user.id;
    console.log(`‚úÖ Utilisateur cr√©√© avec l'ID: ${createdUserId}`);

    // Cr√©er le profil utilisateur
    const { error: userError } = await supabase
      .from('users')
      .insert({
        id: createdUserId,
        email: testExhibitor.email,
        name: testExhibitor.companyName,
        type: 'exhibitor',
        profile: {
          companyName: testExhibitor.companyName,
          sector: testExhibitor.sector
        }
      });

    if (userError) {
      console.error('‚ùå Erreur lors de la cr√©ation du profil utilisateur:', userError);
      return false;
    }

    console.log('‚úÖ Profil utilisateur cr√©√©');

    // Cr√©er le profil exposant
    const { data: exhibitorData, error: exhibitorError } = await supabase
      .from('exhibitors')
      .insert({
        user_id: createdUserId,
        company_name: testExhibitor.companyName,
        category: testExhibitor.category,
        sector: testExhibitor.sector,
        description: testExhibitor.description,
        website: testExhibitor.website,
        verified: false,
        featured: false,
        contact_info: {
          email: testExhibitor.email,
          website: testExhibitor.website
        }
      })
      .select()
      .single();

    if (exhibitorError) {
      console.error('‚ùå Erreur lors de la cr√©ation du profil exposant:', exhibitorError);
      return false;
    }

    createdExhibitorId = exhibitorData.id;
    console.log(`‚úÖ Profil exposant cr√©√© avec l'ID: ${createdExhibitorId}`);
    console.log('‚úÖ √âTAPE 1 TERMIN√âE\n');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    return false;
  }
}

// √âtape 2 : Valider l'exposant (admin)
async function step2_validateExhibitor() {
  console.log('‚úÖ √âTAPE 2 : Validation de l\'exposant par l\'admin...');
  
  try {
    // V√©rifier l'exposant
    const { error: exhibitorError } = await supabase
      .from('exhibitors')
      .update({ verified: true, featured: true })
      .eq('id', createdExhibitorId);

    if (exhibitorError) {
      console.error('‚ùå Erreur lors de la v√©rification de l\'exposant:', exhibitorError);
      return false;
    }

    console.log('‚úÖ Exposant valid√© et v√©rifi√©');
    console.log('‚úÖ √âTAPE 2 TERMIN√âE\n');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    return false;
  }
}

// √âtape 3 : Cr√©er le mini-site automatiquement
async function step3_createMiniSite() {
  console.log('üé® √âTAPE 3 : Cr√©ation du mini-site...');
  
  try {
    // Cr√©er le mini-site
    const { data: miniSiteData, error: miniSiteError } = await supabase
      .from('mini_sites')
      .insert({
        exhibitor_id: createdExhibitorId,
        theme: 'professional',
        custom_colors: {
          primary: '#1e40af',
          secondary: '#3b82f6',
          accent: '#60a5fa'
        },
        sections: [
          {
            type: 'hero',
            title: testExhibitor.companyName,
            subtitle: 'Solutions innovantes pour l\'industrie portuaire',
            backgroundImage: 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg'
          },
          {
            type: 'about',
            title: '√Ä propos',
            description: testExhibitor.description
          },
          {
            type: 'products',
            title: 'Nos produits',
            items: []
          },
          {
            type: 'contact',
            title: 'Contactez-nous',
            email: testExhibitor.email,
            website: testExhibitor.website
          }
        ],
        published: true,
        views: 0
      })
      .select()
      .single();

    if (miniSiteError) {
      console.error('‚ùå Erreur lors de la cr√©ation du mini-site:', miniSiteError);
      return false;
    }

    console.log(`‚úÖ Mini-site cr√©√© avec l'ID: ${miniSiteData.id}`);
    console.log('‚úÖ √âTAPE 3 TERMIN√âE\n');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    return false;
  }
}

// √âtape 4 : V√©rifier l'affichage du mini-site
async function step4_verifyMiniSite() {
  console.log('üîç √âTAPE 4 : V√©rification de l\'affichage du mini-site...');
  
  try {
    // R√©cup√©rer le mini-site
    const { data: miniSite, error: miniSiteError } = await supabase
      .from('mini_sites')
      .select('*')
      .eq('exhibitor_id', createdExhibitorId)
      .single();

    if (miniSiteError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du mini-site:', miniSiteError);
      return false;
    }

    console.log('‚úÖ Mini-site r√©cup√©r√© avec succ√®s');
    console.log(`   - ID: ${miniSite.id}`);
    console.log(`   - Th√®me: ${miniSite.theme}`);
    console.log(`   - Publi√©: ${miniSite.published ? 'Oui' : 'Non'}`);
    console.log(`   - Nombre de sections: ${miniSite.sections.length}`);
    console.log(`   - Vues: ${miniSite.views}`);

    // R√©cup√©rer l'exposant avec son mini-site
    const { data: exhibitor, error: exhibitorError } = await supabase
      .from('exhibitors')
      .select(`
        *,
        mini_sites!mini_sites_exhibitor_id_fkey (*)
      `)
      .eq('id', createdExhibitorId)
      .single();

    if (exhibitorError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'exposant:', exhibitorError);
      return false;
    }

    console.log('‚úÖ Exposant r√©cup√©r√© avec son mini-site');
    console.log(`   - URL du mini-site: /minisite/${createdExhibitorId}`);
    console.log('‚úÖ √âTAPE 4 TERMIN√âE\n');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    return false;
  }
}

// Fonction de nettoyage (optionnel)
async function cleanup() {
  console.log('üßπ Nettoyage des donn√©es de test...');
  
  try {
    // Supprimer le mini-site
    await supabase
      .from('mini_sites')
      .delete()
      .eq('exhibitor_id', createdExhibitorId);

    // Supprimer l'exposant
    await supabase
      .from('exhibitors')
      .delete()
      .eq('id', createdExhibitorId);

    // Supprimer l'utilisateur
    await supabase
      .from('users')
      .delete()
      .eq('id', createdUserId);

    // Supprimer l'utilisateur de l'auth
    await supabase.auth.admin.deleteUser(createdUserId);

    console.log('‚úÖ Nettoyage termin√©\n');
  } catch (error) {
    console.error('‚ö†Ô∏è  Erreur lors du nettoyage:', error);
  }
}

// Ex√©cution du test
async function runTest() {
  try {
    const step1 = await step1_createExhibitor();
    if (!step1) {
      console.error('‚ùå Le test a √©chou√© √† l\'√©tape 1');
      return;
    }

    const step2 = await step2_validateExhibitor();
    if (!step2) {
      console.error('‚ùå Le test a √©chou√© √† l\'√©tape 2');
      return;
    }

    const step3 = await step3_createMiniSite();
    if (!step3) {
      console.error('‚ùå Le test a √©chou√© √† l\'√©tape 3');
      return;
    }

    const step4 = await step4_verifyMiniSite();
    if (!step4) {
      console.error('‚ùå Le test a √©chou√© √† l\'√©tape 4');
      return;
    }

    console.log('üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS ! üéâ\n');
    console.log('üìã R√©sum√© :');
    console.log(`   - User ID: ${createdUserId}`);
    console.log(`   - Exhibitor ID: ${createdExhibitorId}`);
    console.log(`   - Email: ${testExhibitor.email}`);
    console.log(`   - URL du mini-site: /minisite/${createdExhibitorId}`);
    console.log('');

    // Demander si on doit nettoyer
    console.log('‚ö†Ô∏è  Les donn√©es de test ont √©t√© cr√©√©es.');
    console.log('   Pour les supprimer, ex√©cutez : node test_exposant_flow.mjs --cleanup');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du test:', error);
  }
}

// Point d'entr√©e
if (process.argv.includes('--cleanup')) {
  cleanup();
} else {
  runTest();
}
